// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for BruteForceStrategy.
const (
	LINEAR   BruteForceStrategy = "LINEAR"
	MULTIPLE BruteForceStrategy = "MULTIPLE"
)

// Defines values for DecisionEffect.
const (
	DENY   DecisionEffect = "DENY"
	PERMIT DecisionEffect = "PERMIT"
)

// Defines values for DecisionStrategy.
const (
	AFFIRMATIVE DecisionStrategy = "AFFIRMATIVE"
	CONSENSUS   DecisionStrategy = "CONSENSUS"
	UNANIMOUS   DecisionStrategy = "UNANIMOUS"
)

// Defines values for EnforcementMode.
const (
	EnforcementModeDISABLED   EnforcementMode = "DISABLED"
	EnforcementModeENFORCING  EnforcementMode = "ENFORCING"
	EnforcementModePERMISSIVE EnforcementMode = "PERMISSIVE"
)

// Defines values for KeyUse.
const (
	ENC KeyUse = "ENC"
	SIG KeyUse = "SIG"
)

// Defines values for Logic.
const (
	NEGATIVE Logic = "NEGATIVE"
	POSITIVE Logic = "POSITIVE"
)

// Defines values for MembershipType.
const (
	MANAGED   MembershipType = "MANAGED"
	UNMANAGED MembershipType = "UNMANAGED"
)

// Defines values for PolicyEnforcementMode.
const (
	PolicyEnforcementModeDISABLED   PolicyEnforcementMode = "DISABLED"
	PolicyEnforcementModeENFORCING  PolicyEnforcementMode = "ENFORCING"
	PolicyEnforcementModePERMISSIVE PolicyEnforcementMode = "PERMISSIVE"
)

// Defines values for ScopeEnforcementMode.
const (
	ALL      ScopeEnforcementMode = "ALL"
	ANY      ScopeEnforcementMode = "ANY"
	DISABLED ScopeEnforcementMode = "DISABLED"
)

// Defines values for UnmanagedAttributePolicy.
const (
	ADMINEDIT UnmanagedAttributePolicy = "ADMIN_EDIT"
	ADMINVIEW UnmanagedAttributePolicy = "ADMIN_VIEW"
	ENABLED   UnmanagedAttributePolicy = "ENABLED"
)

// AbstractPolicyRepresentation defines model for AbstractPolicyRepresentation.
type AbstractPolicyRepresentation struct {
	DecisionStrategy *DecisionStrategy         `json:"decisionStrategy,omitempty"`
	Description      *string                   `json:"description,omitempty"`
	Id               *string                   `json:"id,omitempty"`
	Logic            *Logic                    `json:"logic,omitempty"`
	Name             *string                   `json:"name,omitempty"`
	Owner            *string                   `json:"owner,omitempty"`
	Policies         *[]string                 `json:"policies,omitempty"`
	Resources        *[]string                 `json:"resources,omitempty"`
	ResourcesData    *[]ResourceRepresentation `json:"resourcesData,omitempty"`
	Scopes           *[]string                 `json:"scopes,omitempty"`
	ScopesData       *[]ScopeRepresentation    `json:"scopesData,omitempty"`
	Type             *string                   `json:"type,omitempty"`
}

// Access defines model for Access.
type Access struct {
	Roles        *[]string `json:"roles,omitempty"`
	VerifyCaller *bool     `json:"verify_caller,omitempty"`
}

// AccessToken defines model for AccessToken.
type AccessToken struct {
	Acr                 *string                 `json:"acr,omitempty"`
	Address             *AddressClaimSet        `json:"address,omitempty"`
	AllowedOrigins      *[]string               `json:"allowed-origins,omitempty"`
	AtHash              *string                 `json:"at_hash,omitempty"`
	AuthTime            *int64                  `json:"auth_time,omitempty"`
	Authorization       *Authorization          `json:"authorization,omitempty"`
	Azp                 *string                 `json:"azp,omitempty"`
	Birthdate           *string                 `json:"birthdate,omitempty"`
	CHash               *string                 `json:"c_hash,omitempty"`
	ClaimsLocales       *string                 `json:"claims_locales,omitempty"`
	Cnf                 *Confirmation           `json:"cnf,omitempty"`
	Email               *string                 `json:"email,omitempty"`
	EmailVerified       *bool                   `json:"email_verified,omitempty"`
	Exp                 *int64                  `json:"exp,omitempty"`
	FamilyName          *string                 `json:"family_name,omitempty"`
	Gender              *string                 `json:"gender,omitempty"`
	GivenName           *string                 `json:"given_name,omitempty"`
	Iat                 *int64                  `json:"iat,omitempty"`
	Iss                 *string                 `json:"iss,omitempty"`
	Jti                 *string                 `json:"jti,omitempty"`
	Locale              *string                 `json:"locale,omitempty"`
	MiddleName          *string                 `json:"middle_name,omitempty"`
	Name                *string                 `json:"name,omitempty"`
	Nbf                 *int64                  `json:"nbf,omitempty"`
	Nickname            *string                 `json:"nickname,omitempty"`
	Nonce               *string                 `json:"nonce,omitempty"`
	OtherClaims         *map[string]interface{} `json:"otherClaims,omitempty"`
	PhoneNumber         *string                 `json:"phone_number,omitempty"`
	PhoneNumberVerified *bool                   `json:"phone_number_verified,omitempty"`
	Picture             *string                 `json:"picture,omitempty"`
	PreferredUsername   *string                 `json:"preferred_username,omitempty"`
	Profile             *string                 `json:"profile,omitempty"`
	RealmAccess         *Access                 `json:"realm_access,omitempty"`
	ResourceAccess      *map[string]Access      `json:"resource_access,omitempty"`
	SHash               *string                 `json:"s_hash,omitempty"`
	Scope               *string                 `json:"scope,omitempty"`
	Sid                 *string                 `json:"sid,omitempty"`
	Sub                 *string                 `json:"sub,omitempty"`
	TrustedCerts        *[]string               `json:"trusted-certs,omitempty"`
	Typ                 *string                 `json:"typ,omitempty"`
	UpdatedAt           *int64                  `json:"updated_at,omitempty"`
	Website             *string                 `json:"website,omitempty"`
	Zoneinfo            *string                 `json:"zoneinfo,omitempty"`
}

// AddressClaimSet defines model for AddressClaimSet.
type AddressClaimSet struct {
	Country       *string `json:"country,omitempty"`
	Formatted     *string `json:"formatted,omitempty"`
	Locality      *string `json:"locality,omitempty"`
	PostalCode    *string `json:"postal_code,omitempty"`
	Region        *string `json:"region,omitempty"`
	StreetAddress *string `json:"street_address,omitempty"`
}

// AdminEventRepresentation defines model for AdminEventRepresentation.
type AdminEventRepresentation struct {
	AuthDetails    *AuthDetailsRepresentation `json:"authDetails,omitempty"`
	Error          *string                    `json:"error,omitempty"`
	OperationType  *string                    `json:"operationType,omitempty"`
	RealmId        *string                    `json:"realmId,omitempty"`
	Representation *string                    `json:"representation,omitempty"`
	ResourcePath   *string                    `json:"resourcePath,omitempty"`
	ResourceType   *string                    `json:"resourceType,omitempty"`
	Time           *int64                     `json:"time,omitempty"`
}

// ApplicationRepresentation defines model for ApplicationRepresentation.
type ApplicationRepresentation struct {
	Access                             *map[string]bool              `json:"access,omitempty"`
	AdminUrl                           *string                       `json:"adminUrl,omitempty"`
	AlwaysDisplayInConsole             *bool                         `json:"alwaysDisplayInConsole,omitempty"`
	Attributes                         *map[string]string            `json:"attributes,omitempty"`
	AuthenticationFlowBindingOverrides *map[string]string            `json:"authenticationFlowBindingOverrides,omitempty"`
	AuthorizationServicesEnabled       *bool                         `json:"authorizationServicesEnabled,omitempty"`
	AuthorizationSettings              *ResourceServerRepresentation `json:"authorizationSettings,omitempty"`
	BaseUrl                            *string                       `json:"baseUrl,omitempty"`
	BearerOnly                         *bool                         `json:"bearerOnly,omitempty"`
	// Deprecated:
	Claims                  *ClaimRepresentation `json:"claims,omitempty"`
	ClientAuthenticatorType *string              `json:"clientAuthenticatorType,omitempty"`
	ClientId                *string              `json:"clientId,omitempty"`
	// Deprecated:
	ClientTemplate      *string   `json:"clientTemplate,omitempty"`
	ConsentRequired     *bool     `json:"consentRequired,omitempty"`
	DefaultClientScopes *[]string `json:"defaultClientScopes,omitempty"`
	// Deprecated:
	DefaultRoles              *[]string `json:"defaultRoles,omitempty"`
	Description               *string   `json:"description,omitempty"`
	DirectAccessGrantsEnabled *bool     `json:"directAccessGrantsEnabled,omitempty"`
	// Deprecated:
	DirectGrantsOnly          *bool                           `json:"directGrantsOnly,omitempty"`
	Enabled                   *bool                           `json:"enabled,omitempty"`
	FrontchannelLogout        *bool                           `json:"frontchannelLogout,omitempty"`
	FullScopeAllowed          *bool                           `json:"fullScopeAllowed,omitempty"`
	Id                        *string                         `json:"id,omitempty"`
	ImplicitFlowEnabled       *bool                           `json:"implicitFlowEnabled,omitempty"`
	Name                      *string                         `json:"name,omitempty"`
	NodeReRegistrationTimeout *int32                          `json:"nodeReRegistrationTimeout,omitempty"`
	NotBefore                 *int32                          `json:"notBefore,omitempty"`
	OptionalClientScopes      *[]string                       `json:"optionalClientScopes,omitempty"`
	Origin                    *string                         `json:"origin,omitempty"`
	Protocol                  *string                         `json:"protocol,omitempty"`
	ProtocolMappers           *[]ProtocolMapperRepresentation `json:"protocolMappers,omitempty"`
	PublicClient              *bool                           `json:"publicClient,omitempty"`
	RedirectUris              *[]string                       `json:"redirectUris,omitempty"`
	RegisteredNodes           *map[string]int32               `json:"registeredNodes,omitempty"`
	RegistrationAccessToken   *string                         `json:"registrationAccessToken,omitempty"`
	RootUrl                   *string                         `json:"rootUrl,omitempty"`
	Secret                    *string                         `json:"secret,omitempty"`
	ServiceAccountsEnabled    *bool                           `json:"serviceAccountsEnabled,omitempty"`
	StandardFlowEnabled       *bool                           `json:"standardFlowEnabled,omitempty"`
	SurrogateAuthRequired     *bool                           `json:"surrogateAuthRequired,omitempty"`
	Type                      *string                         `json:"type,omitempty"`
	// Deprecated:
	UseTemplateConfig *bool `json:"useTemplateConfig,omitempty"`
	// Deprecated:
	UseTemplateMappers *bool `json:"useTemplateMappers,omitempty"`
	// Deprecated:
	UseTemplateScope *bool     `json:"useTemplateScope,omitempty"`
	WebOrigins       *[]string `json:"webOrigins,omitempty"`
}

// AuthDetailsRepresentation defines model for AuthDetailsRepresentation.
type AuthDetailsRepresentation struct {
	ClientId  *string `json:"clientId,omitempty"`
	IpAddress *string `json:"ipAddress,omitempty"`
	RealmId   *string `json:"realmId,omitempty"`
	UserId    *string `json:"userId,omitempty"`
}

// AuthenticationExecutionExportRepresentation defines model for AuthenticationExecutionExportRepresentation.
type AuthenticationExecutionExportRepresentation struct {
	Authenticator       *string `json:"authenticator,omitempty"`
	AuthenticatorConfig *string `json:"authenticatorConfig,omitempty"`
	AuthenticatorFlow   *bool   `json:"authenticatorFlow,omitempty"`
	// Deprecated:
	AutheticatorFlow *bool   `json:"autheticatorFlow,omitempty"`
	FlowAlias        *string `json:"flowAlias,omitempty"`
	Priority         *int32  `json:"priority,omitempty"`
	Requirement      *string `json:"requirement,omitempty"`
	UserSetupAllowed *bool   `json:"userSetupAllowed,omitempty"`
}

// AuthenticationExecutionInfoRepresentation defines model for AuthenticationExecutionInfoRepresentation.
type AuthenticationExecutionInfoRepresentation struct {
	Alias                *string   `json:"alias,omitempty"`
	AuthenticationConfig *string   `json:"authenticationConfig,omitempty"`
	AuthenticationFlow   *bool     `json:"authenticationFlow,omitempty"`
	Configurable         *bool     `json:"configurable,omitempty"`
	Description          *string   `json:"description,omitempty"`
	DisplayName          *string   `json:"displayName,omitempty"`
	FlowId               *string   `json:"flowId,omitempty"`
	Id                   *string   `json:"id,omitempty"`
	Index                *int32    `json:"index,omitempty"`
	Level                *int32    `json:"level,omitempty"`
	Priority             *int32    `json:"priority,omitempty"`
	ProviderId           *string   `json:"providerId,omitempty"`
	Requirement          *string   `json:"requirement,omitempty"`
	RequirementChoices   *[]string `json:"requirementChoices,omitempty"`
}

// AuthenticationExecutionRepresentation defines model for AuthenticationExecutionRepresentation.
type AuthenticationExecutionRepresentation struct {
	Authenticator       *string `json:"authenticator,omitempty"`
	AuthenticatorConfig *string `json:"authenticatorConfig,omitempty"`
	AuthenticatorFlow   *bool   `json:"authenticatorFlow,omitempty"`
	// Deprecated:
	AutheticatorFlow *bool   `json:"autheticatorFlow,omitempty"`
	FlowId           *string `json:"flowId,omitempty"`
	Id               *string `json:"id,omitempty"`
	ParentFlow       *string `json:"parentFlow,omitempty"`
	Priority         *int32  `json:"priority,omitempty"`
	Requirement      *string `json:"requirement,omitempty"`
}

// AuthenticationFlowRepresentation defines model for AuthenticationFlowRepresentation.
type AuthenticationFlowRepresentation struct {
	Alias                    *string                                        `json:"alias,omitempty"`
	AuthenticationExecutions *[]AuthenticationExecutionExportRepresentation `json:"authenticationExecutions,omitempty"`
	BuiltIn                  *bool                                          `json:"builtIn,omitempty"`
	Description              *string                                        `json:"description,omitempty"`
	Id                       *string                                        `json:"id,omitempty"`
	ProviderId               *string                                        `json:"providerId,omitempty"`
	TopLevel                 *bool                                          `json:"topLevel,omitempty"`
}

// AuthenticatorConfigInfoRepresentation defines model for AuthenticatorConfigInfoRepresentation.
type AuthenticatorConfigInfoRepresentation struct {
	HelpText   *string                         `json:"helpText,omitempty"`
	Name       *string                         `json:"name,omitempty"`
	Properties *[]ConfigPropertyRepresentation `json:"properties,omitempty"`
	ProviderId *string                         `json:"providerId,omitempty"`
}

// AuthenticatorConfigRepresentation defines model for AuthenticatorConfigRepresentation.
type AuthenticatorConfigRepresentation struct {
	Alias  *string            `json:"alias,omitempty"`
	Config *map[string]string `json:"config,omitempty"`
	Id     *string            `json:"id,omitempty"`
}

// Authorization defines model for Authorization.
type Authorization struct {
	Permissions *[]Permission `json:"permissions,omitempty"`
}

// BruteForceStrategy defines model for BruteForceStrategy.
type BruteForceStrategy string

// CertificateRepresentation defines model for CertificateRepresentation.
type CertificateRepresentation struct {
	Certificate *string `json:"certificate,omitempty"`
	Kid         *string `json:"kid,omitempty"`
	PrivateKey  *string `json:"privateKey,omitempty"`
	PublicKey   *string `json:"publicKey,omitempty"`
}

// ClaimRepresentation defines model for ClaimRepresentation.
type ClaimRepresentation struct {
	Address  *bool `json:"address,omitempty"`
	Email    *bool `json:"email,omitempty"`
	Gender   *bool `json:"gender,omitempty"`
	Locale   *bool `json:"locale,omitempty"`
	Name     *bool `json:"name,omitempty"`
	Phone    *bool `json:"phone,omitempty"`
	Picture  *bool `json:"picture,omitempty"`
	Profile  *bool `json:"profile,omitempty"`
	Username *bool `json:"username,omitempty"`
	Website  *bool `json:"website,omitempty"`
}

// ClientInitialAccessCreatePresentation defines model for ClientInitialAccessCreatePresentation.
type ClientInitialAccessCreatePresentation struct {
	Count      *int32 `json:"count,omitempty"`
	Expiration *int32 `json:"expiration,omitempty"`
}

// ClientInitialAccessPresentation defines model for ClientInitialAccessPresentation.
type ClientInitialAccessPresentation struct {
	Count          *int32  `json:"count,omitempty"`
	Expiration     *int32  `json:"expiration,omitempty"`
	Id             *string `json:"id,omitempty"`
	RemainingCount *int32  `json:"remainingCount,omitempty"`
	Timestamp      *int32  `json:"timestamp,omitempty"`
	Token          *string `json:"token,omitempty"`
}

// ClientMappingsRepresentation defines model for ClientMappingsRepresentation.
type ClientMappingsRepresentation struct {
	Client   *string               `json:"client,omitempty"`
	Id       *string               `json:"id,omitempty"`
	Mappings *[]RoleRepresentation `json:"mappings,omitempty"`
}

// ClientPoliciesRepresentation defines model for ClientPoliciesRepresentation.
type ClientPoliciesRepresentation struct {
	GlobalPolicies *[]ClientPolicyRepresentation `json:"globalPolicies,omitempty"`
	Policies       *[]ClientPolicyRepresentation `json:"policies,omitempty"`
}

// ClientPolicyConditionRepresentation defines model for ClientPolicyConditionRepresentation.
type ClientPolicyConditionRepresentation struct {
	Condition     *string        `json:"condition,omitempty"`
	Configuration *[]interface{} `json:"configuration,omitempty"`
}

// ClientPolicyExecutorRepresentation defines model for ClientPolicyExecutorRepresentation.
type ClientPolicyExecutorRepresentation struct {
	Configuration *[]interface{} `json:"configuration,omitempty"`
	Executor      *string        `json:"executor,omitempty"`
}

// ClientPolicyRepresentation defines model for ClientPolicyRepresentation.
type ClientPolicyRepresentation struct {
	Conditions  *[]ClientPolicyConditionRepresentation `json:"conditions,omitempty"`
	Description *string                                `json:"description,omitempty"`
	Enabled     *bool                                  `json:"enabled,omitempty"`
	Name        *string                                `json:"name,omitempty"`
	Profiles    *[]string                              `json:"profiles,omitempty"`
}

// ClientProfileRepresentation defines model for ClientProfileRepresentation.
type ClientProfileRepresentation struct {
	Description *string                               `json:"description,omitempty"`
	Executors   *[]ClientPolicyExecutorRepresentation `json:"executors,omitempty"`
	Name        *string                               `json:"name,omitempty"`
}

// ClientProfilesRepresentation defines model for ClientProfilesRepresentation.
type ClientProfilesRepresentation struct {
	GlobalProfiles *[]ClientProfileRepresentation `json:"globalProfiles,omitempty"`
	Profiles       *[]ClientProfileRepresentation `json:"profiles,omitempty"`
}

// ClientRepresentation defines model for ClientRepresentation.
type ClientRepresentation struct {
	Access                             *map[string]bool              `json:"access,omitempty"`
	AdminUrl                           *string                       `json:"adminUrl,omitempty"`
	AlwaysDisplayInConsole             *bool                         `json:"alwaysDisplayInConsole,omitempty"`
	Attributes                         *map[string]string            `json:"attributes,omitempty"`
	AuthenticationFlowBindingOverrides *map[string]string            `json:"authenticationFlowBindingOverrides,omitempty"`
	AuthorizationServicesEnabled       *bool                         `json:"authorizationServicesEnabled,omitempty"`
	AuthorizationSettings              *ResourceServerRepresentation `json:"authorizationSettings,omitempty"`
	BaseUrl                            *string                       `json:"baseUrl,omitempty"`
	BearerOnly                         *bool                         `json:"bearerOnly,omitempty"`
	ClientAuthenticatorType            *string                       `json:"clientAuthenticatorType,omitempty"`
	ClientId                           *string                       `json:"clientId,omitempty"`
	// Deprecated:
	ClientTemplate      *string   `json:"clientTemplate,omitempty"`
	ConsentRequired     *bool     `json:"consentRequired,omitempty"`
	DefaultClientScopes *[]string `json:"defaultClientScopes,omitempty"`
	// Deprecated:
	DefaultRoles              *[]string `json:"defaultRoles,omitempty"`
	Description               *string   `json:"description,omitempty"`
	DirectAccessGrantsEnabled *bool     `json:"directAccessGrantsEnabled,omitempty"`
	// Deprecated:
	DirectGrantsOnly          *bool                           `json:"directGrantsOnly,omitempty"`
	Enabled                   *bool                           `json:"enabled,omitempty"`
	FrontchannelLogout        *bool                           `json:"frontchannelLogout,omitempty"`
	FullScopeAllowed          *bool                           `json:"fullScopeAllowed,omitempty"`
	Id                        *string                         `json:"id,omitempty"`
	ImplicitFlowEnabled       *bool                           `json:"implicitFlowEnabled,omitempty"`
	Name                      *string                         `json:"name,omitempty"`
	NodeReRegistrationTimeout *int32                          `json:"nodeReRegistrationTimeout,omitempty"`
	NotBefore                 *int32                          `json:"notBefore,omitempty"`
	OptionalClientScopes      *[]string                       `json:"optionalClientScopes,omitempty"`
	Origin                    *string                         `json:"origin,omitempty"`
	Protocol                  *string                         `json:"protocol,omitempty"`
	ProtocolMappers           *[]ProtocolMapperRepresentation `json:"protocolMappers,omitempty"`
	PublicClient              *bool                           `json:"publicClient,omitempty"`
	RedirectUris              *[]string                       `json:"redirectUris,omitempty"`
	RegisteredNodes           *map[string]int32               `json:"registeredNodes,omitempty"`
	RegistrationAccessToken   *string                         `json:"registrationAccessToken,omitempty"`
	RootUrl                   *string                         `json:"rootUrl,omitempty"`
	Secret                    *string                         `json:"secret,omitempty"`
	ServiceAccountsEnabled    *bool                           `json:"serviceAccountsEnabled,omitempty"`
	StandardFlowEnabled       *bool                           `json:"standardFlowEnabled,omitempty"`
	SurrogateAuthRequired     *bool                           `json:"surrogateAuthRequired,omitempty"`
	Type                      *string                         `json:"type,omitempty"`
	// Deprecated:
	UseTemplateConfig *bool `json:"useTemplateConfig,omitempty"`
	// Deprecated:
	UseTemplateMappers *bool `json:"useTemplateMappers,omitempty"`
	// Deprecated:
	UseTemplateScope *bool     `json:"useTemplateScope,omitempty"`
	WebOrigins       *[]string `json:"webOrigins,omitempty"`
}

// ClientScopeRepresentation defines model for ClientScopeRepresentation.
type ClientScopeRepresentation struct {
	Attributes      *map[string]string              `json:"attributes,omitempty"`
	Description     *string                         `json:"description,omitempty"`
	Id              *string                         `json:"id,omitempty"`
	Name            *string                         `json:"name,omitempty"`
	Protocol        *string                         `json:"protocol,omitempty"`
	ProtocolMappers *[]ProtocolMapperRepresentation `json:"protocolMappers,omitempty"`
}

// ClientTemplateRepresentation defines model for ClientTemplateRepresentation.
type ClientTemplateRepresentation struct {
	Attributes                *map[string]string              `json:"attributes,omitempty"`
	BearerOnly                *bool                           `json:"bearerOnly,omitempty"`
	ConsentRequired           *bool                           `json:"consentRequired,omitempty"`
	Description               *string                         `json:"description,omitempty"`
	DirectAccessGrantsEnabled *bool                           `json:"directAccessGrantsEnabled,omitempty"`
	FrontchannelLogout        *bool                           `json:"frontchannelLogout,omitempty"`
	FullScopeAllowed          *bool                           `json:"fullScopeAllowed,omitempty"`
	Id                        *string                         `json:"id,omitempty"`
	ImplicitFlowEnabled       *bool                           `json:"implicitFlowEnabled,omitempty"`
	Name                      *string                         `json:"name,omitempty"`
	Protocol                  *string                         `json:"protocol,omitempty"`
	ProtocolMappers           *[]ProtocolMapperRepresentation `json:"protocolMappers,omitempty"`
	PublicClient              *bool                           `json:"publicClient,omitempty"`
	ServiceAccountsEnabled    *bool                           `json:"serviceAccountsEnabled,omitempty"`
	StandardFlowEnabled       *bool                           `json:"standardFlowEnabled,omitempty"`
}

// ClientTypeRepresentation defines model for ClientTypeRepresentation.
type ClientTypeRepresentation struct {
	Config   *map[string]PropertyConfig `json:"config,omitempty"`
	Name     *string                    `json:"name,omitempty"`
	Parent   *string                    `json:"parent,omitempty"`
	Provider *string                    `json:"provider,omitempty"`
}

// ClientTypesRepresentation defines model for ClientTypesRepresentation.
type ClientTypesRepresentation struct {
	ClientTypes       *[]ClientTypeRepresentation `json:"client-types,omitempty"`
	GlobalClientTypes *[]ClientTypeRepresentation `json:"global-client-types,omitempty"`
}

// ComponentExportRepresentation defines model for ComponentExportRepresentation.
type ComponentExportRepresentation struct {
	Config        *MultivaluedHashMapStringString                        `json:"config,omitempty"`
	Id            *string                                                `json:"id,omitempty"`
	Name          *string                                                `json:"name,omitempty"`
	ProviderId    *string                                                `json:"providerId,omitempty"`
	SubComponents *MultivaluedHashMapStringComponentExportRepresentation `json:"subComponents,omitempty"`
	SubType       *string                                                `json:"subType,omitempty"`
}

// ComponentRepresentation defines model for ComponentRepresentation.
type ComponentRepresentation struct {
	Config       *MultivaluedHashMapStringString `json:"config,omitempty"`
	Id           *string                         `json:"id,omitempty"`
	Name         *string                         `json:"name,omitempty"`
	ParentId     *string                         `json:"parentId,omitempty"`
	ProviderId   *string                         `json:"providerId,omitempty"`
	ProviderType *string                         `json:"providerType,omitempty"`
	SubType      *string                         `json:"subType,omitempty"`
}

// ComponentTypeRepresentation defines model for ComponentTypeRepresentation.
type ComponentTypeRepresentation struct {
	HelpText   *string                         `json:"helpText,omitempty"`
	Id         *string                         `json:"id,omitempty"`
	Metadata   *map[string]interface{}         `json:"metadata,omitempty"`
	Properties *[]ConfigPropertyRepresentation `json:"properties,omitempty"`
}

// Composites defines model for Composites.
type Composites struct {
	// Deprecated:
	Application *map[string][]string `json:"application,omitempty"`
	Client      *map[string][]string `json:"client,omitempty"`
	Realm       *[]string            `json:"realm,omitempty"`
}

// ConfigPropertyRepresentation defines model for ConfigPropertyRepresentation.
type ConfigPropertyRepresentation struct {
	DefaultValue *interface{} `json:"defaultValue,omitempty"`
	HelpText     *string      `json:"helpText,omitempty"`
	Label        *string      `json:"label,omitempty"`
	Name         *string      `json:"name,omitempty"`
	Options      *[]string    `json:"options,omitempty"`
	ReadOnly     *bool        `json:"readOnly,omitempty"`
	Required     *bool        `json:"required,omitempty"`
	Secret       *bool        `json:"secret,omitempty"`
	Type         *string      `json:"type,omitempty"`
}

// Confirmation defines model for Confirmation.
type Confirmation struct {
	Jkt     *string `json:"jkt,omitempty"`
	X5tS256 *string `json:"x5t#S256,omitempty"`
}

// CredentialRepresentation defines model for CredentialRepresentation.
type CredentialRepresentation struct {
	// Deprecated:
	Algorithm *string `json:"algorithm,omitempty"`
	// Deprecated:
	Config *MultivaluedHashMapStringString `json:"config,omitempty"`
	// Deprecated:
	Counter        *int32  `json:"counter,omitempty"`
	CreatedDate    *int64  `json:"createdDate,omitempty"`
	CredentialData *string `json:"credentialData,omitempty"`
	// Deprecated:
	Device *string `json:"device,omitempty"`
	// Deprecated:
	Digits *int32 `json:"digits,omitempty"`
	// Deprecated:
	HashIterations *int32 `json:"hashIterations,omitempty"`
	// Deprecated:
	HashedSaltedValue *string `json:"hashedSaltedValue,omitempty"`
	Id                *string `json:"id,omitempty"`
	// Deprecated:
	Period   *int32 `json:"period,omitempty"`
	Priority *int32 `json:"priority,omitempty"`
	// Deprecated:
	Salt       *string `json:"salt,omitempty"`
	SecretData *string `json:"secretData,omitempty"`
	Temporary  *bool   `json:"temporary,omitempty"`
	Type       *string `json:"type,omitempty"`
	UserLabel  *string `json:"userLabel,omitempty"`
	Value      *string `json:"value,omitempty"`
}

// DecisionEffect defines model for DecisionEffect.
type DecisionEffect string

// DecisionStrategy defines model for DecisionStrategy.
type DecisionStrategy string

// EnforcementMode defines model for EnforcementMode.
type EnforcementMode string

// EvaluationResultRepresentation defines model for EvaluationResultRepresentation.
type EvaluationResultRepresentation struct {
	AllowedScopes *[]ScopeRepresentation        `json:"allowedScopes,omitempty"`
	Policies      *[]PolicyResultRepresentation `json:"policies,omitempty"`
	Resource      *ResourceRepresentation       `json:"resource,omitempty"`
	Scopes        *[]ScopeRepresentation        `json:"scopes,omitempty"`
	Status        *DecisionEffect               `json:"status,omitempty"`
}

// EventRepresentation defines model for EventRepresentation.
type EventRepresentation struct {
	ClientId  *string            `json:"clientId,omitempty"`
	Details   *map[string]string `json:"details,omitempty"`
	Error     *string            `json:"error,omitempty"`
	IpAddress *string            `json:"ipAddress,omitempty"`
	RealmId   *string            `json:"realmId,omitempty"`
	SessionId *string            `json:"sessionId,omitempty"`
	Time      *int64             `json:"time,omitempty"`
	Type      *string            `json:"type,omitempty"`
	UserId    *string            `json:"userId,omitempty"`
}

// FederatedIdentityRepresentation defines model for FederatedIdentityRepresentation.
type FederatedIdentityRepresentation struct {
	IdentityProvider *string `json:"identityProvider,omitempty"`
	UserId           *string `json:"userId,omitempty"`
	UserName         *string `json:"userName,omitempty"`
}

// GlobalRequestResult defines model for GlobalRequestResult.
type GlobalRequestResult struct {
	FailedRequests  *[]string `json:"failedRequests,omitempty"`
	SuccessRequests *[]string `json:"successRequests,omitempty"`
}

// GroupRepresentation defines model for GroupRepresentation.
type GroupRepresentation struct {
	Access        *map[string]bool       `json:"access,omitempty"`
	Attributes    *map[string][]string   `json:"attributes,omitempty"`
	ClientRoles   *map[string][]string   `json:"clientRoles,omitempty"`
	Id            *string                `json:"id,omitempty"`
	Name          *string                `json:"name,omitempty"`
	ParentId      *string                `json:"parentId,omitempty"`
	Path          *string                `json:"path,omitempty"`
	RealmRoles    *[]string              `json:"realmRoles,omitempty"`
	SubGroupCount *int64                 `json:"subGroupCount,omitempty"`
	SubGroups     *[]GroupRepresentation `json:"subGroups,omitempty"`
}

// IDToken defines model for IDToken.
type IDToken struct {
	Acr                 *string                 `json:"acr,omitempty"`
	Address             *AddressClaimSet        `json:"address,omitempty"`
	AtHash              *string                 `json:"at_hash,omitempty"`
	AuthTime            *int64                  `json:"auth_time,omitempty"`
	Azp                 *string                 `json:"azp,omitempty"`
	Birthdate           *string                 `json:"birthdate,omitempty"`
	CHash               *string                 `json:"c_hash,omitempty"`
	ClaimsLocales       *string                 `json:"claims_locales,omitempty"`
	Email               *string                 `json:"email,omitempty"`
	EmailVerified       *bool                   `json:"email_verified,omitempty"`
	Exp                 *int64                  `json:"exp,omitempty"`
	FamilyName          *string                 `json:"family_name,omitempty"`
	Gender              *string                 `json:"gender,omitempty"`
	GivenName           *string                 `json:"given_name,omitempty"`
	Iat                 *int64                  `json:"iat,omitempty"`
	Iss                 *string                 `json:"iss,omitempty"`
	Jti                 *string                 `json:"jti,omitempty"`
	Locale              *string                 `json:"locale,omitempty"`
	MiddleName          *string                 `json:"middle_name,omitempty"`
	Name                *string                 `json:"name,omitempty"`
	Nbf                 *int64                  `json:"nbf,omitempty"`
	Nickname            *string                 `json:"nickname,omitempty"`
	Nonce               *string                 `json:"nonce,omitempty"`
	OtherClaims         *map[string]interface{} `json:"otherClaims,omitempty"`
	PhoneNumber         *string                 `json:"phone_number,omitempty"`
	PhoneNumberVerified *bool                   `json:"phone_number_verified,omitempty"`
	Picture             *string                 `json:"picture,omitempty"`
	PreferredUsername   *string                 `json:"preferred_username,omitempty"`
	Profile             *string                 `json:"profile,omitempty"`
	SHash               *string                 `json:"s_hash,omitempty"`
	Sid                 *string                 `json:"sid,omitempty"`
	Sub                 *string                 `json:"sub,omitempty"`
	Typ                 *string                 `json:"typ,omitempty"`
	UpdatedAt           *int64                  `json:"updated_at,omitempty"`
	Website             *string                 `json:"website,omitempty"`
	Zoneinfo            *string                 `json:"zoneinfo,omitempty"`
}

// IdentityProviderMapperRepresentation defines model for IdentityProviderMapperRepresentation.
type IdentityProviderMapperRepresentation struct {
	Config                 *map[string]string `json:"config,omitempty"`
	Id                     *string            `json:"id,omitempty"`
	IdentityProviderAlias  *string            `json:"identityProviderAlias,omitempty"`
	IdentityProviderMapper *string            `json:"identityProviderMapper,omitempty"`
	Name                   *string            `json:"name,omitempty"`
}

// IdentityProviderMapperTypeRepresentation defines model for IdentityProviderMapperTypeRepresentation.
type IdentityProviderMapperTypeRepresentation struct {
	Category   *string                         `json:"category,omitempty"`
	HelpText   *string                         `json:"helpText,omitempty"`
	Id         *string                         `json:"id,omitempty"`
	Name       *string                         `json:"name,omitempty"`
	Properties *[]ConfigPropertyRepresentation `json:"properties,omitempty"`
}

// IdentityProviderRepresentation defines model for IdentityProviderRepresentation.
type IdentityProviderRepresentation struct {
	AddReadTokenRoleOnCreate  *bool              `json:"addReadTokenRoleOnCreate,omitempty"`
	Alias                     *string            `json:"alias,omitempty"`
	AuthenticateByDefault     *bool              `json:"authenticateByDefault,omitempty"`
	Config                    *map[string]string `json:"config,omitempty"`
	DisplayName               *string            `json:"displayName,omitempty"`
	Enabled                   *bool              `json:"enabled,omitempty"`
	FirstBrokerLoginFlowAlias *string            `json:"firstBrokerLoginFlowAlias,omitempty"`
	HideOnLogin               *bool              `json:"hideOnLogin,omitempty"`
	InternalId                *string            `json:"internalId,omitempty"`
	LinkOnly                  *bool              `json:"linkOnly,omitempty"`
	OrganizationId            *string            `json:"organizationId,omitempty"`
	PostBrokerLoginFlowAlias  *string            `json:"postBrokerLoginFlowAlias,omitempty"`
	ProviderId                *string            `json:"providerId,omitempty"`
	StoreToken                *bool              `json:"storeToken,omitempty"`
	TrustEmail                *bool              `json:"trustEmail,omitempty"`
	// Deprecated:
	UpdateProfileFirstLogin *bool `json:"updateProfileFirstLogin,omitempty"`
	// Deprecated:
	UpdateProfileFirstLoginMode *string `json:"updateProfileFirstLoginMode,omitempty"`
}

// InstallationAdapterConfig defines model for InstallationAdapterConfig.
type InstallationAdapterConfig struct {
	AuthServerUrl           *string                 `json:"auth-server-url,omitempty"`
	BearerOnly              *bool                   `json:"bearer-only,omitempty"`
	ConfidentialPort        *int32                  `json:"confidential-port,omitempty"`
	Credentials             *map[string]interface{} `json:"credentials,omitempty"`
	PolicyEnforcer          *PolicyEnforcerConfig   `json:"policy-enforcer,omitempty"`
	PublicClient            *bool                   `json:"public-client,omitempty"`
	Realm                   *string                 `json:"realm,omitempty"`
	RealmPublicKey          *string                 `json:"realm-public-key,omitempty"`
	Resource                *string                 `json:"resource,omitempty"`
	SslRequired             *string                 `json:"ssl-required,omitempty"`
	UseResourceRoleMappings *bool                   `json:"use-resource-role-mappings,omitempty"`
	VerifyTokenAudience     *bool                   `json:"verify-token-audience,omitempty"`
}

// KeyMetadataRepresentation defines model for KeyMetadataRepresentation.
type KeyMetadataRepresentation struct {
	Algorithm        *string `json:"algorithm,omitempty"`
	Certificate      *string `json:"certificate,omitempty"`
	Kid              *string `json:"kid,omitempty"`
	ProviderId       *string `json:"providerId,omitempty"`
	ProviderPriority *int64  `json:"providerPriority,omitempty"`
	PublicKey        *string `json:"publicKey,omitempty"`
	Status           *string `json:"status,omitempty"`
	Type             *string `json:"type,omitempty"`
	Use              *KeyUse `json:"use,omitempty"`
	ValidTo          *int64  `json:"validTo,omitempty"`
}

// KeyStoreConfig defines model for KeyStoreConfig.
type KeyStoreConfig struct {
	Format           *string `json:"format,omitempty"`
	KeyAlias         *string `json:"keyAlias,omitempty"`
	KeyPassword      *string `json:"keyPassword,omitempty"`
	RealmAlias       *string `json:"realmAlias,omitempty"`
	RealmCertificate *bool   `json:"realmCertificate,omitempty"`
	StorePassword    *string `json:"storePassword,omitempty"`
}

// KeyUse defines model for KeyUse.
type KeyUse string

// KeysMetadataRepresentation defines model for KeysMetadataRepresentation.
type KeysMetadataRepresentation struct {
	Active *map[string]string           `json:"active,omitempty"`
	Keys   *[]KeyMetadataRepresentation `json:"keys,omitempty"`
}

// Logic defines model for Logic.
type Logic string

// ManagementPermissionReference defines model for ManagementPermissionReference.
type ManagementPermissionReference struct {
	Enabled          *bool              `json:"enabled,omitempty"`
	Resource         *string            `json:"resource,omitempty"`
	ScopePermissions *map[string]string `json:"scopePermissions,omitempty"`
}

// MappingsRepresentation defines model for MappingsRepresentation.
type MappingsRepresentation struct {
	ClientMappings *map[string]ClientMappingsRepresentation `json:"clientMappings,omitempty"`
	RealmMappings  *[]RoleRepresentation                    `json:"realmMappings,omitempty"`
}

// MemberRepresentation defines model for MemberRepresentation.
type MemberRepresentation struct {
	Access *map[string]bool `json:"access,omitempty"`
	// Deprecated:
	ApplicationRoles           *map[string][]string               `json:"applicationRoles,omitempty"`
	Attributes                 *map[string][]string               `json:"attributes,omitempty"`
	ClientConsents             *[]UserConsentRepresentation       `json:"clientConsents,omitempty"`
	ClientRoles                *map[string][]string               `json:"clientRoles,omitempty"`
	CreatedTimestamp           *int64                             `json:"createdTimestamp,omitempty"`
	Credentials                *[]CredentialRepresentation        `json:"credentials,omitempty"`
	DisableableCredentialTypes *[]string                          `json:"disableableCredentialTypes,omitempty"`
	Email                      *string                            `json:"email,omitempty"`
	EmailVerified              *bool                              `json:"emailVerified,omitempty"`
	Enabled                    *bool                              `json:"enabled,omitempty"`
	FederatedIdentities        *[]FederatedIdentityRepresentation `json:"federatedIdentities,omitempty"`
	FederationLink             *string                            `json:"federationLink,omitempty"`
	FirstName                  *string                            `json:"firstName,omitempty"`
	Groups                     *[]string                          `json:"groups,omitempty"`
	Id                         *string                            `json:"id,omitempty"`
	LastName                   *string                            `json:"lastName,omitempty"`
	MembershipType             *MembershipType                    `json:"membershipType,omitempty"`
	NotBefore                  *int32                             `json:"notBefore,omitempty"`
	Origin                     *string                            `json:"origin,omitempty"`
	RealmRoles                 *[]string                          `json:"realmRoles,omitempty"`
	RequiredActions            *[]string                          `json:"requiredActions,omitempty"`
	Self                       *string                            `json:"self,omitempty"`
	ServiceAccountClientId     *string                            `json:"serviceAccountClientId,omitempty"`
	// Deprecated:
	SocialLinks         *[]SocialLinkRepresentation `json:"socialLinks,omitempty"`
	Totp                *bool                       `json:"totp,omitempty"`
	UserProfileMetadata *UserProfileMetadata        `json:"userProfileMetadata,omitempty"`
	Username            *string                     `json:"username,omitempty"`
}

// MembershipType defines model for MembershipType.
type MembershipType string

// MethodConfig defines model for MethodConfig.
type MethodConfig struct {
	Method                *string               `json:"method,omitempty"`
	Scopes                *[]string             `json:"scopes,omitempty"`
	ScopesEnforcementMode *ScopeEnforcementMode `json:"scopes-enforcement-mode,omitempty"`
}

// MultivaluedHashMapStringComponentExportRepresentation defines model for MultivaluedHashMapStringComponentExportRepresentation.
type MultivaluedHashMapStringComponentExportRepresentation map[string][]ComponentExportRepresentation

// MultivaluedHashMapStringString defines model for MultivaluedHashMapStringString.
type MultivaluedHashMapStringString map[string][]string

// OAuthClientRepresentation defines model for OAuthClientRepresentation.
type OAuthClientRepresentation struct {
	Access                             *map[string]bool              `json:"access,omitempty"`
	AdminUrl                           *string                       `json:"adminUrl,omitempty"`
	AlwaysDisplayInConsole             *bool                         `json:"alwaysDisplayInConsole,omitempty"`
	Attributes                         *map[string]string            `json:"attributes,omitempty"`
	AuthenticationFlowBindingOverrides *map[string]string            `json:"authenticationFlowBindingOverrides,omitempty"`
	AuthorizationServicesEnabled       *bool                         `json:"authorizationServicesEnabled,omitempty"`
	AuthorizationSettings              *ResourceServerRepresentation `json:"authorizationSettings,omitempty"`
	BaseUrl                            *string                       `json:"baseUrl,omitempty"`
	BearerOnly                         *bool                         `json:"bearerOnly,omitempty"`
	// Deprecated:
	Claims                  *ClaimRepresentation `json:"claims,omitempty"`
	ClientAuthenticatorType *string              `json:"clientAuthenticatorType,omitempty"`
	ClientId                *string              `json:"clientId,omitempty"`
	// Deprecated:
	ClientTemplate      *string   `json:"clientTemplate,omitempty"`
	ConsentRequired     *bool     `json:"consentRequired,omitempty"`
	DefaultClientScopes *[]string `json:"defaultClientScopes,omitempty"`
	// Deprecated:
	DefaultRoles              *[]string `json:"defaultRoles,omitempty"`
	Description               *string   `json:"description,omitempty"`
	DirectAccessGrantsEnabled *bool     `json:"directAccessGrantsEnabled,omitempty"`
	// Deprecated:
	DirectGrantsOnly          *bool                           `json:"directGrantsOnly,omitempty"`
	Enabled                   *bool                           `json:"enabled,omitempty"`
	FrontchannelLogout        *bool                           `json:"frontchannelLogout,omitempty"`
	FullScopeAllowed          *bool                           `json:"fullScopeAllowed,omitempty"`
	Id                        *string                         `json:"id,omitempty"`
	ImplicitFlowEnabled       *bool                           `json:"implicitFlowEnabled,omitempty"`
	Name                      *string                         `json:"name,omitempty"`
	NodeReRegistrationTimeout *int32                          `json:"nodeReRegistrationTimeout,omitempty"`
	NotBefore                 *int32                          `json:"notBefore,omitempty"`
	OptionalClientScopes      *[]string                       `json:"optionalClientScopes,omitempty"`
	Origin                    *string                         `json:"origin,omitempty"`
	Protocol                  *string                         `json:"protocol,omitempty"`
	ProtocolMappers           *[]ProtocolMapperRepresentation `json:"protocolMappers,omitempty"`
	PublicClient              *bool                           `json:"publicClient,omitempty"`
	RedirectUris              *[]string                       `json:"redirectUris,omitempty"`
	RegisteredNodes           *map[string]int32               `json:"registeredNodes,omitempty"`
	RegistrationAccessToken   *string                         `json:"registrationAccessToken,omitempty"`
	RootUrl                   *string                         `json:"rootUrl,omitempty"`
	Secret                    *string                         `json:"secret,omitempty"`
	ServiceAccountsEnabled    *bool                           `json:"serviceAccountsEnabled,omitempty"`
	StandardFlowEnabled       *bool                           `json:"standardFlowEnabled,omitempty"`
	SurrogateAuthRequired     *bool                           `json:"surrogateAuthRequired,omitempty"`
	Type                      *string                         `json:"type,omitempty"`
	// Deprecated:
	UseTemplateConfig *bool `json:"useTemplateConfig,omitempty"`
	// Deprecated:
	UseTemplateMappers *bool `json:"useTemplateMappers,omitempty"`
	// Deprecated:
	UseTemplateScope *bool     `json:"useTemplateScope,omitempty"`
	WebOrigins       *[]string `json:"webOrigins,omitempty"`
}

// OrganizationDomainRepresentation defines model for OrganizationDomainRepresentation.
type OrganizationDomainRepresentation struct {
	Name     *string `json:"name,omitempty"`
	Verified *bool   `json:"verified,omitempty"`
}

// OrganizationRepresentation defines model for OrganizationRepresentation.
type OrganizationRepresentation struct {
	Alias             *string                             `json:"alias,omitempty"`
	Attributes        *map[string][]string                `json:"attributes,omitempty"`
	Description       *string                             `json:"description,omitempty"`
	Domains           *[]OrganizationDomainRepresentation `json:"domains,omitempty"`
	Enabled           *bool                               `json:"enabled,omitempty"`
	Id                *string                             `json:"id,omitempty"`
	IdentityProviders *[]IdentityProviderRepresentation   `json:"identityProviders,omitempty"`
	Members           *[]MemberRepresentation             `json:"members,omitempty"`
	Name              *string                             `json:"name,omitempty"`
	RedirectUrl       *string                             `json:"redirectUrl,omitempty"`
}

// PathCacheConfig defines model for PathCacheConfig.
type PathCacheConfig struct {
	Lifespan   *int64 `json:"lifespan,omitempty"`
	MaxEntries *int32 `json:"max-entries,omitempty"`
}

// PathConfig defines model for PathConfig.
type PathConfig struct {
	ClaimInformationPoint *map[string]map[string]interface{} `json:"claim-information-point,omitempty"`
	EnforcementMode       *EnforcementMode                   `json:"enforcement-mode,omitempty"`
	Id                    *string                            `json:"id,omitempty"`
	Invalidated           *bool                              `json:"invalidated,omitempty"`
	Methods               *[]MethodConfig                    `json:"methods,omitempty"`
	Name                  *string                            `json:"name,omitempty"`
	Path                  *string                            `json:"path,omitempty"`
	Scopes                *[]string                          `json:"scopes,omitempty"`
	Static                *bool                              `json:"static,omitempty"`
	StaticPath            *bool                              `json:"staticPath,omitempty"`
	Type                  *string                            `json:"type,omitempty"`
}

// Permission defines model for Permission.
type Permission struct {
	Claims *map[string][]string `json:"claims,omitempty"`
	Rsid   *string              `json:"rsid,omitempty"`
	Rsname *string              `json:"rsname,omitempty"`
	Scopes *[]string            `json:"scopes,omitempty"`
}

// PolicyEnforcementMode defines model for PolicyEnforcementMode.
type PolicyEnforcementMode string

// PolicyEnforcerConfig defines model for PolicyEnforcerConfig.
type PolicyEnforcerConfig struct {
	AuthServerUrl         *string                            `json:"auth-server-url,omitempty"`
	ClaimInformationPoint *map[string]map[string]interface{} `json:"claim-information-point,omitempty"`
	Credentials           *map[string]interface{}            `json:"credentials,omitempty"`
	EnforcementMode       *EnforcementMode                   `json:"enforcement-mode,omitempty"`
	HttpMethodAsScope     *bool                              `json:"http-method-as-scope,omitempty"`
	LazyLoadPaths         *bool                              `json:"lazy-load-paths,omitempty"`
	OnDenyRedirectTo      *string                            `json:"on-deny-redirect-to,omitempty"`
	PathCache             *PathCacheConfig                   `json:"path-cache,omitempty"`
	Paths                 *[]PathConfig                      `json:"paths,omitempty"`
	Realm                 *string                            `json:"realm,omitempty"`
	Resource              *string                            `json:"resource,omitempty"`
	UserManagedAccess     *UserManagedAccessConfig           `json:"user-managed-access,omitempty"`
}

// PolicyEvaluationRequest defines model for PolicyEvaluationRequest.
type PolicyEvaluationRequest struct {
	ClientId     *string                       `json:"clientId,omitempty"`
	Context      *map[string]map[string]string `json:"context,omitempty"`
	Entitlements *bool                         `json:"entitlements,omitempty"`
	Resources    *[]ResourceRepresentation     `json:"resources,omitempty"`
	RoleIds      *[]string                     `json:"roleIds,omitempty"`
	UserId       *string                       `json:"userId,omitempty"`
}

// PolicyEvaluationResponse defines model for PolicyEvaluationResponse.
type PolicyEvaluationResponse struct {
	Entitlements *bool                             `json:"entitlements,omitempty"`
	Results      *[]EvaluationResultRepresentation `json:"results,omitempty"`
	Rpt          *AccessToken                      `json:"rpt,omitempty"`
	Status       *DecisionEffect                   `json:"status,omitempty"`
}

// PolicyProviderRepresentation defines model for PolicyProviderRepresentation.
type PolicyProviderRepresentation struct {
	Group *string `json:"group,omitempty"`
	Name  *string `json:"name,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// PolicyRepresentation defines model for PolicyRepresentation.
type PolicyRepresentation struct {
	Config           *map[string]string        `json:"config,omitempty"`
	DecisionStrategy *DecisionStrategy         `json:"decisionStrategy,omitempty"`
	Description      *string                   `json:"description,omitempty"`
	Id               *string                   `json:"id,omitempty"`
	Logic            *Logic                    `json:"logic,omitempty"`
	Name             *string                   `json:"name,omitempty"`
	Owner            *string                   `json:"owner,omitempty"`
	Policies         *[]string                 `json:"policies,omitempty"`
	Resources        *[]string                 `json:"resources,omitempty"`
	ResourcesData    *[]ResourceRepresentation `json:"resourcesData,omitempty"`
	Scopes           *[]string                 `json:"scopes,omitempty"`
	ScopesData       *[]ScopeRepresentation    `json:"scopesData,omitempty"`
	Type             *string                   `json:"type,omitempty"`
}

// PolicyResultRepresentation defines model for PolicyResultRepresentation.
type PolicyResultRepresentation struct {
	AssociatedPolicies *[]PolicyResultRepresentation `json:"associatedPolicies,omitempty"`
	Policy             *PolicyRepresentation         `json:"policy,omitempty"`
	Scopes             *[]string                     `json:"scopes,omitempty"`
	Status             *DecisionEffect               `json:"status,omitempty"`
}

// PropertyConfig defines model for PropertyConfig.
type PropertyConfig struct {
	Applicable *bool        `json:"applicable,omitempty"`
	Value      *interface{} `json:"value,omitempty"`
}

// ProtocolMapperEvaluationRepresentation defines model for ProtocolMapperEvaluationRepresentation.
type ProtocolMapperEvaluationRepresentation struct {
	ContainerId    *string `json:"containerId,omitempty"`
	ContainerName  *string `json:"containerName,omitempty"`
	ContainerType  *string `json:"containerType,omitempty"`
	MapperId       *string `json:"mapperId,omitempty"`
	MapperName     *string `json:"mapperName,omitempty"`
	ProtocolMapper *string `json:"protocolMapper,omitempty"`
}

// ProtocolMapperRepresentation defines model for ProtocolMapperRepresentation.
type ProtocolMapperRepresentation struct {
	Config *map[string]string `json:"config,omitempty"`
	// Deprecated:
	ConsentRequired *bool `json:"consentRequired,omitempty"`
	// Deprecated:
	ConsentText    *string `json:"consentText,omitempty"`
	Id             *string `json:"id,omitempty"`
	Name           *string `json:"name,omitempty"`
	Protocol       *string `json:"protocol,omitempty"`
	ProtocolMapper *string `json:"protocolMapper,omitempty"`
}

// PublishedRealmRepresentation defines model for PublishedRealmRepresentation.
type PublishedRealmRepresentation struct {
	AccountService  *string `json:"account-service,omitempty"`
	PublicKey       *string `json:"public_key,omitempty"`
	Realm           *string `json:"realm,omitempty"`
	TokenService    *string `json:"token-service,omitempty"`
	TokensNotBefore *int32  `json:"tokens-not-before,omitempty"`
}

// RealmEventsConfigRepresentation defines model for RealmEventsConfigRepresentation.
type RealmEventsConfigRepresentation struct {
	AdminEventsDetailsEnabled *bool     `json:"adminEventsDetailsEnabled,omitempty"`
	AdminEventsEnabled        *bool     `json:"adminEventsEnabled,omitempty"`
	EnabledEventTypes         *[]string `json:"enabledEventTypes,omitempty"`
	EventsEnabled             *bool     `json:"eventsEnabled,omitempty"`
	EventsExpiration          *int64    `json:"eventsExpiration,omitempty"`
	EventsListeners           *[]string `json:"eventsListeners,omitempty"`
}

// RealmRepresentation defines model for RealmRepresentation.
type RealmRepresentation struct {
	AccessCodeLifespan                  *int32  `json:"accessCodeLifespan,omitempty"`
	AccessCodeLifespanLogin             *int32  `json:"accessCodeLifespanLogin,omitempty"`
	AccessCodeLifespanUserAction        *int32  `json:"accessCodeLifespanUserAction,omitempty"`
	AccessTokenLifespan                 *int32  `json:"accessTokenLifespan,omitempty"`
	AccessTokenLifespanForImplicitFlow  *int32  `json:"accessTokenLifespanForImplicitFlow,omitempty"`
	AccountTheme                        *string `json:"accountTheme,omitempty"`
	ActionTokenGeneratedByAdminLifespan *int32  `json:"actionTokenGeneratedByAdminLifespan,omitempty"`
	ActionTokenGeneratedByUserLifespan  *int32  `json:"actionTokenGeneratedByUserLifespan,omitempty"`
	AdminEventsDetailsEnabled           *bool   `json:"adminEventsDetailsEnabled,omitempty"`
	AdminEventsEnabled                  *bool   `json:"adminEventsEnabled,omitempty"`
	AdminTheme                          *string `json:"adminTheme,omitempty"`
	// Deprecated:
	ApplicationScopeMappings *map[string][]ScopeMappingRepresentation `json:"applicationScopeMappings,omitempty"`
	// Deprecated:
	Applications           *[]ApplicationRepresentation         `json:"applications,omitempty"`
	Attributes             *map[string]string                   `json:"attributes,omitempty"`
	AuthenticationFlows    *[]AuthenticationFlowRepresentation  `json:"authenticationFlows,omitempty"`
	AuthenticatorConfig    *[]AuthenticatorConfigRepresentation `json:"authenticatorConfig,omitempty"`
	BrowserFlow            *string                              `json:"browserFlow,omitempty"`
	BrowserSecurityHeaders *map[string]string                   `json:"browserSecurityHeaders,omitempty"`
	BruteForceProtected    *bool                                `json:"bruteForceProtected,omitempty"`
	BruteForceStrategy     *BruteForceStrategy                  `json:"bruteForceStrategy,omitempty"`
	// Deprecated:
	Certificate                     *string                                  `json:"certificate,omitempty"`
	ClientAuthenticationFlow        *string                                  `json:"clientAuthenticationFlow,omitempty"`
	ClientOfflineSessionIdleTimeout *int32                                   `json:"clientOfflineSessionIdleTimeout,omitempty"`
	ClientOfflineSessionMaxLifespan *int32                                   `json:"clientOfflineSessionMaxLifespan,omitempty"`
	ClientPolicies                  *ClientPoliciesRepresentation            `json:"clientPolicies,omitempty"`
	ClientProfiles                  *ClientProfilesRepresentation            `json:"clientProfiles,omitempty"`
	ClientScopeMappings             *map[string][]ScopeMappingRepresentation `json:"clientScopeMappings,omitempty"`
	ClientScopes                    *[]ClientScopeRepresentation             `json:"clientScopes,omitempty"`
	ClientSessionIdleTimeout        *int32                                   `json:"clientSessionIdleTimeout,omitempty"`
	ClientSessionMaxLifespan        *int32                                   `json:"clientSessionMaxLifespan,omitempty"`
	// Deprecated:
	ClientTemplates *[]ClientTemplateRepresentation `json:"clientTemplates,omitempty"`
	Clients         *[]ClientRepresentation         `json:"clients,omitempty"`
	// Deprecated:
	CodeSecret                  *string                                                `json:"codeSecret,omitempty"`
	Components                  *MultivaluedHashMapStringComponentExportRepresentation `json:"components,omitempty"`
	DefaultDefaultClientScopes  *[]string                                              `json:"defaultDefaultClientScopes,omitempty"`
	DefaultGroups               *[]string                                              `json:"defaultGroups,omitempty"`
	DefaultLocale               *string                                                `json:"defaultLocale,omitempty"`
	DefaultOptionalClientScopes *[]string                                              `json:"defaultOptionalClientScopes,omitempty"`
	DefaultRole                 *RoleRepresentation                                    `json:"defaultRole,omitempty"`
	// Deprecated:
	DefaultRoles                 *[]string                               `json:"defaultRoles,omitempty"`
	DefaultSignatureAlgorithm    *string                                 `json:"defaultSignatureAlgorithm,omitempty"`
	DirectGrantFlow              *string                                 `json:"directGrantFlow,omitempty"`
	DisplayName                  *string                                 `json:"displayName,omitempty"`
	DisplayNameHtml              *string                                 `json:"displayNameHtml,omitempty"`
	DockerAuthenticationFlow     *string                                 `json:"dockerAuthenticationFlow,omitempty"`
	DuplicateEmailsAllowed       *bool                                   `json:"duplicateEmailsAllowed,omitempty"`
	EditUsernameAllowed          *bool                                   `json:"editUsernameAllowed,omitempty"`
	EmailTheme                   *string                                 `json:"emailTheme,omitempty"`
	Enabled                      *bool                                   `json:"enabled,omitempty"`
	EnabledEventTypes            *[]string                               `json:"enabledEventTypes,omitempty"`
	EventsEnabled                *bool                                   `json:"eventsEnabled,omitempty"`
	EventsExpiration             *int64                                  `json:"eventsExpiration,omitempty"`
	EventsListeners              *[]string                               `json:"eventsListeners,omitempty"`
	FailureFactor                *int32                                  `json:"failureFactor,omitempty"`
	FederatedUsers               *[]UserRepresentation                   `json:"federatedUsers,omitempty"`
	FirstBrokerLoginFlow         *string                                 `json:"firstBrokerLoginFlow,omitempty"`
	Groups                       *[]GroupRepresentation                  `json:"groups,omitempty"`
	Id                           *string                                 `json:"id,omitempty"`
	IdentityProviderMappers      *[]IdentityProviderMapperRepresentation `json:"identityProviderMappers,omitempty"`
	IdentityProviders            *[]IdentityProviderRepresentation       `json:"identityProviders,omitempty"`
	InternationalizationEnabled  *bool                                   `json:"internationalizationEnabled,omitempty"`
	KeycloakVersion              *string                                 `json:"keycloakVersion,omitempty"`
	LocalizationTexts            *map[string]map[string]string           `json:"localizationTexts,omitempty"`
	LoginTheme                   *string                                 `json:"loginTheme,omitempty"`
	LoginWithEmailAllowed        *bool                                   `json:"loginWithEmailAllowed,omitempty"`
	MaxDeltaTimeSeconds          *int32                                  `json:"maxDeltaTimeSeconds,omitempty"`
	MaxFailureWaitSeconds        *int32                                  `json:"maxFailureWaitSeconds,omitempty"`
	MaxTemporaryLockouts         *int32                                  `json:"maxTemporaryLockouts,omitempty"`
	MinimumQuickLoginWaitSeconds *int32                                  `json:"minimumQuickLoginWaitSeconds,omitempty"`
	NotBefore                    *int32                                  `json:"notBefore,omitempty"`
	OAuth2DeviceCodeLifespan     *int32                                  `json:"oAuth2DeviceCodeLifespan,omitempty"`
	OAuth2DevicePollingInterval  *int32                                  `json:"oAuth2DevicePollingInterval,omitempty"`
	Oauth2DeviceCodeLifespan     *int32                                  `json:"oauth2DeviceCodeLifespan,omitempty"`
	Oauth2DevicePollingInterval  *int32                                  `json:"oauth2DevicePollingInterval,omitempty"`
	// Deprecated:
	OauthClients                     *[]OAuthClientRepresentation  `json:"oauthClients,omitempty"`
	OfflineSessionIdleTimeout        *int32                        `json:"offlineSessionIdleTimeout,omitempty"`
	OfflineSessionMaxLifespan        *int32                        `json:"offlineSessionMaxLifespan,omitempty"`
	OfflineSessionMaxLifespanEnabled *bool                         `json:"offlineSessionMaxLifespanEnabled,omitempty"`
	Organizations                    *[]OrganizationRepresentation `json:"organizations,omitempty"`
	OrganizationsEnabled             *bool                         `json:"organizationsEnabled,omitempty"`
	OtpPolicyAlgorithm               *string                       `json:"otpPolicyAlgorithm,omitempty"`
	OtpPolicyCodeReusable            *bool                         `json:"otpPolicyCodeReusable,omitempty"`
	OtpPolicyDigits                  *int32                        `json:"otpPolicyDigits,omitempty"`
	OtpPolicyInitialCounter          *int32                        `json:"otpPolicyInitialCounter,omitempty"`
	OtpPolicyLookAheadWindow         *int32                        `json:"otpPolicyLookAheadWindow,omitempty"`
	OtpPolicyPeriod                  *int32                        `json:"otpPolicyPeriod,omitempty"`
	OtpPolicyType                    *string                       `json:"otpPolicyType,omitempty"`
	OtpSupportedApplications         *[]string                     `json:"otpSupportedApplications,omitempty"`
	// Deprecated:
	PasswordCredentialGrantAllowed *bool   `json:"passwordCredentialGrantAllowed,omitempty"`
	PasswordPolicy                 *string `json:"passwordPolicy,omitempty"`
	PermanentLockout               *bool   `json:"permanentLockout,omitempty"`
	// Deprecated:
	PrivateKey      *string                         `json:"privateKey,omitempty"`
	ProtocolMappers *[]ProtocolMapperRepresentation `json:"protocolMappers,omitempty"`
	// Deprecated:
	PublicKey                   *string `json:"publicKey,omitempty"`
	QuickLoginCheckMilliSeconds *int64  `json:"quickLoginCheckMilliSeconds,omitempty"`
	Realm                       *string `json:"realm,omitempty"`
	// Deprecated:
	RealmCacheEnabled           *bool                                   `json:"realmCacheEnabled,omitempty"`
	RefreshTokenMaxReuse        *int32                                  `json:"refreshTokenMaxReuse,omitempty"`
	RegistrationAllowed         *bool                                   `json:"registrationAllowed,omitempty"`
	RegistrationEmailAsUsername *bool                                   `json:"registrationEmailAsUsername,omitempty"`
	RegistrationFlow            *string                                 `json:"registrationFlow,omitempty"`
	RememberMe                  *bool                                   `json:"rememberMe,omitempty"`
	RequiredActions             *[]RequiredActionProviderRepresentation `json:"requiredActions,omitempty"`
	// Deprecated:
	RequiredCredentials  *[]string                     `json:"requiredCredentials,omitempty"`
	ResetCredentialsFlow *string                       `json:"resetCredentialsFlow,omitempty"`
	ResetPasswordAllowed *bool                         `json:"resetPasswordAllowed,omitempty"`
	RevokeRefreshToken   *bool                         `json:"revokeRefreshToken,omitempty"`
	Roles                *RolesRepresentation          `json:"roles,omitempty"`
	ScopeMappings        *[]ScopeMappingRepresentation `json:"scopeMappings,omitempty"`
	SmtpServer           *map[string]string            `json:"smtpServer,omitempty"`
	// Deprecated:
	Social *bool `json:"social,omitempty"`
	// Deprecated:
	SocialProviders                 *map[string]string `json:"socialProviders,omitempty"`
	SslRequired                     *string            `json:"sslRequired,omitempty"`
	SsoSessionIdleTimeout           *int32             `json:"ssoSessionIdleTimeout,omitempty"`
	SsoSessionIdleTimeoutRememberMe *int32             `json:"ssoSessionIdleTimeoutRememberMe,omitempty"`
	SsoSessionMaxLifespan           *int32             `json:"ssoSessionMaxLifespan,omitempty"`
	SsoSessionMaxLifespanRememberMe *int32             `json:"ssoSessionMaxLifespanRememberMe,omitempty"`
	SupportedLocales                *[]string          `json:"supportedLocales,omitempty"`
	// Deprecated:
	UpdateProfileOnInitialSocialLogin *bool `json:"updateProfileOnInitialSocialLogin,omitempty"`
	// Deprecated:
	UserCacheEnabled                                          *bool                                   `json:"userCacheEnabled,omitempty"`
	UserFederationMappers                                     *[]UserFederationMapperRepresentation   `json:"userFederationMappers,omitempty"`
	UserFederationProviders                                   *[]UserFederationProviderRepresentation `json:"userFederationProviders,omitempty"`
	UserManagedAccessAllowed                                  *bool                                   `json:"userManagedAccessAllowed,omitempty"`
	Users                                                     *[]UserRepresentation                   `json:"users,omitempty"`
	VerifyEmail                                               *bool                                   `json:"verifyEmail,omitempty"`
	WaitIncrementSeconds                                      *int32                                  `json:"waitIncrementSeconds,omitempty"`
	WebAuthnPolicyAcceptableAaguids                           *[]string                               `json:"webAuthnPolicyAcceptableAaguids,omitempty"`
	WebAuthnPolicyAttestationConveyancePreference             *string                                 `json:"webAuthnPolicyAttestationConveyancePreference,omitempty"`
	WebAuthnPolicyAuthenticatorAttachment                     *string                                 `json:"webAuthnPolicyAuthenticatorAttachment,omitempty"`
	WebAuthnPolicyAvoidSameAuthenticatorRegister              *bool                                   `json:"webAuthnPolicyAvoidSameAuthenticatorRegister,omitempty"`
	WebAuthnPolicyCreateTimeout                               *int32                                  `json:"webAuthnPolicyCreateTimeout,omitempty"`
	WebAuthnPolicyExtraOrigins                                *[]string                               `json:"webAuthnPolicyExtraOrigins,omitempty"`
	WebAuthnPolicyPasswordlessAcceptableAaguids               *[]string                               `json:"webAuthnPolicyPasswordlessAcceptableAaguids,omitempty"`
	WebAuthnPolicyPasswordlessAttestationConveyancePreference *string                                 `json:"webAuthnPolicyPasswordlessAttestationConveyancePreference,omitempty"`
	WebAuthnPolicyPasswordlessAuthenticatorAttachment         *string                                 `json:"webAuthnPolicyPasswordlessAuthenticatorAttachment,omitempty"`
	WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister  *bool                                   `json:"webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister,omitempty"`
	WebAuthnPolicyPasswordlessCreateTimeout                   *int32                                  `json:"webAuthnPolicyPasswordlessCreateTimeout,omitempty"`
	WebAuthnPolicyPasswordlessExtraOrigins                    *[]string                               `json:"webAuthnPolicyPasswordlessExtraOrigins,omitempty"`
	WebAuthnPolicyPasswordlessRequireResidentKey              *string                                 `json:"webAuthnPolicyPasswordlessRequireResidentKey,omitempty"`
	WebAuthnPolicyPasswordlessRpEntityName                    *string                                 `json:"webAuthnPolicyPasswordlessRpEntityName,omitempty"`
	WebAuthnPolicyPasswordlessRpId                            *string                                 `json:"webAuthnPolicyPasswordlessRpId,omitempty"`
	WebAuthnPolicyPasswordlessSignatureAlgorithms             *[]string                               `json:"webAuthnPolicyPasswordlessSignatureAlgorithms,omitempty"`
	WebAuthnPolicyPasswordlessUserVerificationRequirement     *string                                 `json:"webAuthnPolicyPasswordlessUserVerificationRequirement,omitempty"`
	WebAuthnPolicyRequireResidentKey                          *string                                 `json:"webAuthnPolicyRequireResidentKey,omitempty"`
	WebAuthnPolicyRpEntityName                                *string                                 `json:"webAuthnPolicyRpEntityName,omitempty"`
	WebAuthnPolicyRpId                                        *string                                 `json:"webAuthnPolicyRpId,omitempty"`
	WebAuthnPolicySignatureAlgorithms                         *[]string                               `json:"webAuthnPolicySignatureAlgorithms,omitempty"`
	WebAuthnPolicyUserVerificationRequirement                 *string                                 `json:"webAuthnPolicyUserVerificationRequirement,omitempty"`
}

// RequiredActionConfigInfoRepresentation defines model for RequiredActionConfigInfoRepresentation.
type RequiredActionConfigInfoRepresentation struct {
	Properties *[]ConfigPropertyRepresentation `json:"properties,omitempty"`
}

// RequiredActionConfigRepresentation defines model for RequiredActionConfigRepresentation.
type RequiredActionConfigRepresentation struct {
	Config *map[string]string `json:"config,omitempty"`
}

// RequiredActionProviderRepresentation defines model for RequiredActionProviderRepresentation.
type RequiredActionProviderRepresentation struct {
	Alias         *string            `json:"alias,omitempty"`
	Config        *map[string]string `json:"config,omitempty"`
	DefaultAction *bool              `json:"defaultAction,omitempty"`
	Enabled       *bool              `json:"enabled,omitempty"`
	Name          *string            `json:"name,omitempty"`
	Priority      *int32             `json:"priority,omitempty"`
	ProviderId    *string            `json:"providerId,omitempty"`
}

// ResourceOwnerRepresentation defines model for ResourceOwnerRepresentation.
type ResourceOwnerRepresentation struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// ResourceRepresentation defines model for ResourceRepresentation.
type ResourceRepresentation struct {
	Id                 *string                      `json:"_id,omitempty"`
	Attributes         *map[string][]string         `json:"attributes,omitempty"`
	DisplayName        *string                      `json:"displayName,omitempty"`
	IconUri            *string                      `json:"icon_uri,omitempty"`
	Name               *string                      `json:"name,omitempty"`
	Owner              *ResourceOwnerRepresentation `json:"owner,omitempty"`
	OwnerManagedAccess *bool                        `json:"ownerManagedAccess,omitempty"`
	Scopes             *[]ScopeRepresentation       `json:"scopes,omitempty"`
	ScopesUma          *[]ScopeRepresentation       `json:"scopesUma,omitempty"`
	Type               *string                      `json:"type,omitempty"`
	// Deprecated:
	Uri  *string   `json:"uri,omitempty"`
	Uris *[]string `json:"uris,omitempty"`
}

// ResourceServerRepresentation defines model for ResourceServerRepresentation.
type ResourceServerRepresentation struct {
	AllowRemoteResourceManagement *bool                     `json:"allowRemoteResourceManagement,omitempty"`
	ClientId                      *string                   `json:"clientId,omitempty"`
	DecisionStrategy              *DecisionStrategy         `json:"decisionStrategy,omitempty"`
	Id                            *string                   `json:"id,omitempty"`
	Name                          *string                   `json:"name,omitempty"`
	Policies                      *[]PolicyRepresentation   `json:"policies,omitempty"`
	PolicyEnforcementMode         *PolicyEnforcementMode    `json:"policyEnforcementMode,omitempty"`
	Resources                     *[]ResourceRepresentation `json:"resources,omitempty"`
	Scopes                        *[]ScopeRepresentation    `json:"scopes,omitempty"`
}

// RoleRepresentation defines model for RoleRepresentation.
type RoleRepresentation struct {
	Attributes  *map[string][]string `json:"attributes,omitempty"`
	ClientRole  *bool                `json:"clientRole,omitempty"`
	Composite   *bool                `json:"composite,omitempty"`
	Composites  *Composites          `json:"composites,omitempty"`
	ContainerId *string              `json:"containerId,omitempty"`
	Description *string              `json:"description,omitempty"`
	Id          *string              `json:"id,omitempty"`
	Name        *string              `json:"name,omitempty"`
	// Deprecated:
	ScopeParamRequired *bool `json:"scopeParamRequired,omitempty"`
}

// RolesRepresentation defines model for RolesRepresentation.
type RolesRepresentation struct {
	// Deprecated:
	Application *map[string][]RoleRepresentation `json:"application,omitempty"`
	Client      *map[string][]RoleRepresentation `json:"client,omitempty"`
	Realm       *[]RoleRepresentation            `json:"realm,omitempty"`
}

// ScopeEnforcementMode defines model for ScopeEnforcementMode.
type ScopeEnforcementMode string

// ScopeMappingRepresentation defines model for ScopeMappingRepresentation.
type ScopeMappingRepresentation struct {
	Client      *string `json:"client,omitempty"`
	ClientScope *string `json:"clientScope,omitempty"`
	// Deprecated:
	ClientTemplate *string   `json:"clientTemplate,omitempty"`
	Roles          *[]string `json:"roles,omitempty"`
	Self           *string   `json:"self,omitempty"`
}

// ScopeRepresentation defines model for ScopeRepresentation.
type ScopeRepresentation struct {
	DisplayName *string                   `json:"displayName,omitempty"`
	IconUri     *string                   `json:"iconUri,omitempty"`
	Id          *string                   `json:"id,omitempty"`
	Name        *string                   `json:"name,omitempty"`
	Policies    *[]PolicyRepresentation   `json:"policies,omitempty"`
	Resources   *[]ResourceRepresentation `json:"resources,omitempty"`
}

// SocialLinkRepresentation defines model for SocialLinkRepresentation.
type SocialLinkRepresentation struct {
	SocialProvider *string `json:"socialProvider,omitempty"`
	SocialUserId   *string `json:"socialUserId,omitempty"`
	SocialUsername *string `json:"socialUsername,omitempty"`
}

// UPAttribute defines model for UPAttribute.
type UPAttribute struct {
	Annotations *map[string]interface{}            `json:"annotations,omitempty"`
	DisplayName *string                            `json:"displayName,omitempty"`
	Group       *string                            `json:"group,omitempty"`
	Multivalued *bool                              `json:"multivalued,omitempty"`
	Name        *string                            `json:"name,omitempty"`
	Permissions *UPAttributePermissions            `json:"permissions,omitempty"`
	Required    *UPAttributeRequired               `json:"required,omitempty"`
	Selector    *UPAttributeSelector               `json:"selector,omitempty"`
	Validations *map[string]map[string]interface{} `json:"validations,omitempty"`
}

// UPAttributePermissions defines model for UPAttributePermissions.
type UPAttributePermissions struct {
	Edit *[]string `json:"edit,omitempty"`
	View *[]string `json:"view,omitempty"`
}

// UPAttributeRequired defines model for UPAttributeRequired.
type UPAttributeRequired struct {
	Roles  *[]string `json:"roles,omitempty"`
	Scopes *[]string `json:"scopes,omitempty"`
}

// UPAttributeSelector defines model for UPAttributeSelector.
type UPAttributeSelector struct {
	Scopes *[]string `json:"scopes,omitempty"`
}

// UPConfig defines model for UPConfig.
type UPConfig struct {
	Attributes               *[]UPAttribute            `json:"attributes,omitempty"`
	Groups                   *[]UPGroup                `json:"groups,omitempty"`
	UnmanagedAttributePolicy *UnmanagedAttributePolicy `json:"unmanagedAttributePolicy,omitempty"`
}

// UPGroup defines model for UPGroup.
type UPGroup struct {
	Annotations        *map[string]interface{} `json:"annotations,omitempty"`
	DisplayDescription *string                 `json:"displayDescription,omitempty"`
	DisplayHeader      *string                 `json:"displayHeader,omitempty"`
	Name               *string                 `json:"name,omitempty"`
}

// UnmanagedAttributePolicy defines model for UnmanagedAttributePolicy.
type UnmanagedAttributePolicy string

// UserConsentRepresentation defines model for UserConsentRepresentation.
type UserConsentRepresentation struct {
	ClientId            *string   `json:"clientId,omitempty"`
	CreatedDate         *int64    `json:"createdDate,omitempty"`
	GrantedClientScopes *[]string `json:"grantedClientScopes,omitempty"`
	// Deprecated:
	GrantedRealmRoles *[]string `json:"grantedRealmRoles,omitempty"`
	LastUpdatedDate   *int64    `json:"lastUpdatedDate,omitempty"`
}

// UserFederationMapperRepresentation defines model for UserFederationMapperRepresentation.
type UserFederationMapperRepresentation struct {
	Config                        *map[string]string `json:"config,omitempty"`
	FederationMapperType          *string            `json:"federationMapperType,omitempty"`
	FederationProviderDisplayName *string            `json:"federationProviderDisplayName,omitempty"`
	Id                            *string            `json:"id,omitempty"`
	Name                          *string            `json:"name,omitempty"`
}

// UserFederationProviderRepresentation defines model for UserFederationProviderRepresentation.
type UserFederationProviderRepresentation struct {
	ChangedSyncPeriod *int32             `json:"changedSyncPeriod,omitempty"`
	Config            *map[string]string `json:"config,omitempty"`
	DisplayName       *string            `json:"displayName,omitempty"`
	FullSyncPeriod    *int32             `json:"fullSyncPeriod,omitempty"`
	Id                *string            `json:"id,omitempty"`
	LastSync          *int32             `json:"lastSync,omitempty"`
	Priority          *int32             `json:"priority,omitempty"`
	ProviderName      *string            `json:"providerName,omitempty"`
}

// UserManagedAccessConfig defines model for UserManagedAccessConfig.
type UserManagedAccessConfig = map[string]interface{}

// UserProfileAttributeGroupMetadata defines model for UserProfileAttributeGroupMetadata.
type UserProfileAttributeGroupMetadata struct {
	Annotations        *map[string]interface{} `json:"annotations,omitempty"`
	DisplayDescription *string                 `json:"displayDescription,omitempty"`
	DisplayHeader      *string                 `json:"displayHeader,omitempty"`
	Name               *string                 `json:"name,omitempty"`
}

// UserProfileAttributeMetadata defines model for UserProfileAttributeMetadata.
type UserProfileAttributeMetadata struct {
	Annotations *map[string]interface{}            `json:"annotations,omitempty"`
	DisplayName *string                            `json:"displayName,omitempty"`
	Group       *string                            `json:"group,omitempty"`
	Multivalued *bool                              `json:"multivalued,omitempty"`
	Name        *string                            `json:"name,omitempty"`
	ReadOnly    *bool                              `json:"readOnly,omitempty"`
	Required    *bool                              `json:"required,omitempty"`
	Validators  *map[string]map[string]interface{} `json:"validators,omitempty"`
}

// UserProfileMetadata defines model for UserProfileMetadata.
type UserProfileMetadata struct {
	Attributes *[]UserProfileAttributeMetadata      `json:"attributes,omitempty"`
	Groups     *[]UserProfileAttributeGroupMetadata `json:"groups,omitempty"`
}

// UserRepresentation defines model for UserRepresentation.
type UserRepresentation struct {
	Access *map[string]bool `json:"access,omitempty"`
	// Deprecated:
	ApplicationRoles           *map[string][]string               `json:"applicationRoles,omitempty"`
	Attributes                 *map[string][]string               `json:"attributes,omitempty"`
	ClientConsents             *[]UserConsentRepresentation       `json:"clientConsents,omitempty"`
	ClientRoles                *map[string][]string               `json:"clientRoles,omitempty"`
	CreatedTimestamp           *int64                             `json:"createdTimestamp,omitempty"`
	Credentials                *[]CredentialRepresentation        `json:"credentials,omitempty"`
	DisableableCredentialTypes *[]string                          `json:"disableableCredentialTypes,omitempty"`
	Email                      *string                            `json:"email,omitempty"`
	EmailVerified              *bool                              `json:"emailVerified,omitempty"`
	Enabled                    *bool                              `json:"enabled,omitempty"`
	FederatedIdentities        *[]FederatedIdentityRepresentation `json:"federatedIdentities,omitempty"`
	FederationLink             *string                            `json:"federationLink,omitempty"`
	FirstName                  *string                            `json:"firstName,omitempty"`
	Groups                     *[]string                          `json:"groups,omitempty"`
	Id                         *string                            `json:"id,omitempty"`
	LastName                   *string                            `json:"lastName,omitempty"`
	NotBefore                  *int32                             `json:"notBefore,omitempty"`
	Origin                     *string                            `json:"origin,omitempty"`
	RealmRoles                 *[]string                          `json:"realmRoles,omitempty"`
	RequiredActions            *[]string                          `json:"requiredActions,omitempty"`
	Self                       *string                            `json:"self,omitempty"`
	ServiceAccountClientId     *string                            `json:"serviceAccountClientId,omitempty"`
	// Deprecated:
	SocialLinks         *[]SocialLinkRepresentation `json:"socialLinks,omitempty"`
	Totp                *bool                       `json:"totp,omitempty"`
	UserProfileMetadata *UserProfileMetadata        `json:"userProfileMetadata,omitempty"`
	Username            *string                     `json:"username,omitempty"`
}

// UserSessionRepresentation defines model for UserSessionRepresentation.
type UserSessionRepresentation struct {
	Clients       *map[string]string `json:"clients,omitempty"`
	Id            *string            `json:"id,omitempty"`
	IpAddress     *string            `json:"ipAddress,omitempty"`
	LastAccess    *int64             `json:"lastAccess,omitempty"`
	RememberMe    *bool              `json:"rememberMe,omitempty"`
	Start         *int64             `json:"start,omitempty"`
	TransientUser *bool              `json:"transientUser,omitempty"`
	UserId        *string            `json:"userId,omitempty"`
	Username      *string            `json:"username,omitempty"`
}

// GetAdminRealmsParams defines parameters for GetAdminRealms.
type GetAdminRealmsParams struct {
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// PostAdminRealmsJSONBody defines parameters for PostAdminRealms.
type PostAdminRealmsJSONBody = openapi_types.File

// GetAdminRealmsRealmAdminEventsParams defines parameters for GetAdminRealmsRealmAdminEvents.
type GetAdminRealmsRealmAdminEventsParams struct {
	AuthClient    *string `form:"authClient,omitempty" json:"authClient,omitempty"`
	AuthIpAddress *string `form:"authIpAddress,omitempty" json:"authIpAddress,omitempty"`
	AuthRealm     *string `form:"authRealm,omitempty" json:"authRealm,omitempty"`

	// AuthUser user id
	AuthUser *string `form:"authUser,omitempty" json:"authUser,omitempty"`
	DateFrom *string `form:"dateFrom,omitempty" json:"dateFrom,omitempty"`
	DateTo   *string `form:"dateTo,omitempty" json:"dateTo,omitempty"`
	First    *int32  `form:"first,omitempty" json:"first,omitempty"`

	// Max Maximum results size (defaults to 100)
	Max            *int32    `form:"max,omitempty" json:"max,omitempty"`
	OperationTypes *[]string `form:"operationTypes,omitempty" json:"operationTypes,omitempty"`
	ResourcePath   *string   `form:"resourcePath,omitempty" json:"resourcePath,omitempty"`
	ResourceTypes  *[]string `form:"resourceTypes,omitempty" json:"resourceTypes,omitempty"`
}

// PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyJSONBody defines parameters for PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopy.
type PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyJSONBody map[string]string

// PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONBody defines parameters for PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecution.
type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONBody map[string]interface{}

// PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONBody defines parameters for PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlow.
type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONBody map[string]interface{}

// PostAdminRealmsRealmAuthenticationRegisterRequiredActionJSONBody defines parameters for PostAdminRealmsRealmAuthenticationRegisterRequiredAction.
type PostAdminRealmsRealmAuthenticationRegisterRequiredActionJSONBody map[string]string

// PostAdminRealmsRealmClientDescriptionConverterJSONBody defines parameters for PostAdminRealmsRealmClientDescriptionConverter.
type PostAdminRealmsRealmClientDescriptionConverterJSONBody = string

// PostAdminRealmsRealmClientDescriptionConverterTextBody defines parameters for PostAdminRealmsRealmClientDescriptionConverter.
type PostAdminRealmsRealmClientDescriptionConverterTextBody = string

// GetAdminRealmsRealmClientPoliciesPoliciesParams defines parameters for GetAdminRealmsRealmClientPoliciesPolicies.
type GetAdminRealmsRealmClientPoliciesPoliciesParams struct {
	IncludeGlobalPolicies *bool `form:"include-global-policies,omitempty" json:"include-global-policies,omitempty"`
}

// GetAdminRealmsRealmClientPoliciesProfilesParams defines parameters for GetAdminRealmsRealmClientPoliciesProfiles.
type GetAdminRealmsRealmClientPoliciesProfilesParams struct {
	IncludeGlobalProfiles *bool `form:"include-global-profiles,omitempty" json:"include-global-profiles,omitempty"`
}

// PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsJSONBody defines parameters for PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModels.
type PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsJSONBody = []ProtocolMapperRepresentation

// DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONBody defines parameters for DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient.
type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONBody = []RoleRepresentation

// PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONBody defines parameters for PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient.
type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONBody = []RoleRepresentation

// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeParams defines parameters for GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientComposite.
type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONBody defines parameters for DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm.
type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONBody = []RoleRepresentation

// PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONBody defines parameters for PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm.
type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONBody = []RoleRepresentation

// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeParams defines parameters for GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmComposite.
type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsJSONBody defines parameters for PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModels.
type PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsJSONBody = []ProtocolMapperRepresentation

// DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONBody defines parameters for DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient.
type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONBody = []RoleRepresentation

// PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONBody defines parameters for PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient.
type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONBody = []RoleRepresentation

// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeParams defines parameters for GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientComposite.
type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONBody defines parameters for DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm.
type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONBody = []RoleRepresentation

// PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONBody defines parameters for PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm.
type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONBody = []RoleRepresentation

// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeParams defines parameters for GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmComposite.
type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// GetAdminRealmsRealmClientsParams defines parameters for GetAdminRealmsRealmClients.
type GetAdminRealmsRealmClientsParams struct {
	// ClientId filter by clientId
	ClientId *string `form:"clientId,omitempty" json:"clientId,omitempty"`

	// First the first result
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// Max the max results to return
	Max *int32  `form:"max,omitempty" json:"max,omitempty"`
	Q   *string `form:"q,omitempty" json:"q,omitempty"`

	// Search whether this is a search query or a getClientById query
	Search *bool `form:"search,omitempty" json:"search,omitempty"`

	// ViewableOnly filter clients that cannot be viewed in full by admin
	ViewableOnly *bool `form:"viewableOnly,omitempty" json:"viewableOnly,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams defines parameters for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission.
type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams struct {
	Fields     *string `form:"fields,omitempty" json:"fields,omitempty"`
	First      *int32  `form:"first,omitempty" json:"first,omitempty"`
	Max        *int32  `form:"max,omitempty" json:"max,omitempty"`
	Name       *string `form:"name,omitempty" json:"name,omitempty"`
	Owner      *string `form:"owner,omitempty" json:"owner,omitempty"`
	Permission *bool   `form:"permission,omitempty" json:"permission,omitempty"`
	PolicyId   *string `form:"policyId,omitempty" json:"policyId,omitempty"`
	Resource   *string `form:"resource,omitempty" json:"resource,omitempty"`
	Scope      *string `form:"scope,omitempty" json:"scope,omitempty"`
	Type       *string `form:"type,omitempty" json:"type,omitempty"`
}

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionJSONBody defines parameters for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission.
type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionJSONBody = string

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams defines parameters for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch.
type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams struct {
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
	Name   *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams defines parameters for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy.
type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams struct {
	Fields     *string `form:"fields,omitempty" json:"fields,omitempty"`
	First      *int32  `form:"first,omitempty" json:"first,omitempty"`
	Max        *int32  `form:"max,omitempty" json:"max,omitempty"`
	Name       *string `form:"name,omitempty" json:"name,omitempty"`
	Owner      *string `form:"owner,omitempty" json:"owner,omitempty"`
	Permission *bool   `form:"permission,omitempty" json:"permission,omitempty"`
	PolicyId   *string `form:"policyId,omitempty" json:"policyId,omitempty"`
	Resource   *string `form:"resource,omitempty" json:"resource,omitempty"`
	Scope      *string `form:"scope,omitempty" json:"scope,omitempty"`
	Type       *string `form:"type,omitempty" json:"type,omitempty"`
}

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyJSONBody defines parameters for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy.
type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyJSONBody = string

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams defines parameters for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch.
type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams struct {
	Fields *string `form:"fields,omitempty" json:"fields,omitempty"`
	Name   *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams defines parameters for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResource.
type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams struct {
	Id          *string `form:"_id,omitempty" json:"_id,omitempty"`
	Deep        *bool   `form:"deep,omitempty" json:"deep,omitempty"`
	ExactName   *bool   `form:"exactName,omitempty" json:"exactName,omitempty"`
	First       *int32  `form:"first,omitempty" json:"first,omitempty"`
	MatchingUri *bool   `form:"matchingUri,omitempty" json:"matchingUri,omitempty"`
	Max         *int32  `form:"max,omitempty" json:"max,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty"`
	Owner       *string `form:"owner,omitempty" json:"owner,omitempty"`
	Scope       *string `form:"scope,omitempty" json:"scope,omitempty"`
	Type        *string `form:"type,omitempty" json:"type,omitempty"`
	Uri         *string `form:"uri,omitempty" json:"uri,omitempty"`
}

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams defines parameters for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResource.
type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams struct {
	Id          *string `form:"_id,omitempty" json:"_id,omitempty"`
	Deep        *bool   `form:"deep,omitempty" json:"deep,omitempty"`
	ExactName   *bool   `form:"exactName,omitempty" json:"exactName,omitempty"`
	First       *int32  `form:"first,omitempty" json:"first,omitempty"`
	MatchingUri *bool   `form:"matchingUri,omitempty" json:"matchingUri,omitempty"`
	Max         *int32  `form:"max,omitempty" json:"max,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty"`
	Owner       *string `form:"owner,omitempty" json:"owner,omitempty"`
	Scope       *string `form:"scope,omitempty" json:"scope,omitempty"`
	Type        *string `form:"type,omitempty" json:"type,omitempty"`
	Uri         *string `form:"uri,omitempty" json:"uri,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams defines parameters for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch.
type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams struct {
	Name        *string `form:"name,omitempty" json:"name,omitempty"`
	Id          *string `form:"_id,omitempty" json:"_id,omitempty"`
	Deep        *bool   `form:"deep,omitempty" json:"deep,omitempty"`
	ExactName   *bool   `form:"exactName,omitempty" json:"exactName,omitempty"`
	First       *int32  `form:"first,omitempty" json:"first,omitempty"`
	MatchingUri *bool   `form:"matchingUri,omitempty" json:"matchingUri,omitempty"`
	Max         *int32  `form:"max,omitempty" json:"max,omitempty"`
	Owner       *string `form:"owner,omitempty" json:"owner,omitempty"`
	Scope       *string `form:"scope,omitempty" json:"scope,omitempty"`
	Type        *string `form:"type,omitempty" json:"type,omitempty"`
	Uri         *string `form:"uri,omitempty" json:"uri,omitempty"`
}

// DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams defines parameters for DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId.
type DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams struct {
	Id          *string `form:"_id,omitempty" json:"_id,omitempty"`
	Deep        *bool   `form:"deep,omitempty" json:"deep,omitempty"`
	ExactName   *bool   `form:"exactName,omitempty" json:"exactName,omitempty"`
	First       *int32  `form:"first,omitempty" json:"first,omitempty"`
	MatchingUri *bool   `form:"matchingUri,omitempty" json:"matchingUri,omitempty"`
	Max         *int32  `form:"max,omitempty" json:"max,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty"`
	Owner       *string `form:"owner,omitempty" json:"owner,omitempty"`
	Scope       *string `form:"scope,omitempty" json:"scope,omitempty"`
	Type        *string `form:"type,omitempty" json:"type,omitempty"`
	Uri         *string `form:"uri,omitempty" json:"uri,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams defines parameters for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId.
type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams struct {
	Id          *string `form:"_id,omitempty" json:"_id,omitempty"`
	Deep        *bool   `form:"deep,omitempty" json:"deep,omitempty"`
	ExactName   *bool   `form:"exactName,omitempty" json:"exactName,omitempty"`
	First       *int32  `form:"first,omitempty" json:"first,omitempty"`
	MatchingUri *bool   `form:"matchingUri,omitempty" json:"matchingUri,omitempty"`
	Max         *int32  `form:"max,omitempty" json:"max,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty"`
	Owner       *string `form:"owner,omitempty" json:"owner,omitempty"`
	Scope       *string `form:"scope,omitempty" json:"scope,omitempty"`
	Type        *string `form:"type,omitempty" json:"type,omitempty"`
	Uri         *string `form:"uri,omitempty" json:"uri,omitempty"`
}

// PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams defines parameters for PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId.
type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams struct {
	Id          *string `form:"_id,omitempty" json:"_id,omitempty"`
	Deep        *bool   `form:"deep,omitempty" json:"deep,omitempty"`
	ExactName   *bool   `form:"exactName,omitempty" json:"exactName,omitempty"`
	First       *int32  `form:"first,omitempty" json:"first,omitempty"`
	MatchingUri *bool   `form:"matchingUri,omitempty" json:"matchingUri,omitempty"`
	Max         *int32  `form:"max,omitempty" json:"max,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty"`
	Owner       *string `form:"owner,omitempty" json:"owner,omitempty"`
	Scope       *string `form:"scope,omitempty" json:"scope,omitempty"`
	Type        *string `form:"type,omitempty" json:"type,omitempty"`
	Uri         *string `form:"uri,omitempty" json:"uri,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams defines parameters for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes.
type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams struct {
	Id          *string `form:"_id,omitempty" json:"_id,omitempty"`
	Deep        *bool   `form:"deep,omitempty" json:"deep,omitempty"`
	ExactName   *bool   `form:"exactName,omitempty" json:"exactName,omitempty"`
	First       *int32  `form:"first,omitempty" json:"first,omitempty"`
	MatchingUri *bool   `form:"matchingUri,omitempty" json:"matchingUri,omitempty"`
	Max         *int32  `form:"max,omitempty" json:"max,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty"`
	Owner       *string `form:"owner,omitempty" json:"owner,omitempty"`
	Scope       *string `form:"scope,omitempty" json:"scope,omitempty"`
	Type        *string `form:"type,omitempty" json:"type,omitempty"`
	Uri         *string `form:"uri,omitempty" json:"uri,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams defines parameters for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions.
type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams struct {
	Id          *string `form:"_id,omitempty" json:"_id,omitempty"`
	Deep        *bool   `form:"deep,omitempty" json:"deep,omitempty"`
	ExactName   *bool   `form:"exactName,omitempty" json:"exactName,omitempty"`
	First       *int32  `form:"first,omitempty" json:"first,omitempty"`
	MatchingUri *bool   `form:"matchingUri,omitempty" json:"matchingUri,omitempty"`
	Max         *int32  `form:"max,omitempty" json:"max,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty"`
	Owner       *string `form:"owner,omitempty" json:"owner,omitempty"`
	Scope       *string `form:"scope,omitempty" json:"scope,omitempty"`
	Type        *string `form:"type,omitempty" json:"type,omitempty"`
	Uri         *string `form:"uri,omitempty" json:"uri,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams defines parameters for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes.
type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams struct {
	Id          *string `form:"_id,omitempty" json:"_id,omitempty"`
	Deep        *bool   `form:"deep,omitempty" json:"deep,omitempty"`
	ExactName   *bool   `form:"exactName,omitempty" json:"exactName,omitempty"`
	First       *int32  `form:"first,omitempty" json:"first,omitempty"`
	MatchingUri *bool   `form:"matchingUri,omitempty" json:"matchingUri,omitempty"`
	Max         *int32  `form:"max,omitempty" json:"max,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty"`
	Owner       *string `form:"owner,omitempty" json:"owner,omitempty"`
	Scope       *string `form:"scope,omitempty" json:"scope,omitempty"`
	Type        *string `form:"type,omitempty" json:"type,omitempty"`
	Uri         *string `form:"uri,omitempty" json:"uri,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams defines parameters for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScope.
type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams struct {
	First   *int32  `form:"first,omitempty" json:"first,omitempty"`
	Max     *int32  `form:"max,omitempty" json:"max,omitempty"`
	Name    *string `form:"name,omitempty" json:"name,omitempty"`
	ScopeId *string `form:"scopeId,omitempty" json:"scopeId,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams defines parameters for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch.
type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams defines parameters for GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken.
type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams struct {
	Scope  *string `form:"scope,omitempty" json:"scope,omitempty"`
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams defines parameters for GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken.
type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams struct {
	Scope  *string `form:"scope,omitempty" json:"scope,omitempty"`
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams defines parameters for GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo.
type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams struct {
	Scope  *string `form:"scope,omitempty" json:"scope,omitempty"`
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams defines parameters for GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers.
type GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams struct {
	Scope *string `form:"scope,omitempty" json:"scope,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams defines parameters for GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted.
type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams struct {
	Scope *string `form:"scope,omitempty" json:"scope,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams defines parameters for GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted.
type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams struct {
	Scope *string `form:"scope,omitempty" json:"scope,omitempty"`
}

// PostAdminRealmsRealmClientsClientUuidNodesJSONBody defines parameters for PostAdminRealmsRealmClientsClientUuidNodes.
type PostAdminRealmsRealmClientsClientUuidNodesJSONBody map[string]string

// GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams defines parameters for GetAdminRealmsRealmClientsClientUuidOfflineSessions.
type GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams struct {
	// First Paging offset
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// Max Maximum results size (defaults to 100)
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`
}

// PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsJSONBody defines parameters for PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModels.
type PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsJSONBody = []ProtocolMapperRepresentation

// GetAdminRealmsRealmClientsClientUuidRolesParams defines parameters for GetAdminRealmsRealmClientsClientUuidRoles.
type GetAdminRealmsRealmClientsClientUuidRolesParams struct {
	BriefRepresentation *bool   `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
	First               *int32  `form:"first,omitempty" json:"first,omitempty"`
	Max                 *int32  `form:"max,omitempty" json:"max,omitempty"`
	Search              *string `form:"search,omitempty" json:"search,omitempty"`
}

// DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONBody defines parameters for DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameComposites.
type DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONBody = []RoleRepresentation

// PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONBody defines parameters for PostAdminRealmsRealmClientsClientUuidRolesRoleNameComposites.
type PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONBody = []RoleRepresentation

// GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsParams defines parameters for GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroups.
type GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsParams struct {
	// BriefRepresentation if false, return a full representation of the {@code GroupRepresentation} objects.
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`

	// First first result to return. Ignored if negative or {@code null}.
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// Max maximum number of results to return. Ignored if negative or {@code null}.
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersParams defines parameters for GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsers.
type GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersParams struct {
	// BriefRepresentation Boolean which defines whether brief representations are returned (default: false)
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`

	// First first result to return. Ignored if negative or {@code null}.
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// Max maximum number of results to return. Ignored if negative or {@code null}.
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`
}

// DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONBody defines parameters for DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient.
type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONBody = []RoleRepresentation

// PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONBody defines parameters for PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient.
type PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONBody = []RoleRepresentation

// GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeParams defines parameters for GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientComposite.
type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONBody defines parameters for DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealm.
type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONBody = []RoleRepresentation

// PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONBody defines parameters for PostAdminRealmsRealmClientsClientUuidScopeMappingsRealm.
type PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONBody = []RoleRepresentation

// GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeParams defines parameters for GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmComposite.
type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// GetAdminRealmsRealmClientsClientUuidUserSessionsParams defines parameters for GetAdminRealmsRealmClientsClientUuidUserSessions.
type GetAdminRealmsRealmClientsClientUuidUserSessionsParams struct {
	// First Paging offset
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// Max Maximum results size (defaults to 100)
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`
}

// GetAdminRealmsRealmComponentsParams defines parameters for GetAdminRealmsRealmComponents.
type GetAdminRealmsRealmComponentsParams struct {
	Name   *string `form:"name,omitempty" json:"name,omitempty"`
	Parent *string `form:"parent,omitempty" json:"parent,omitempty"`
	Type   *string `form:"type,omitempty" json:"type,omitempty"`
}

// GetAdminRealmsRealmComponentsIdSubComponentTypesParams defines parameters for GetAdminRealmsRealmComponentsIdSubComponentTypes.
type GetAdminRealmsRealmComponentsIdSubComponentTypesParams struct {
	Type *string `form:"type,omitempty" json:"type,omitempty"`
}

// GetAdminRealmsRealmEventsParams defines parameters for GetAdminRealmsRealmEvents.
type GetAdminRealmsRealmEventsParams struct {
	// Client App or oauth client name
	Client *string `form:"client,omitempty" json:"client,omitempty"`

	// DateFrom From date
	DateFrom *string `form:"dateFrom,omitempty" json:"dateFrom,omitempty"`

	// DateTo To date
	DateTo *string `form:"dateTo,omitempty" json:"dateTo,omitempty"`

	// First Paging offset
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// IpAddress IP Address
	IpAddress *string `form:"ipAddress,omitempty" json:"ipAddress,omitempty"`

	// Max Maximum results size (defaults to 100)
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`

	// Type The types of events to return
	Type *[]string `form:"type,omitempty" json:"type,omitempty"`

	// User User id
	User *string `form:"user,omitempty" json:"user,omitempty"`
}

// GetAdminRealmsRealmGroupsParams defines parameters for GetAdminRealmsRealmGroups.
type GetAdminRealmsRealmGroupsParams struct {
	BriefRepresentation *bool   `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
	Exact               *bool   `form:"exact,omitempty" json:"exact,omitempty"`
	First               *int32  `form:"first,omitempty" json:"first,omitempty"`
	Max                 *int32  `form:"max,omitempty" json:"max,omitempty"`
	PopulateHierarchy   *bool   `form:"populateHierarchy,omitempty" json:"populateHierarchy,omitempty"`
	Q                   *string `form:"q,omitempty" json:"q,omitempty"`
	Search              *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetAdminRealmsRealmGroupsCountParams defines parameters for GetAdminRealmsRealmGroupsCount.
type GetAdminRealmsRealmGroupsCountParams struct {
	Search *string `form:"search,omitempty" json:"search,omitempty"`
	Top    *bool   `form:"top,omitempty" json:"top,omitempty"`
}

// GetAdminRealmsRealmGroupsGroupIdChildrenParams defines parameters for GetAdminRealmsRealmGroupsGroupIdChildren.
type GetAdminRealmsRealmGroupsGroupIdChildrenParams struct {
	// BriefRepresentation Boolean which defines whether brief groups representations are returned or not (default: false)
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`

	// Exact Boolean which defines whether the params "search" must match exactly or not
	Exact *bool `form:"exact,omitempty" json:"exact,omitempty"`

	// First The position of the first result to be returned (pagination offset).
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// Max The maximum number of results that are to be returned. Defaults to 10
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`

	// Search A String representing either an exact group name or a partial name
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetAdminRealmsRealmGroupsGroupIdMembersParams defines parameters for GetAdminRealmsRealmGroupsGroupIdMembers.
type GetAdminRealmsRealmGroupsGroupIdMembersParams struct {
	// BriefRepresentation Only return basic information (only guaranteed to return id, username, created, first and last name, email, enabled state, email verification state, federation link, and access. Note that it means that namely user attributes, required actions, and not before are not returned.)
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`

	// First Pagination offset
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// Max Maximum results size (defaults to 100)
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`
}

// DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONBody defines parameters for DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId.
type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONBody = []RoleRepresentation

// PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONBody defines parameters for PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId.
type PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONBody = []RoleRepresentation

// GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams defines parameters for GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite.
type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONBody defines parameters for DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealm.
type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONBody = []RoleRepresentation

// PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONBody defines parameters for PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealm.
type PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONBody = []RoleRepresentation

// GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeParams defines parameters for GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmComposite.
type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// PostAdminRealmsRealmIdentityProviderImportConfigJSONBody defines parameters for PostAdminRealmsRealmIdentityProviderImportConfig.
type PostAdminRealmsRealmIdentityProviderImportConfigJSONBody map[string]interface{}

// GetAdminRealmsRealmIdentityProviderInstancesParams defines parameters for GetAdminRealmsRealmIdentityProviderInstances.
type GetAdminRealmsRealmIdentityProviderInstancesParams struct {
	// BriefRepresentation Boolean which defines whether brief representations are returned (default: false)
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`

	// First Pagination offset
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// Max Maximum results size (defaults to 100)
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`

	// RealmOnly Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false)
	RealmOnly *bool `form:"realmOnly,omitempty" json:"realmOnly,omitempty"`

	// Search Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact ("name"). Default prefixed.
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetAdminRealmsRealmIdentityProviderInstancesAliasExportParams defines parameters for GetAdminRealmsRealmIdentityProviderInstancesAliasExport.
type GetAdminRealmsRealmIdentityProviderInstancesAliasExportParams struct {
	// Format Format to use
	Format *string `form:"format,omitempty" json:"format,omitempty"`
}

// GetAdminRealmsRealmLocalizationLocaleParams defines parameters for GetAdminRealmsRealmLocalizationLocale.
type GetAdminRealmsRealmLocalizationLocaleParams struct {
	UseRealmDefaultLocaleFallback *bool `form:"useRealmDefaultLocaleFallback,omitempty" json:"useRealmDefaultLocaleFallback,omitempty"`
}

// PostAdminRealmsRealmLocalizationLocaleJSONBody defines parameters for PostAdminRealmsRealmLocalizationLocale.
type PostAdminRealmsRealmLocalizationLocaleJSONBody map[string]string

// PutAdminRealmsRealmLocalizationLocaleKeyTextBody defines parameters for PutAdminRealmsRealmLocalizationLocaleKey.
type PutAdminRealmsRealmLocalizationLocaleKeyTextBody = string

// GetAdminRealmsRealmOrganizationsParams defines parameters for GetAdminRealmsRealmOrganizations.
type GetAdminRealmsRealmOrganizationsParams struct {
	// Exact Boolean which defines whether the param 'search' must match exactly or not
	Exact *bool `form:"exact,omitempty" json:"exact,omitempty"`

	// First The position of the first result to be processed (pagination offset)
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// Max The maximum number of results to be returned - defaults to 10
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`

	// Q A query to search for custom attributes, in the format 'key1:value2 key2:value2'
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Search A String representing either an organization name or domain
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// PostAdminRealmsRealmOrganizationsIdIdentityProvidersJSONBody defines parameters for PostAdminRealmsRealmOrganizationsIdIdentityProviders.
type PostAdminRealmsRealmOrganizationsIdIdentityProvidersJSONBody = string

// GetAdminRealmsRealmOrganizationsIdMembersParams defines parameters for GetAdminRealmsRealmOrganizationsIdMembers.
type GetAdminRealmsRealmOrganizationsIdMembersParams struct {
	// Exact Boolean which defines whether the param 'search' must match exactly or not
	Exact *bool `form:"exact,omitempty" json:"exact,omitempty"`

	// First The position of the first result to be processed (pagination offset)
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// Max The maximum number of results to be returned. Defaults to 10
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`

	// Search A String representing either a member's username, e-mail, first name, or last name.
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// PostAdminRealmsRealmOrganizationsIdMembersJSONBody defines parameters for PostAdminRealmsRealmOrganizationsIdMembers.
type PostAdminRealmsRealmOrganizationsIdMembersJSONBody = string

// PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserFormdataBody defines parameters for PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUser.
type PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserFormdataBody struct {
	Id *string `form:"id,omitempty" json:"id,omitempty"`
}

// PostAdminRealmsRealmOrganizationsIdMembersInviteUserFormdataBody defines parameters for PostAdminRealmsRealmOrganizationsIdMembersInviteUser.
type PostAdminRealmsRealmOrganizationsIdMembersInviteUserFormdataBody struct {
	Email     *string `form:"email,omitempty" json:"email,omitempty"`
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`
	LastName  *string `form:"lastName,omitempty" json:"lastName,omitempty"`
}

// PostAdminRealmsRealmPartialExportParams defines parameters for PostAdminRealmsRealmPartialExport.
type PostAdminRealmsRealmPartialExportParams struct {
	ExportClients        *bool `form:"exportClients,omitempty" json:"exportClients,omitempty"`
	ExportGroupsAndRoles *bool `form:"exportGroupsAndRoles,omitempty" json:"exportGroupsAndRoles,omitempty"`
}

// PostAdminRealmsRealmPartialImportJSONBody defines parameters for PostAdminRealmsRealmPartialImport.
type PostAdminRealmsRealmPartialImportJSONBody = openapi_types.File

// GetAdminRealmsRealmRolesParams defines parameters for GetAdminRealmsRealmRoles.
type GetAdminRealmsRealmRolesParams struct {
	BriefRepresentation *bool   `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
	First               *int32  `form:"first,omitempty" json:"first,omitempty"`
	Max                 *int32  `form:"max,omitempty" json:"max,omitempty"`
	Search              *string `form:"search,omitempty" json:"search,omitempty"`
}

// DeleteAdminRealmsRealmRolesByIdRoleIdCompositesJSONBody defines parameters for DeleteAdminRealmsRealmRolesByIdRoleIdComposites.
type DeleteAdminRealmsRealmRolesByIdRoleIdCompositesJSONBody = []RoleRepresentation

// GetAdminRealmsRealmRolesByIdRoleIdCompositesParams defines parameters for GetAdminRealmsRealmRolesByIdRoleIdComposites.
type GetAdminRealmsRealmRolesByIdRoleIdCompositesParams struct {
	First  *int32  `form:"first,omitempty" json:"first,omitempty"`
	Max    *int32  `form:"max,omitempty" json:"max,omitempty"`
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// PostAdminRealmsRealmRolesByIdRoleIdCompositesJSONBody defines parameters for PostAdminRealmsRealmRolesByIdRoleIdComposites.
type PostAdminRealmsRealmRolesByIdRoleIdCompositesJSONBody = []RoleRepresentation

// DeleteAdminRealmsRealmRolesRoleNameCompositesJSONBody defines parameters for DeleteAdminRealmsRealmRolesRoleNameComposites.
type DeleteAdminRealmsRealmRolesRoleNameCompositesJSONBody = []RoleRepresentation

// PostAdminRealmsRealmRolesRoleNameCompositesJSONBody defines parameters for PostAdminRealmsRealmRolesRoleNameComposites.
type PostAdminRealmsRealmRolesRoleNameCompositesJSONBody = []RoleRepresentation

// GetAdminRealmsRealmRolesRoleNameGroupsParams defines parameters for GetAdminRealmsRealmRolesRoleNameGroups.
type GetAdminRealmsRealmRolesRoleNameGroupsParams struct {
	// BriefRepresentation if false, return a full representation of the {@code GroupRepresentation} objects.
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`

	// First first result to return. Ignored if negative or {@code null}.
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// Max maximum number of results to return. Ignored if negative or {@code null}.
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`
}

// GetAdminRealmsRealmRolesRoleNameUsersParams defines parameters for GetAdminRealmsRealmRolesRoleNameUsers.
type GetAdminRealmsRealmRolesRoleNameUsersParams struct {
	// BriefRepresentation Boolean which defines whether brief representations are returned (default: false)
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`

	// First first result to return. Ignored if negative or {@code null}.
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// Max maximum number of results to return. Ignored if negative or {@code null}.
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`
}

// DeleteAdminRealmsRealmSessionsSessionParams defines parameters for DeleteAdminRealmsRealmSessionsSession.
type DeleteAdminRealmsRealmSessionsSessionParams struct {
	IsOffline *bool `form:"isOffline,omitempty" json:"isOffline,omitempty"`
}

// PostAdminRealmsRealmTestSMTPConnectionJSONBody defines parameters for PostAdminRealmsRealmTestSMTPConnection.
type PostAdminRealmsRealmTestSMTPConnectionJSONBody map[string]string

// PostAdminRealmsRealmTestSMTPConnectionFormdataBody defines parameters for PostAdminRealmsRealmTestSMTPConnection.
type PostAdminRealmsRealmTestSMTPConnectionFormdataBody struct {
	Config *string `form:"config,omitempty" json:"config,omitempty"`
}

// GetAdminRealmsRealmUsersParams defines parameters for GetAdminRealmsRealmUsers.
type GetAdminRealmsRealmUsersParams struct {
	// BriefRepresentation Boolean which defines whether brief representations are returned (default: false)
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`

	// Email A String contained in email, or the complete email, if param "exact" is true
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// EmailVerified whether the email has been verified
	EmailVerified *bool `form:"emailVerified,omitempty" json:"emailVerified,omitempty"`

	// Enabled Boolean representing if user is enabled or not
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty"`

	// Exact Boolean which defines whether the params "last", "first", "email" and "username" must match exactly
	Exact *bool `form:"exact,omitempty" json:"exact,omitempty"`

	// First Pagination offset
	First *int32 `form:"first,omitempty" json:"first,omitempty"`

	// FirstName A String contained in firstName, or the complete firstName, if param "exact" is true
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// IdpAlias The alias of an Identity Provider linked to the user
	IdpAlias *string `form:"idpAlias,omitempty" json:"idpAlias,omitempty"`

	// IdpUserId The userId at an Identity Provider linked to the user
	IdpUserId *string `form:"idpUserId,omitempty" json:"idpUserId,omitempty"`

	// LastName A String contained in lastName, or the complete lastName, if param "exact" is true
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`

	// Max Maximum results size (defaults to 100)
	Max *int32 `form:"max,omitempty" json:"max,omitempty"`

	// Q A query to search for custom attributes, in the format 'key1:value2 key2:value2'
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Search A String contained in username, first or last name, or email. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and "foo" for exact search.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Username A String contained in username, or the complete username, if param "exact" is true
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// GetAdminRealmsRealmUsersCountParams defines parameters for GetAdminRealmsRealmUsersCount.
type GetAdminRealmsRealmUsersCountParams struct {
	// Email email filter
	Email         *string `form:"email,omitempty" json:"email,omitempty"`
	EmailVerified *bool   `form:"emailVerified,omitempty" json:"emailVerified,omitempty"`

	// Enabled Boolean representing if user is enabled or not
	Enabled *bool `form:"enabled,omitempty" json:"enabled,omitempty"`

	// FirstName first name filter
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// LastName last name filter
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`
	Q        *string `form:"q,omitempty" json:"q,omitempty"`

	// Search arbitrary search string for all the fields below. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and "foo" for exact search.
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Username username filter
	Username *string `form:"username,omitempty" json:"username,omitempty"`
}

// GetAdminRealmsRealmUsersUserIdParams defines parameters for GetAdminRealmsRealmUsersUserId.
type GetAdminRealmsRealmUsersUserIdParams struct {
	// UserProfileMetadata Indicates if the user profile metadata should be added to the response
	UserProfileMetadata *bool `form:"userProfileMetadata,omitempty" json:"userProfileMetadata,omitempty"`
}

// PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextBody defines parameters for PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabel.
type PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextBody = string

// PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONBody defines parameters for PutAdminRealmsRealmUsersUserIdDisableCredentialTypes.
type PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONBody = []string

// PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONBody defines parameters for PutAdminRealmsRealmUsersUserIdExecuteActionsEmail.
type PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONBody = []string

// PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams defines parameters for PutAdminRealmsRealmUsersUserIdExecuteActionsEmail.
type PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams struct {
	// ClientId Client id
	ClientId *string `form:"client_id,omitempty" json:"client_id,omitempty"`

	// Lifespan Number of seconds after which the generated token expires
	Lifespan *int32 `form:"lifespan,omitempty" json:"lifespan,omitempty"`

	// RedirectUri Redirect uri
	RedirectUri *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty"`
}

// GetAdminRealmsRealmUsersUserIdGroupsParams defines parameters for GetAdminRealmsRealmUsersUserIdGroups.
type GetAdminRealmsRealmUsersUserIdGroupsParams struct {
	BriefRepresentation *bool   `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
	First               *int32  `form:"first,omitempty" json:"first,omitempty"`
	Max                 *int32  `form:"max,omitempty" json:"max,omitempty"`
	Search              *string `form:"search,omitempty" json:"search,omitempty"`
}

// GetAdminRealmsRealmUsersUserIdGroupsCountParams defines parameters for GetAdminRealmsRealmUsersUserIdGroupsCount.
type GetAdminRealmsRealmUsersUserIdGroupsCountParams struct {
	Search *string `form:"search,omitempty" json:"search,omitempty"`
}

// PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams defines parameters for PutAdminRealmsRealmUsersUserIdResetPasswordEmail.
type PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams struct {
	// ClientId client id
	ClientId *string `form:"client_id,omitempty" json:"client_id,omitempty"`

	// RedirectUri redirect uri
	RedirectUri *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty"`
}

// DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONBody defines parameters for DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId.
type DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONBody = []RoleRepresentation

// PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONBody defines parameters for PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId.
type PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONBody = []RoleRepresentation

// GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams defines parameters for GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite.
type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONBody defines parameters for DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealm.
type DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONBody = []RoleRepresentation

// PostAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONBody defines parameters for PostAdminRealmsRealmUsersUserIdRoleMappingsRealm.
type PostAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONBody = []RoleRepresentation

// GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeParams defines parameters for GetAdminRealmsRealmUsersUserIdRoleMappingsRealmComposite.
type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeParams struct {
	// BriefRepresentation if false, return roles with their attributes
	BriefRepresentation *bool `form:"briefRepresentation,omitempty" json:"briefRepresentation,omitempty"`
}

// PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams defines parameters for PutAdminRealmsRealmUsersUserIdSendVerifyEmail.
type PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams struct {
	// ClientId Client id
	ClientId *string `form:"client_id,omitempty" json:"client_id,omitempty"`

	// Lifespan Number of seconds after which the generated token expires
	Lifespan *int32 `form:"lifespan,omitempty" json:"lifespan,omitempty"`

	// RedirectUri Redirect uri
	RedirectUri *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty"`
}

// PostAdminRealmsJSONRequestBody defines body for PostAdminRealms for application/json ContentType.
type PostAdminRealmsJSONRequestBody = PostAdminRealmsJSONBody

// PutAdminRealmsRealmJSONRequestBody defines body for PutAdminRealmsRealm for application/json ContentType.
type PutAdminRealmsRealmJSONRequestBody = RealmRepresentation

// PostAdminRealmsRealmAuthenticationConfigJSONRequestBody defines body for PostAdminRealmsRealmAuthenticationConfig for application/json ContentType.
type PostAdminRealmsRealmAuthenticationConfigJSONRequestBody = AuthenticatorConfigRepresentation

// PutAdminRealmsRealmAuthenticationConfigIdJSONRequestBody defines body for PutAdminRealmsRealmAuthenticationConfigId for application/json ContentType.
type PutAdminRealmsRealmAuthenticationConfigIdJSONRequestBody = AuthenticatorConfigRepresentation

// PostAdminRealmsRealmAuthenticationExecutionsJSONRequestBody defines body for PostAdminRealmsRealmAuthenticationExecutions for application/json ContentType.
type PostAdminRealmsRealmAuthenticationExecutionsJSONRequestBody = AuthenticationExecutionRepresentation

// PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigJSONRequestBody defines body for PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfig for application/json ContentType.
type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigJSONRequestBody = AuthenticatorConfigRepresentation

// PostAdminRealmsRealmAuthenticationFlowsJSONRequestBody defines body for PostAdminRealmsRealmAuthenticationFlows for application/json ContentType.
type PostAdminRealmsRealmAuthenticationFlowsJSONRequestBody = AuthenticationFlowRepresentation

// PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyJSONRequestBody defines body for PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopy for application/json ContentType.
type PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyJSONRequestBody PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyJSONBody

// PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsJSONRequestBody defines body for PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions for application/json ContentType.
type PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsJSONRequestBody = AuthenticationExecutionInfoRepresentation

// PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONRequestBody defines body for PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecution for application/json ContentType.
type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONRequestBody PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONBody

// PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONRequestBody defines body for PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlow for application/json ContentType.
type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONRequestBody PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONBody

// PutAdminRealmsRealmAuthenticationFlowsIdJSONRequestBody defines body for PutAdminRealmsRealmAuthenticationFlowsId for application/json ContentType.
type PutAdminRealmsRealmAuthenticationFlowsIdJSONRequestBody = AuthenticationFlowRepresentation

// PostAdminRealmsRealmAuthenticationRegisterRequiredActionJSONRequestBody defines body for PostAdminRealmsRealmAuthenticationRegisterRequiredAction for application/json ContentType.
type PostAdminRealmsRealmAuthenticationRegisterRequiredActionJSONRequestBody PostAdminRealmsRealmAuthenticationRegisterRequiredActionJSONBody

// PutAdminRealmsRealmAuthenticationRequiredActionsAliasJSONRequestBody defines body for PutAdminRealmsRealmAuthenticationRequiredActionsAlias for application/json ContentType.
type PutAdminRealmsRealmAuthenticationRequiredActionsAliasJSONRequestBody = RequiredActionProviderRepresentation

// PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigJSONRequestBody defines body for PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfig for application/json ContentType.
type PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigJSONRequestBody = RequiredActionConfigRepresentation

// PostAdminRealmsRealmClientDescriptionConverterJSONRequestBody defines body for PostAdminRealmsRealmClientDescriptionConverter for application/json ContentType.
type PostAdminRealmsRealmClientDescriptionConverterJSONRequestBody = PostAdminRealmsRealmClientDescriptionConverterJSONBody

// PostAdminRealmsRealmClientDescriptionConverterTextRequestBody defines body for PostAdminRealmsRealmClientDescriptionConverter for text/plain ContentType.
type PostAdminRealmsRealmClientDescriptionConverterTextRequestBody = PostAdminRealmsRealmClientDescriptionConverterTextBody

// PutAdminRealmsRealmClientPoliciesPoliciesJSONRequestBody defines body for PutAdminRealmsRealmClientPoliciesPolicies for application/json ContentType.
type PutAdminRealmsRealmClientPoliciesPoliciesJSONRequestBody = ClientPoliciesRepresentation

// PutAdminRealmsRealmClientPoliciesProfilesJSONRequestBody defines body for PutAdminRealmsRealmClientPoliciesProfiles for application/json ContentType.
type PutAdminRealmsRealmClientPoliciesProfilesJSONRequestBody = ClientProfilesRepresentation

// PostAdminRealmsRealmClientScopesJSONRequestBody defines body for PostAdminRealmsRealmClientScopes for application/json ContentType.
type PostAdminRealmsRealmClientScopesJSONRequestBody = ClientScopeRepresentation

// PutAdminRealmsRealmClientScopesClientScopeIdJSONRequestBody defines body for PutAdminRealmsRealmClientScopesClientScopeId for application/json ContentType.
type PutAdminRealmsRealmClientScopesClientScopeIdJSONRequestBody = ClientScopeRepresentation

// PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsJSONRequestBody defines body for PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModels for application/json ContentType.
type PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsJSONRequestBody = PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsJSONBody

// PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsJSONRequestBody defines body for PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels for application/json ContentType.
type PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsJSONRequestBody = ProtocolMapperRepresentation

// PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdJSONRequestBody defines body for PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId for application/json ContentType.
type PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdJSONRequestBody = ProtocolMapperRepresentation

// DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONRequestBody defines body for DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient for application/json ContentType.
type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONRequestBody = DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONBody

// PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONRequestBody defines body for PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient for application/json ContentType.
type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONRequestBody = PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONBody

// DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONRequestBody defines body for DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm for application/json ContentType.
type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONRequestBody = DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONBody

// PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONRequestBody defines body for PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm for application/json ContentType.
type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONRequestBody = PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONBody

// PostAdminRealmsRealmClientTemplatesJSONRequestBody defines body for PostAdminRealmsRealmClientTemplates for application/json ContentType.
type PostAdminRealmsRealmClientTemplatesJSONRequestBody = ClientScopeRepresentation

// PutAdminRealmsRealmClientTemplatesClientScopeIdJSONRequestBody defines body for PutAdminRealmsRealmClientTemplatesClientScopeId for application/json ContentType.
type PutAdminRealmsRealmClientTemplatesClientScopeIdJSONRequestBody = ClientScopeRepresentation

// PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsJSONRequestBody defines body for PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModels for application/json ContentType.
type PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsJSONRequestBody = PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsJSONBody

// PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsJSONRequestBody defines body for PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels for application/json ContentType.
type PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsJSONRequestBody = ProtocolMapperRepresentation

// PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdJSONRequestBody defines body for PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId for application/json ContentType.
type PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdJSONRequestBody = ProtocolMapperRepresentation

// DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONRequestBody defines body for DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient for application/json ContentType.
type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONRequestBody = DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONBody

// PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONRequestBody defines body for PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient for application/json ContentType.
type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONRequestBody = PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONBody

// DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONRequestBody defines body for DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm for application/json ContentType.
type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONRequestBody = DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONBody

// PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONRequestBody defines body for PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm for application/json ContentType.
type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONRequestBody = PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONBody

// PutAdminRealmsRealmClientTypesJSONRequestBody defines body for PutAdminRealmsRealmClientTypes for application/json ContentType.
type PutAdminRealmsRealmClientTypesJSONRequestBody = ClientTypesRepresentation

// PostAdminRealmsRealmClientsJSONRequestBody defines body for PostAdminRealmsRealmClients for application/json ContentType.
type PostAdminRealmsRealmClientsJSONRequestBody = ClientRepresentation

// PostAdminRealmsRealmClientsInitialAccessJSONRequestBody defines body for PostAdminRealmsRealmClientsInitialAccess for application/json ContentType.
type PostAdminRealmsRealmClientsInitialAccessJSONRequestBody = ClientInitialAccessCreatePresentation

// PutAdminRealmsRealmClientsClientUuidJSONRequestBody defines body for PutAdminRealmsRealmClientsClientUuid for application/json ContentType.
type PutAdminRealmsRealmClientsClientUuidJSONRequestBody = ClientRepresentation

// PutAdminRealmsRealmClientsClientUuidAuthzResourceServerJSONRequestBody defines body for PutAdminRealmsRealmClientsClientUuidAuthzResourceServer for application/json ContentType.
type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerJSONRequestBody = ResourceServerRepresentation

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImport for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportJSONRequestBody = ResourceServerRepresentation

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionJSONRequestBody = PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionJSONBody

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateJSONRequestBody = PolicyEvaluationRequest

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyJSONRequestBody = PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyJSONBody

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateJSONRequestBody = PolicyEvaluationRequest

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResource for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceJSONRequestBody = ResourceRepresentation

// PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdJSONRequestBody defines body for PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId for application/json ContentType.
type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdJSONRequestBody = ResourceRepresentation

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScope for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeJSONRequestBody = ScopeRepresentation

// PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdJSONRequestBody defines body for PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId for application/json ContentType.
type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdJSONRequestBody = ScopeRepresentation

// PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownload for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadJSONRequestBody = KeyStoreConfig

// PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownload for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadJSONRequestBody = KeyStoreConfig

// PutAdminRealmsRealmClientsClientUuidManagementPermissionsJSONRequestBody defines body for PutAdminRealmsRealmClientsClientUuidManagementPermissions for application/json ContentType.
type PutAdminRealmsRealmClientsClientUuidManagementPermissionsJSONRequestBody = ManagementPermissionReference

// PostAdminRealmsRealmClientsClientUuidNodesJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidNodes for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidNodesJSONRequestBody PostAdminRealmsRealmClientsClientUuidNodesJSONBody

// PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModels for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsJSONRequestBody = PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsJSONBody

// PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidProtocolMappersModels for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsJSONRequestBody = ProtocolMapperRepresentation

// PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdJSONRequestBody defines body for PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsId for application/json ContentType.
type PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdJSONRequestBody = ProtocolMapperRepresentation

// PostAdminRealmsRealmClientsClientUuidRolesJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidRoles for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidRolesJSONRequestBody = RoleRepresentation

// PutAdminRealmsRealmClientsClientUuidRolesRoleNameJSONRequestBody defines body for PutAdminRealmsRealmClientsClientUuidRolesRoleName for application/json ContentType.
type PutAdminRealmsRealmClientsClientUuidRolesRoleNameJSONRequestBody = RoleRepresentation

// DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONRequestBody defines body for DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameComposites for application/json ContentType.
type DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONRequestBody = DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONBody

// PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidRolesRoleNameComposites for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONRequestBody = PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONBody

// PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsJSONRequestBody defines body for PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions for application/json ContentType.
type PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsJSONRequestBody = ManagementPermissionReference

// DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONRequestBody defines body for DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient for application/json ContentType.
type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONRequestBody = DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONBody

// PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONRequestBody = PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONBody

// DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONRequestBody defines body for DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealm for application/json ContentType.
type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONRequestBody = DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONBody

// PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONRequestBody defines body for PostAdminRealmsRealmClientsClientUuidScopeMappingsRealm for application/json ContentType.
type PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONRequestBody = PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONBody

// PostAdminRealmsRealmComponentsJSONRequestBody defines body for PostAdminRealmsRealmComponents for application/json ContentType.
type PostAdminRealmsRealmComponentsJSONRequestBody = ComponentRepresentation

// PutAdminRealmsRealmComponentsIdJSONRequestBody defines body for PutAdminRealmsRealmComponentsId for application/json ContentType.
type PutAdminRealmsRealmComponentsIdJSONRequestBody = ComponentRepresentation

// PutAdminRealmsRealmEventsConfigJSONRequestBody defines body for PutAdminRealmsRealmEventsConfig for application/json ContentType.
type PutAdminRealmsRealmEventsConfigJSONRequestBody = RealmEventsConfigRepresentation

// PostAdminRealmsRealmGroupsJSONRequestBody defines body for PostAdminRealmsRealmGroups for application/json ContentType.
type PostAdminRealmsRealmGroupsJSONRequestBody = GroupRepresentation

// PutAdminRealmsRealmGroupsGroupIdJSONRequestBody defines body for PutAdminRealmsRealmGroupsGroupId for application/json ContentType.
type PutAdminRealmsRealmGroupsGroupIdJSONRequestBody = GroupRepresentation

// PostAdminRealmsRealmGroupsGroupIdChildrenJSONRequestBody defines body for PostAdminRealmsRealmGroupsGroupIdChildren for application/json ContentType.
type PostAdminRealmsRealmGroupsGroupIdChildrenJSONRequestBody = GroupRepresentation

// PutAdminRealmsRealmGroupsGroupIdManagementPermissionsJSONRequestBody defines body for PutAdminRealmsRealmGroupsGroupIdManagementPermissions for application/json ContentType.
type PutAdminRealmsRealmGroupsGroupIdManagementPermissionsJSONRequestBody = ManagementPermissionReference

// DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONRequestBody defines body for DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId for application/json ContentType.
type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONRequestBody = DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONBody

// PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONRequestBody defines body for PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId for application/json ContentType.
type PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONRequestBody = PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONBody

// DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONRequestBody defines body for DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealm for application/json ContentType.
type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONRequestBody = DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONBody

// PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONRequestBody defines body for PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealm for application/json ContentType.
type PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONRequestBody = PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONBody

// PostAdminRealmsRealmIdentityProviderImportConfigJSONRequestBody defines body for PostAdminRealmsRealmIdentityProviderImportConfig for application/json ContentType.
type PostAdminRealmsRealmIdentityProviderImportConfigJSONRequestBody PostAdminRealmsRealmIdentityProviderImportConfigJSONBody

// PostAdminRealmsRealmIdentityProviderInstancesJSONRequestBody defines body for PostAdminRealmsRealmIdentityProviderInstances for application/json ContentType.
type PostAdminRealmsRealmIdentityProviderInstancesJSONRequestBody = IdentityProviderRepresentation

// PutAdminRealmsRealmIdentityProviderInstancesAliasJSONRequestBody defines body for PutAdminRealmsRealmIdentityProviderInstancesAlias for application/json ContentType.
type PutAdminRealmsRealmIdentityProviderInstancesAliasJSONRequestBody = IdentityProviderRepresentation

// PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsJSONRequestBody defines body for PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions for application/json ContentType.
type PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsJSONRequestBody = ManagementPermissionReference

// PostAdminRealmsRealmIdentityProviderInstancesAliasMappersJSONRequestBody defines body for PostAdminRealmsRealmIdentityProviderInstancesAliasMappers for application/json ContentType.
type PostAdminRealmsRealmIdentityProviderInstancesAliasMappersJSONRequestBody = IdentityProviderMapperRepresentation

// PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdJSONRequestBody defines body for PutAdminRealmsRealmIdentityProviderInstancesAliasMappersId for application/json ContentType.
type PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdJSONRequestBody = IdentityProviderMapperRepresentation

// PostAdminRealmsRealmLocalizationLocaleJSONRequestBody defines body for PostAdminRealmsRealmLocalizationLocale for application/json ContentType.
type PostAdminRealmsRealmLocalizationLocaleJSONRequestBody PostAdminRealmsRealmLocalizationLocaleJSONBody

// PutAdminRealmsRealmLocalizationLocaleKeyTextRequestBody defines body for PutAdminRealmsRealmLocalizationLocaleKey for text/plain ContentType.
type PutAdminRealmsRealmLocalizationLocaleKeyTextRequestBody = PutAdminRealmsRealmLocalizationLocaleKeyTextBody

// PostAdminRealmsRealmOrganizationsJSONRequestBody defines body for PostAdminRealmsRealmOrganizations for application/json ContentType.
type PostAdminRealmsRealmOrganizationsJSONRequestBody = OrganizationRepresentation

// PutAdminRealmsRealmOrganizationsIdJSONRequestBody defines body for PutAdminRealmsRealmOrganizationsId for application/json ContentType.
type PutAdminRealmsRealmOrganizationsIdJSONRequestBody = OrganizationRepresentation

// PostAdminRealmsRealmOrganizationsIdIdentityProvidersJSONRequestBody defines body for PostAdminRealmsRealmOrganizationsIdIdentityProviders for application/json ContentType.
type PostAdminRealmsRealmOrganizationsIdIdentityProvidersJSONRequestBody = PostAdminRealmsRealmOrganizationsIdIdentityProvidersJSONBody

// PostAdminRealmsRealmOrganizationsIdMembersJSONRequestBody defines body for PostAdminRealmsRealmOrganizationsIdMembers for application/json ContentType.
type PostAdminRealmsRealmOrganizationsIdMembersJSONRequestBody = PostAdminRealmsRealmOrganizationsIdMembersJSONBody

// PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserFormdataRequestBody defines body for PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUser for application/x-www-form-urlencoded ContentType.
type PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserFormdataRequestBody PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserFormdataBody

// PostAdminRealmsRealmOrganizationsIdMembersInviteUserFormdataRequestBody defines body for PostAdminRealmsRealmOrganizationsIdMembersInviteUser for application/x-www-form-urlencoded ContentType.
type PostAdminRealmsRealmOrganizationsIdMembersInviteUserFormdataRequestBody PostAdminRealmsRealmOrganizationsIdMembersInviteUserFormdataBody

// PostAdminRealmsRealmPartialImportJSONRequestBody defines body for PostAdminRealmsRealmPartialImport for application/json ContentType.
type PostAdminRealmsRealmPartialImportJSONRequestBody = PostAdminRealmsRealmPartialImportJSONBody

// PostAdminRealmsRealmRolesJSONRequestBody defines body for PostAdminRealmsRealmRoles for application/json ContentType.
type PostAdminRealmsRealmRolesJSONRequestBody = RoleRepresentation

// PutAdminRealmsRealmRolesByIdRoleIdJSONRequestBody defines body for PutAdminRealmsRealmRolesByIdRoleId for application/json ContentType.
type PutAdminRealmsRealmRolesByIdRoleIdJSONRequestBody = RoleRepresentation

// DeleteAdminRealmsRealmRolesByIdRoleIdCompositesJSONRequestBody defines body for DeleteAdminRealmsRealmRolesByIdRoleIdComposites for application/json ContentType.
type DeleteAdminRealmsRealmRolesByIdRoleIdCompositesJSONRequestBody = DeleteAdminRealmsRealmRolesByIdRoleIdCompositesJSONBody

// PostAdminRealmsRealmRolesByIdRoleIdCompositesJSONRequestBody defines body for PostAdminRealmsRealmRolesByIdRoleIdComposites for application/json ContentType.
type PostAdminRealmsRealmRolesByIdRoleIdCompositesJSONRequestBody = PostAdminRealmsRealmRolesByIdRoleIdCompositesJSONBody

// PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsJSONRequestBody defines body for PutAdminRealmsRealmRolesByIdRoleIdManagementPermissions for application/json ContentType.
type PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsJSONRequestBody = ManagementPermissionReference

// PutAdminRealmsRealmRolesRoleNameJSONRequestBody defines body for PutAdminRealmsRealmRolesRoleName for application/json ContentType.
type PutAdminRealmsRealmRolesRoleNameJSONRequestBody = RoleRepresentation

// DeleteAdminRealmsRealmRolesRoleNameCompositesJSONRequestBody defines body for DeleteAdminRealmsRealmRolesRoleNameComposites for application/json ContentType.
type DeleteAdminRealmsRealmRolesRoleNameCompositesJSONRequestBody = DeleteAdminRealmsRealmRolesRoleNameCompositesJSONBody

// PostAdminRealmsRealmRolesRoleNameCompositesJSONRequestBody defines body for PostAdminRealmsRealmRolesRoleNameComposites for application/json ContentType.
type PostAdminRealmsRealmRolesRoleNameCompositesJSONRequestBody = PostAdminRealmsRealmRolesRoleNameCompositesJSONBody

// PutAdminRealmsRealmRolesRoleNameManagementPermissionsJSONRequestBody defines body for PutAdminRealmsRealmRolesRoleNameManagementPermissions for application/json ContentType.
type PutAdminRealmsRealmRolesRoleNameManagementPermissionsJSONRequestBody = ManagementPermissionReference

// PostAdminRealmsRealmTestSMTPConnectionJSONRequestBody defines body for PostAdminRealmsRealmTestSMTPConnection for application/json ContentType.
type PostAdminRealmsRealmTestSMTPConnectionJSONRequestBody PostAdminRealmsRealmTestSMTPConnectionJSONBody

// PostAdminRealmsRealmTestSMTPConnectionFormdataRequestBody defines body for PostAdminRealmsRealmTestSMTPConnection for application/x-www-form-urlencoded ContentType.
type PostAdminRealmsRealmTestSMTPConnectionFormdataRequestBody PostAdminRealmsRealmTestSMTPConnectionFormdataBody

// PostAdminRealmsRealmUsersJSONRequestBody defines body for PostAdminRealmsRealmUsers for application/json ContentType.
type PostAdminRealmsRealmUsersJSONRequestBody = UserRepresentation

// PutAdminRealmsRealmUsersManagementPermissionsJSONRequestBody defines body for PutAdminRealmsRealmUsersManagementPermissions for application/json ContentType.
type PutAdminRealmsRealmUsersManagementPermissionsJSONRequestBody = ManagementPermissionReference

// PutAdminRealmsRealmUsersProfileJSONRequestBody defines body for UpdateUsersProfile for application/json ContentType.
type PutAdminRealmsRealmUsersProfileJSONRequestBody = UPConfig

// PutAdminRealmsRealmUsersUserIdJSONRequestBody defines body for PutAdminRealmsRealmUsersUserId for application/json ContentType.
type PutAdminRealmsRealmUsersUserIdJSONRequestBody = UserRepresentation

// PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextRequestBody defines body for PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabel for text/plain ContentType.
type PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextRequestBody = PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextBody

// PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONRequestBody defines body for PutAdminRealmsRealmUsersUserIdDisableCredentialTypes for application/json ContentType.
type PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONRequestBody = PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONBody

// PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONRequestBody defines body for PutAdminRealmsRealmUsersUserIdExecuteActionsEmail for application/json ContentType.
type PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONRequestBody = PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONBody

// PutAdminRealmsRealmUsersUserIdResetPasswordJSONRequestBody defines body for PutAdminRealmsRealmUsersUserIdResetPassword for application/json ContentType.
type PutAdminRealmsRealmUsersUserIdResetPasswordJSONRequestBody = CredentialRepresentation

// DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONRequestBody defines body for DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId for application/json ContentType.
type DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONRequestBody = DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONBody

// PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONRequestBody defines body for PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId for application/json ContentType.
type PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONRequestBody = PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONBody

// DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONRequestBody defines body for DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealm for application/json ContentType.
type DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONRequestBody = DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONBody

// PostAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONRequestBody defines body for PostAdminRealmsRealmUsersUserIdRoleMappingsRealm for application/json ContentType.
type PostAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONRequestBody = PostAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAdminRealms request
	GetAdminRealms(ctx context.Context, params *GetAdminRealmsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsWithBody request with any body
	PostAdminRealmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealms(ctx context.Context, body PostAdminRealmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealm request
	DeleteAdminRealmsRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealm request
	GetAdminRealmsRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmWithBody request with any body
	PutAdminRealmsRealmWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealm(ctx context.Context, realm string, body PutAdminRealmsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmAdminEvents request
	DeleteAdminRealmsRealmAdminEvents(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAdminEvents request
	GetAdminRealmsRealmAdminEvents(ctx context.Context, realm string, params *GetAdminRealmsRealmAdminEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmAttackDetectionBruteForceUsers request
	DeleteAdminRealmsRealmAttackDetectionBruteForceUsers(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserId request
	DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserId(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAttackDetectionBruteForceUsersUserId request
	GetAdminRealmsRealmAttackDetectionBruteForceUsersUserId(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationAuthenticatorProviders request
	GetAdminRealmsRealmAuthenticationAuthenticatorProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationClientAuthenticatorProviders request
	GetAdminRealmsRealmAuthenticationClientAuthenticatorProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmAuthenticationConfigWithBody request with any body
	PostAdminRealmsRealmAuthenticationConfigWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmAuthenticationConfig(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationConfigDescriptionProviderId request
	GetAdminRealmsRealmAuthenticationConfigDescriptionProviderId(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmAuthenticationConfigId request
	DeleteAdminRealmsRealmAuthenticationConfigId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationConfigId request
	GetAdminRealmsRealmAuthenticationConfigId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmAuthenticationConfigIdWithBody request with any body
	PutAdminRealmsRealmAuthenticationConfigIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmAuthenticationConfigId(ctx context.Context, realm string, id string, body PutAdminRealmsRealmAuthenticationConfigIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmAuthenticationExecutionsWithBody request with any body
	PostAdminRealmsRealmAuthenticationExecutionsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmAuthenticationExecutions(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmAuthenticationExecutionsExecutionId request
	DeleteAdminRealmsRealmAuthenticationExecutionsExecutionId(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationExecutionsExecutionId request
	GetAdminRealmsRealmAuthenticationExecutionsExecutionId(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigWithBody request with any body
	PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigWithBody(ctx context.Context, realm string, executionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfig(ctx context.Context, realm string, executionId string, body PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigId request
	GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigId(ctx context.Context, realm string, executionId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriority request
	PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriority(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriority request
	PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriority(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationFlows request
	GetAdminRealmsRealmAuthenticationFlows(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmAuthenticationFlowsWithBody request with any body
	PostAdminRealmsRealmAuthenticationFlowsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmAuthenticationFlows(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyWithBody request with any body
	PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopy(ctx context.Context, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions request
	GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions(ctx context.Context, realm string, flowAlias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithBody request with any body
	PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions(ctx context.Context, realm string, flowAlias string, body PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBody request with any body
	PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecution(ctx context.Context, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBody request with any body
	PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlow(ctx context.Context, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmAuthenticationFlowsId request
	DeleteAdminRealmsRealmAuthenticationFlowsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationFlowsId request
	GetAdminRealmsRealmAuthenticationFlowsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmAuthenticationFlowsIdWithBody request with any body
	PutAdminRealmsRealmAuthenticationFlowsIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmAuthenticationFlowsId(ctx context.Context, realm string, id string, body PutAdminRealmsRealmAuthenticationFlowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationFormActionProviders request
	GetAdminRealmsRealmAuthenticationFormActionProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationFormProviders request
	GetAdminRealmsRealmAuthenticationFormProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationPerClientConfigDescription request
	GetAdminRealmsRealmAuthenticationPerClientConfigDescription(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmAuthenticationRegisterRequiredActionWithBody request with any body
	PostAdminRealmsRealmAuthenticationRegisterRequiredActionWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmAuthenticationRegisterRequiredAction(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationRegisterRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationRequiredActions request
	GetAdminRealmsRealmAuthenticationRequiredActions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmAuthenticationRequiredActionsAlias request
	DeleteAdminRealmsRealmAuthenticationRequiredActionsAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationRequiredActionsAlias request
	GetAdminRealmsRealmAuthenticationRequiredActionsAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmAuthenticationRequiredActionsAliasWithBody request with any body
	PutAdminRealmsRealmAuthenticationRequiredActionsAliasWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmAuthenticationRequiredActionsAlias(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmAuthenticationRequiredActionsAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfig request
	DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfig(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfig request
	GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfig(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithBody request with any body
	PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfig(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescription request
	GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescription(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriority request
	PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriority(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriority request
	PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriority(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmAuthenticationUnregisteredRequiredActions request
	GetAdminRealmsRealmAuthenticationUnregisteredRequiredActions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientDescriptionConverterWithBody request with any body
	PostAdminRealmsRealmClientDescriptionConverterWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientDescriptionConverter(ctx context.Context, realm string, body PostAdminRealmsRealmClientDescriptionConverterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientDescriptionConverterWithTextBody(ctx context.Context, realm string, body PostAdminRealmsRealmClientDescriptionConverterTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientPoliciesPolicies request
	GetAdminRealmsRealmClientPoliciesPolicies(ctx context.Context, realm string, params *GetAdminRealmsRealmClientPoliciesPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientPoliciesPoliciesWithBody request with any body
	PutAdminRealmsRealmClientPoliciesPoliciesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientPoliciesPolicies(ctx context.Context, realm string, body PutAdminRealmsRealmClientPoliciesPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientPoliciesProfiles request
	GetAdminRealmsRealmClientPoliciesProfiles(ctx context.Context, realm string, params *GetAdminRealmsRealmClientPoliciesProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientPoliciesProfilesWithBody request with any body
	PutAdminRealmsRealmClientPoliciesProfilesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientPoliciesProfiles(ctx context.Context, realm string, body PutAdminRealmsRealmClientPoliciesProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientRegistrationPolicyProviders request
	GetAdminRealmsRealmClientRegistrationPolicyProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientScopes request
	GetAdminRealmsRealmClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientScopesWithBody request with any body
	PostAdminRealmsRealmClientScopesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientScopes(ctx context.Context, realm string, body PostAdminRealmsRealmClientScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientScopesClientScopeId request
	DeleteAdminRealmsRealmClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientScopesClientScopeId request
	GetAdminRealmsRealmClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientScopesClientScopeIdWithBody request with any body
	PutAdminRealmsRealmClientScopesClientScopeIdWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, body PutAdminRealmsRealmClientScopesClientScopeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsWithBody request with any body
	PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModels(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels request
	GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithBody request with any body
	PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId request
	DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId request
	GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithBody request with any body
	PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithBody(ctx context.Context, realm string, clientScopeId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId(ctx context.Context, realm string, clientScopeId string, id string, body PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocol request
	GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocol(ctx context.Context, realm string, clientScopeId string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappings request
	GetAdminRealmsRealmClientScopesClientScopeIdScopeMappings(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBody request with any body
	DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient(ctx context.Context, realm string, clientScopeId string, client string, body DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient request
	GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBody request with any body
	PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient(ctx context.Context, realm string, clientScopeId string, client string, body PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailable request
	GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailable(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientComposite request
	GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientComposite(ctx context.Context, realm string, clientScopeId string, client string, params *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBody request with any body
	DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm(ctx context.Context, realm string, clientScopeId string, body DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm request
	GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBody request with any body
	PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailable request
	GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailable(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmComposite request
	GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmComposite(ctx context.Context, realm string, clientScopeId string, params *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientSessionStats request
	GetAdminRealmsRealmClientSessionStats(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientTemplates request
	GetAdminRealmsRealmClientTemplates(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientTemplatesWithBody request with any body
	PostAdminRealmsRealmClientTemplatesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientTemplates(ctx context.Context, realm string, body PostAdminRealmsRealmClientTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientTemplatesClientScopeId request
	DeleteAdminRealmsRealmClientTemplatesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeId request
	GetAdminRealmsRealmClientTemplatesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientTemplatesClientScopeIdWithBody request with any body
	PutAdminRealmsRealmClientTemplatesClientScopeIdWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientTemplatesClientScopeId(ctx context.Context, realm string, clientScopeId string, body PutAdminRealmsRealmClientTemplatesClientScopeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsWithBody request with any body
	PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModels(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels request
	GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithBody request with any body
	PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId request
	DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId request
	GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithBody request with any body
	PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithBody(ctx context.Context, realm string, clientScopeId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId(ctx context.Context, realm string, clientScopeId string, id string, body PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocol request
	GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocol(ctx context.Context, realm string, clientScopeId string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappings request
	GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappings(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBody request with any body
	DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient(ctx context.Context, realm string, clientScopeId string, client string, body DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient request
	GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBody request with any body
	PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient(ctx context.Context, realm string, clientScopeId string, client string, body PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailable request
	GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailable(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientComposite request
	GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientComposite(ctx context.Context, realm string, clientScopeId string, client string, params *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBody request with any body
	DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm(ctx context.Context, realm string, clientScopeId string, body DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm request
	GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBody request with any body
	PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailable request
	GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailable(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmComposite request
	GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmComposite(ctx context.Context, realm string, clientScopeId string, params *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientTypes request
	GetAdminRealmsRealmClientTypes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientTypesWithBody request with any body
	PutAdminRealmsRealmClientTypesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientTypes(ctx context.Context, realm string, body PutAdminRealmsRealmClientTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClients request
	GetAdminRealmsRealmClients(ctx context.Context, realm string, params *GetAdminRealmsRealmClientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsWithBody request with any body
	PostAdminRealmsRealmClientsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClients(ctx context.Context, realm string, body PostAdminRealmsRealmClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsInitialAccess request
	GetAdminRealmsRealmClientsInitialAccess(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsInitialAccessWithBody request with any body
	PostAdminRealmsRealmClientsInitialAccessWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsInitialAccess(ctx context.Context, realm string, body PostAdminRealmsRealmClientsInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientsInitialAccessId request
	DeleteAdminRealmsRealmClientsInitialAccessId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientsClientUuid request
	DeleteAdminRealmsRealmClientsClientUuid(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuid request
	GetAdminRealmsRealmClientsClientUuid(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientsClientUuidWithBody request with any body
	PutAdminRealmsRealmClientsClientUuidWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientsClientUuid(ctx context.Context, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServer request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServer(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientsClientUuidAuthzResourceServerWithBody request with any body
	PutAdminRealmsRealmClientsClientUuidAuthzResourceServerWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientsClientUuidAuthzResourceServer(ctx context.Context, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImport(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResource request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResource(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithBody(ctx context.Context, realm string, clientUuid string, params *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResource(ctx context.Context, realm string, clientUuid string, params *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId request
	DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId(ctx context.Context, realm string, clientUuid string, resourceId string, params *DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithBody request with any body
	PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithBody(ctx context.Context, realm string, clientUuid string, resourceId string, params *PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId(ctx context.Context, realm string, clientUuid string, resourceId string, params *PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScope request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScope(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScope(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId request
	DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithBody request with any body
	PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithBody(ctx context.Context, realm string, clientUuid string, scopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId(ctx context.Context, realm string, clientUuid string, scopeId string, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidCertificatesAttr request
	GetAdminRealmsRealmClientsClientUuidCertificatesAttr(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadWithBody(ctx context.Context, realm string, clientUuid string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownload(ctx context.Context, realm string, clientUuid string, attr string, body PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerate request
	PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerate(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadWithBody(ctx context.Context, realm string, clientUuid string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownload(ctx context.Context, realm string, clientUuid string, attr string, body PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidCertificatesAttrUpload request
	PostAdminRealmsRealmClientsClientUuidCertificatesAttrUpload(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificate request
	PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificate(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidClientSecret request
	GetAdminRealmsRealmClientsClientUuidClientSecret(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidClientSecret request
	PostAdminRealmsRealmClientsClientUuidClientSecret(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientsClientUuidClientSecretRotated request
	DeleteAdminRealmsRealmClientsClientUuidClientSecretRotated(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidClientSecretRotated request
	GetAdminRealmsRealmClientsClientUuidClientSecretRotated(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidDefaultClientScopes request
	GetAdminRealmsRealmClientsClientUuidDefaultClientScopes(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId request
	DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId request
	PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken request
	GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken request
	GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo request
	GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers request
	GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted request
	GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted(ctx context.Context, realm string, clientUuid string, roleContainerId string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted request
	GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted(ctx context.Context, realm string, clientUuid string, roleContainerId string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId request
	GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId(ctx context.Context, realm string, clientUuid string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidManagementPermissions request
	GetAdminRealmsRealmClientsClientUuidManagementPermissions(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientsClientUuidManagementPermissionsWithBody request with any body
	PutAdminRealmsRealmClientsClientUuidManagementPermissionsWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientsClientUuidManagementPermissions(ctx context.Context, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidNodesWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidNodesWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidNodes(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientsClientUuidNodesNode request
	DeleteAdminRealmsRealmClientsClientUuidNodesNode(ctx context.Context, realm string, clientUuid string, node string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidOfflineSessionCount request
	GetAdminRealmsRealmClientsClientUuidOfflineSessionCount(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidOfflineSessions request
	GetAdminRealmsRealmClientsClientUuidOfflineSessions(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidOptionalClientScopes request
	GetAdminRealmsRealmClientsClientUuidOptionalClientScopes(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId request
	DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId request
	PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModels(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidProtocolMappersModels request
	GetAdminRealmsRealmClientsClientUuidProtocolMappersModels(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidProtocolMappersModels(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsId request
	DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsId(ctx context.Context, realm string, clientUuid string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsId request
	GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsId(ctx context.Context, realm string, clientUuid string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithBody request with any body
	PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithBody(ctx context.Context, realm string, clientUuid string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsId(ctx context.Context, realm string, clientUuid string, id string, body PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocol request
	GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocol(ctx context.Context, realm string, clientUuid string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidPushRevocation request
	PostAdminRealmsRealmClientsClientUuidPushRevocation(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidRegistrationAccessToken request
	PostAdminRealmsRealmClientsClientUuidRegistrationAccessToken(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidRoles request
	GetAdminRealmsRealmClientsClientUuidRoles(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidRolesWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidRolesWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidRoles(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientsClientUuidRolesRoleName request
	DeleteAdminRealmsRealmClientsClientUuidRolesRoleName(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidRolesRoleName request
	GetAdminRealmsRealmClientsClientUuidRolesRoleName(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientsClientUuidRolesRoleNameWithBody request with any body
	PutAdminRealmsRealmClientsClientUuidRolesRoleNameWithBody(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientsClientUuidRolesRoleName(ctx context.Context, realm string, clientUuid string, roleName string, body PutAdminRealmsRealmClientsClientUuidRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBody request with any body
	DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBody(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameComposites(ctx context.Context, realm string, clientUuid string, roleName string, body DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidRolesRoleNameComposites request
	GetAdminRealmsRealmClientsClientUuidRolesRoleNameComposites(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBody(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidRolesRoleNameComposites(ctx context.Context, realm string, clientUuid string, roleName string, body PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2Uuid request
	GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2Uuid(ctx context.Context, realm string, clientUuid string, roleName string, client2Uuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealm request
	GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealm(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroups request
	GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroups(ctx context.Context, realm string, clientUuid string, roleName string, params *GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions request
	GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithBody request with any body
	PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithBody(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions(ctx context.Context, realm string, clientUuid string, roleName string, body PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsers request
	GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsers(ctx context.Context, realm string, clientUuid string, roleName string, params *GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidScopeMappings request
	GetAdminRealmsRealmClientsClientUuidScopeMappings(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBody request with any body
	DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBody(ctx context.Context, realm string, clientUuid string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient(ctx context.Context, realm string, clientUuid string, client string, body DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient request
	GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient(ctx context.Context, realm string, clientUuid string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBody(ctx context.Context, realm string, clientUuid string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient(ctx context.Context, realm string, clientUuid string, client string, body PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailable request
	GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailable(ctx context.Context, realm string, clientUuid string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientComposite request
	GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientComposite(ctx context.Context, realm string, clientUuid string, client string, params *GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBody request with any body
	DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealm(ctx context.Context, realm string, clientUuid string, body DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidScopeMappingsRealm request
	GetAdminRealmsRealmClientsClientUuidScopeMappingsRealm(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBody request with any body
	PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmClientsClientUuidScopeMappingsRealm(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailable request
	GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailable(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmComposite request
	GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmComposite(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidServiceAccountUser request
	GetAdminRealmsRealmClientsClientUuidServiceAccountUser(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidSessionCount request
	GetAdminRealmsRealmClientsClientUuidSessionCount(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidTestNodesAvailable request
	GetAdminRealmsRealmClientsClientUuidTestNodesAvailable(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmClientsClientUuidUserSessions request
	GetAdminRealmsRealmClientsClientUuidUserSessions(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidUserSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmComponents request
	GetAdminRealmsRealmComponents(ctx context.Context, realm string, params *GetAdminRealmsRealmComponentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmComponentsWithBody request with any body
	PostAdminRealmsRealmComponentsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmComponents(ctx context.Context, realm string, body PostAdminRealmsRealmComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmComponentsId request
	DeleteAdminRealmsRealmComponentsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmComponentsId request
	GetAdminRealmsRealmComponentsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmComponentsIdWithBody request with any body
	PutAdminRealmsRealmComponentsIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmComponentsId(ctx context.Context, realm string, id string, body PutAdminRealmsRealmComponentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmComponentsIdSubComponentTypes request
	GetAdminRealmsRealmComponentsIdSubComponentTypes(ctx context.Context, realm string, id string, params *GetAdminRealmsRealmComponentsIdSubComponentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmCredentialRegistrators request
	GetAdminRealmsRealmCredentialRegistrators(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmDefaultDefaultClientScopes request
	GetAdminRealmsRealmDefaultDefaultClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId request
	DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeId request
	PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmDefaultGroups request
	GetAdminRealmsRealmDefaultGroups(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmDefaultGroupsGroupId request
	DeleteAdminRealmsRealmDefaultGroupsGroupId(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmDefaultGroupsGroupId request
	PutAdminRealmsRealmDefaultGroupsGroupId(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmDefaultOptionalClientScopes request
	GetAdminRealmsRealmDefaultOptionalClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId request
	DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeId request
	PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmEvents request
	DeleteAdminRealmsRealmEvents(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmEvents request
	GetAdminRealmsRealmEvents(ctx context.Context, realm string, params *GetAdminRealmsRealmEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmEventsConfig request
	GetAdminRealmsRealmEventsConfig(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmEventsConfigWithBody request with any body
	PutAdminRealmsRealmEventsConfigWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmEventsConfig(ctx context.Context, realm string, body PutAdminRealmsRealmEventsConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmGroupByPathPath request
	GetAdminRealmsRealmGroupByPathPath(ctx context.Context, realm string, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmGroups request
	GetAdminRealmsRealmGroups(ctx context.Context, realm string, params *GetAdminRealmsRealmGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmGroupsWithBody request with any body
	PostAdminRealmsRealmGroupsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmGroups(ctx context.Context, realm string, body PostAdminRealmsRealmGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmGroupsCount request
	GetAdminRealmsRealmGroupsCount(ctx context.Context, realm string, params *GetAdminRealmsRealmGroupsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmGroupsGroupId request
	DeleteAdminRealmsRealmGroupsGroupId(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmGroupsGroupId request
	GetAdminRealmsRealmGroupsGroupId(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmGroupsGroupIdWithBody request with any body
	PutAdminRealmsRealmGroupsGroupIdWithBody(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmGroupsGroupId(ctx context.Context, realm string, groupId string, body PutAdminRealmsRealmGroupsGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmGroupsGroupIdChildren request
	GetAdminRealmsRealmGroupsGroupIdChildren(ctx context.Context, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdChildrenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmGroupsGroupIdChildrenWithBody request with any body
	PostAdminRealmsRealmGroupsGroupIdChildrenWithBody(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmGroupsGroupIdChildren(ctx context.Context, realm string, groupId string, body PostAdminRealmsRealmGroupsGroupIdChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmGroupsGroupIdManagementPermissions request
	GetAdminRealmsRealmGroupsGroupIdManagementPermissions(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmGroupsGroupIdManagementPermissionsWithBody request with any body
	PutAdminRealmsRealmGroupsGroupIdManagementPermissionsWithBody(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmGroupsGroupIdManagementPermissions(ctx context.Context, realm string, groupId string, body PutAdminRealmsRealmGroupsGroupIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmGroupsGroupIdMembers request
	GetAdminRealmsRealmGroupsGroupIdMembers(ctx context.Context, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmGroupsGroupIdRoleMappings request
	GetAdminRealmsRealmGroupsGroupIdRoleMappings(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBody request with any body
	DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBody(ctx context.Context, realm string, groupId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId(ctx context.Context, realm string, groupId string, clientId string, body DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId request
	GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId(ctx context.Context, realm string, groupId string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBody request with any body
	PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBody(ctx context.Context, realm string, groupId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId(ctx context.Context, realm string, groupId string, clientId string, body PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable request
	GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable(ctx context.Context, realm string, groupId string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite request
	GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite(ctx context.Context, realm string, groupId string, clientId string, params *GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBody request with any body
	DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBody(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealm(ctx context.Context, realm string, groupId string, body DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealm request
	GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealm(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBody request with any body
	PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBody(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealm(ctx context.Context, realm string, groupId string, body PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailable request
	GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailable(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmComposite request
	GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmComposite(ctx context.Context, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmIdentityProviderImportConfigWithBody request with any body
	PostAdminRealmsRealmIdentityProviderImportConfigWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmIdentityProviderImportConfig(ctx context.Context, realm string, body PostAdminRealmsRealmIdentityProviderImportConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmIdentityProviderInstances request
	GetAdminRealmsRealmIdentityProviderInstances(ctx context.Context, realm string, params *GetAdminRealmsRealmIdentityProviderInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmIdentityProviderInstancesWithBody request with any body
	PostAdminRealmsRealmIdentityProviderInstancesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmIdentityProviderInstances(ctx context.Context, realm string, body PostAdminRealmsRealmIdentityProviderInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmIdentityProviderInstancesAlias request
	DeleteAdminRealmsRealmIdentityProviderInstancesAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmIdentityProviderInstancesAlias request
	GetAdminRealmsRealmIdentityProviderInstancesAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmIdentityProviderInstancesAliasWithBody request with any body
	PutAdminRealmsRealmIdentityProviderInstancesAliasWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmIdentityProviderInstancesAlias(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmIdentityProviderInstancesAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmIdentityProviderInstancesAliasExport request
	GetAdminRealmsRealmIdentityProviderInstancesAliasExport(ctx context.Context, realm string, alias string, params *GetAdminRealmsRealmIdentityProviderInstancesAliasExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions request
	GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithBody request with any body
	PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypes request
	GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypes(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmIdentityProviderInstancesAliasMappers request
	GetAdminRealmsRealmIdentityProviderInstancesAliasMappers(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmIdentityProviderInstancesAliasMappersWithBody request with any body
	PostAdminRealmsRealmIdentityProviderInstancesAliasMappersWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmIdentityProviderInstancesAliasMappers(ctx context.Context, realm string, alias string, body PostAdminRealmsRealmIdentityProviderInstancesAliasMappersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersId request
	DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersId(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmIdentityProviderInstancesAliasMappersId request
	GetAdminRealmsRealmIdentityProviderInstancesAliasMappersId(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithBody request with any body
	PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithBody(ctx context.Context, realm string, alias string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmIdentityProviderInstancesAliasMappersId(ctx context.Context, realm string, alias string, id string, body PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeys request
	GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeys(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmIdentityProviderProvidersProviderId request
	GetAdminRealmsRealmIdentityProviderProvidersProviderId(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmKeys request
	GetAdminRealmsRealmKeys(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmLocalization request
	GetAdminRealmsRealmLocalization(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmLocalizationLocale request
	DeleteAdminRealmsRealmLocalizationLocale(ctx context.Context, realm string, locale string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmLocalizationLocale request
	GetAdminRealmsRealmLocalizationLocale(ctx context.Context, realm string, locale string, params *GetAdminRealmsRealmLocalizationLocaleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmLocalizationLocaleWithBody request with any body
	PostAdminRealmsRealmLocalizationLocaleWithBody(ctx context.Context, realm string, locale string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmLocalizationLocale(ctx context.Context, realm string, locale string, body PostAdminRealmsRealmLocalizationLocaleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmLocalizationLocaleKey request
	DeleteAdminRealmsRealmLocalizationLocaleKey(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmLocalizationLocaleKey request
	GetAdminRealmsRealmLocalizationLocaleKey(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmLocalizationLocaleKeyWithBody request with any body
	PutAdminRealmsRealmLocalizationLocaleKeyWithBody(ctx context.Context, realm string, locale string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmLocalizationLocaleKeyWithTextBody(ctx context.Context, realm string, locale string, key string, body PutAdminRealmsRealmLocalizationLocaleKeyTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmLogoutAll request
	PostAdminRealmsRealmLogoutAll(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmOrganizations request
	GetAdminRealmsRealmOrganizations(ctx context.Context, realm string, params *GetAdminRealmsRealmOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmOrganizationsWithBody request with any body
	PostAdminRealmsRealmOrganizationsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmOrganizations(ctx context.Context, realm string, body PostAdminRealmsRealmOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmOrganizationsMembersIdOrganizations request
	GetAdminRealmsRealmOrganizationsMembersIdOrganizations(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmOrganizationsId request
	DeleteAdminRealmsRealmOrganizationsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmOrganizationsId request
	GetAdminRealmsRealmOrganizationsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmOrganizationsIdWithBody request with any body
	PutAdminRealmsRealmOrganizationsIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmOrganizationsId(ctx context.Context, realm string, id string, body PutAdminRealmsRealmOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmOrganizationsIdIdentityProviders request
	GetAdminRealmsRealmOrganizationsIdIdentityProviders(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmOrganizationsIdIdentityProvidersWithBody request with any body
	PostAdminRealmsRealmOrganizationsIdIdentityProvidersWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmOrganizationsIdIdentityProviders(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdIdentityProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAlias request
	DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAlias(ctx context.Context, realm string, id string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmOrganizationsIdIdentityProvidersAlias request
	GetAdminRealmsRealmOrganizationsIdIdentityProvidersAlias(ctx context.Context, realm string, id string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmOrganizationsIdMembers request
	GetAdminRealmsRealmOrganizationsIdMembers(ctx context.Context, realm string, id string, params *GetAdminRealmsRealmOrganizationsIdMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmOrganizationsIdMembersWithBody request with any body
	PostAdminRealmsRealmOrganizationsIdMembersWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmOrganizationsIdMembers(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmOrganizationsIdMembersCount request
	GetAdminRealmsRealmOrganizationsIdMembersCount(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserWithBody request with any body
	PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserWithFormdataBody(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmOrganizationsIdMembersInviteUserWithBody request with any body
	PostAdminRealmsRealmOrganizationsIdMembersInviteUserWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmOrganizationsIdMembersInviteUserWithFormdataBody(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersInviteUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmOrganizationsIdMembersMemberId request
	DeleteAdminRealmsRealmOrganizationsIdMembersMemberId(ctx context.Context, realm string, id string, memberId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmOrganizationsIdMembersMemberId request
	GetAdminRealmsRealmOrganizationsIdMembersMemberId(ctx context.Context, realm string, id string, memberId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizations request
	GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizations(ctx context.Context, realm string, id string, memberId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmPartialExport request
	PostAdminRealmsRealmPartialExport(ctx context.Context, realm string, params *PostAdminRealmsRealmPartialExportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmPartialImportWithBody request with any body
	PostAdminRealmsRealmPartialImportWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmPartialImport(ctx context.Context, realm string, body PostAdminRealmsRealmPartialImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmPushRevocation request
	PostAdminRealmsRealmPushRevocation(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmRoles request
	GetAdminRealmsRealmRoles(ctx context.Context, realm string, params *GetAdminRealmsRealmRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmRolesWithBody request with any body
	PostAdminRealmsRealmRolesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmRoles(ctx context.Context, realm string, body PostAdminRealmsRealmRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmRolesByIdRoleId request
	DeleteAdminRealmsRealmRolesByIdRoleId(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmRolesByIdRoleId request
	GetAdminRealmsRealmRolesByIdRoleId(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmRolesByIdRoleIdWithBody request with any body
	PutAdminRealmsRealmRolesByIdRoleIdWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmRolesByIdRoleId(ctx context.Context, realm string, roleId string, body PutAdminRealmsRealmRolesByIdRoleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmRolesByIdRoleIdCompositesWithBody request with any body
	DeleteAdminRealmsRealmRolesByIdRoleIdCompositesWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAdminRealmsRealmRolesByIdRoleIdComposites(ctx context.Context, realm string, roleId string, body DeleteAdminRealmsRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmRolesByIdRoleIdComposites request
	GetAdminRealmsRealmRolesByIdRoleIdComposites(ctx context.Context, realm string, roleId string, params *GetAdminRealmsRealmRolesByIdRoleIdCompositesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmRolesByIdRoleIdCompositesWithBody request with any body
	PostAdminRealmsRealmRolesByIdRoleIdCompositesWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmRolesByIdRoleIdComposites(ctx context.Context, realm string, roleId string, body PostAdminRealmsRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuid request
	GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuid(ctx context.Context, realm string, roleId string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmRolesByIdRoleIdCompositesRealm request
	GetAdminRealmsRealmRolesByIdRoleIdCompositesRealm(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmRolesByIdRoleIdManagementPermissions request
	GetAdminRealmsRealmRolesByIdRoleIdManagementPermissions(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithBody request with any body
	PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmRolesByIdRoleIdManagementPermissions(ctx context.Context, realm string, roleId string, body PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmRolesRoleName request
	DeleteAdminRealmsRealmRolesRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmRolesRoleName request
	GetAdminRealmsRealmRolesRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmRolesRoleNameWithBody request with any body
	PutAdminRealmsRealmRolesRoleNameWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmRolesRoleName(ctx context.Context, realm string, roleName string, body PutAdminRealmsRealmRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmRolesRoleNameCompositesWithBody request with any body
	DeleteAdminRealmsRealmRolesRoleNameCompositesWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAdminRealmsRealmRolesRoleNameComposites(ctx context.Context, realm string, roleName string, body DeleteAdminRealmsRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmRolesRoleNameComposites request
	GetAdminRealmsRealmRolesRoleNameComposites(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmRolesRoleNameCompositesWithBody request with any body
	PostAdminRealmsRealmRolesRoleNameCompositesWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmRolesRoleNameComposites(ctx context.Context, realm string, roleName string, body PostAdminRealmsRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuid request
	GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuid(ctx context.Context, realm string, roleName string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmRolesRoleNameCompositesRealm request
	GetAdminRealmsRealmRolesRoleNameCompositesRealm(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmRolesRoleNameGroups request
	GetAdminRealmsRealmRolesRoleNameGroups(ctx context.Context, realm string, roleName string, params *GetAdminRealmsRealmRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmRolesRoleNameManagementPermissions request
	GetAdminRealmsRealmRolesRoleNameManagementPermissions(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmRolesRoleNameManagementPermissionsWithBody request with any body
	PutAdminRealmsRealmRolesRoleNameManagementPermissionsWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmRolesRoleNameManagementPermissions(ctx context.Context, realm string, roleName string, body PutAdminRealmsRealmRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmRolesRoleNameUsers request
	GetAdminRealmsRealmRolesRoleNameUsers(ctx context.Context, realm string, roleName string, params *GetAdminRealmsRealmRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmSessionsSession request
	DeleteAdminRealmsRealmSessionsSession(ctx context.Context, realm string, session string, params *DeleteAdminRealmsRealmSessionsSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmTestSMTPConnectionWithBody request with any body
	PostAdminRealmsRealmTestSMTPConnectionWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmTestSMTPConnection(ctx context.Context, realm string, body PostAdminRealmsRealmTestSMTPConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmTestSMTPConnectionWithFormdataBody(ctx context.Context, realm string, body PostAdminRealmsRealmTestSMTPConnectionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsers request
	GetAdminRealmsRealmUsers(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmUsersWithBody request with any body
	PostAdminRealmsRealmUsersWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmUsers(ctx context.Context, realm string, body PostAdminRealmsRealmUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersManagementPermissions request
	GetAdminRealmsRealmUsersManagementPermissions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersManagementPermissionsWithBody request with any body
	PutAdminRealmsRealmUsersManagementPermissionsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmUsersManagementPermissions(ctx context.Context, realm string, body PutAdminRealmsRealmUsersManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersCount request
	GetAdminRealmsRealmUsersCount(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersProfile request
	GetAdminRealmsRealmUsersProfile(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersProfileWithBody request with any body
	PutAdminRealmsRealmUsersProfileWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmUsersProfile(ctx context.Context, realm string, body PutAdminRealmsRealmUsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersProfileMetadata request
	GetAdminRealmsRealmUsersProfileMetadata(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmUsersUserId request
	DeleteAdminRealmsRealmUsersUserId(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserId request
	GetAdminRealmsRealmUsersUserId(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdWithBody request with any body
	PutAdminRealmsRealmUsersUserIdWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmUsersUserId(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypes request
	GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypes(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdConsents request
	GetAdminRealmsRealmUsersUserIdConsents(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmUsersUserIdConsentsClient request
	DeleteAdminRealmsRealmUsersUserIdConsentsClient(ctx context.Context, realm string, userId string, client string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdCredentials request
	GetAdminRealmsRealmUsersUserIdCredentials(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialId request
	DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialId(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId request
	PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId(ctx context.Context, realm string, userId string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirst request
	PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirst(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBody request with any body
	PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBody(ctx context.Context, realm string, userId string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithTextBody(ctx context.Context, realm string, userId string, credentialId string, body PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBody request with any body
	PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmUsersUserIdDisableCredentialTypes(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBody request with any body
	PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBody(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmUsersUserIdExecuteActionsEmail(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, body PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdFederatedIdentity request
	GetAdminRealmsRealmUsersUserIdFederatedIdentity(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProvider request
	DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProvider(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmUsersUserIdFederatedIdentityProvider request
	PostAdminRealmsRealmUsersUserIdFederatedIdentityProvider(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdGroups request
	GetAdminRealmsRealmUsersUserIdGroups(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdGroupsCount request
	GetAdminRealmsRealmUsersUserIdGroupsCount(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmUsersUserIdGroupsGroupId request
	DeleteAdminRealmsRealmUsersUserIdGroupsGroupId(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdGroupsGroupId request
	PutAdminRealmsRealmUsersUserIdGroupsGroupId(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmUsersUserIdImpersonation request
	PostAdminRealmsRealmUsersUserIdImpersonation(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmUsersUserIdLogout request
	PostAdminRealmsRealmUsersUserIdLogout(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuid request
	GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuid(ctx context.Context, realm string, userId string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdResetPasswordWithBody request with any body
	PutAdminRealmsRealmUsersUserIdResetPasswordWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAdminRealmsRealmUsersUserIdResetPassword(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdResetPasswordEmail request
	PutAdminRealmsRealmUsersUserIdResetPasswordEmail(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdRoleMappings request
	GetAdminRealmsRealmUsersUserIdRoleMappings(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBody request with any body
	DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBody(ctx context.Context, realm string, userId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId(ctx context.Context, realm string, userId string, clientId string, body DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId request
	GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId(ctx context.Context, realm string, userId string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBody request with any body
	PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBody(ctx context.Context, realm string, userId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId(ctx context.Context, realm string, userId string, clientId string, body PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable request
	GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable(ctx context.Context, realm string, userId string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite request
	GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite(ctx context.Context, realm string, userId string, clientId string, params *GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBody request with any body
	DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealm(ctx context.Context, realm string, userId string, body DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdRoleMappingsRealm request
	GetAdminRealmsRealmUsersUserIdRoleMappingsRealm(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBody request with any body
	PostAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAdminRealmsRealmUsersUserIdRoleMappingsRealm(ctx context.Context, realm string, userId string, body PostAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailable request
	GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailable(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdRoleMappingsRealmComposite request
	GetAdminRealmsRealmUsersUserIdRoleMappingsRealmComposite(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminRealmsRealmUsersUserIdSendVerifyEmail request
	PutAdminRealmsRealmUsersUserIdSendVerifyEmail(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdSessions request
	GetAdminRealmsRealmUsersUserIdSessions(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminRealmsRealmUsersUserIdUnmanagedAttributes request
	GetAdminRealmsRealmUsersUserIdUnmanagedAttributes(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAdminRealms(ctx context.Context, params *GetAdminRealmsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealms(ctx context.Context, body PostAdminRealmsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealm(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealm(ctx context.Context, realm string, body PutAdminRealmsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmAdminEvents(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmAdminEventsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAdminEvents(ctx context.Context, realm string, params *GetAdminRealmsRealmAdminEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAdminEventsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmAttackDetectionBruteForceUsers(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmAttackDetectionBruteForceUsersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserId(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAttackDetectionBruteForceUsersUserId(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationAuthenticatorProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationAuthenticatorProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationClientAuthenticatorProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationConfigWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationConfigRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationConfig(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationConfigRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationConfigDescriptionProviderId(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdRequest(c.Server, realm, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmAuthenticationConfigId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmAuthenticationConfigIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationConfigId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationConfigIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmAuthenticationConfigIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmAuthenticationConfigIdRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmAuthenticationConfigId(ctx context.Context, realm string, id string, body PutAdminRealmsRealmAuthenticationConfigIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmAuthenticationConfigIdRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationExecutionsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationExecutionsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationExecutions(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationExecutionsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmAuthenticationExecutionsExecutionId(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdRequest(c.Server, realm, executionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationExecutionsExecutionId(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationExecutionsExecutionIdRequest(c.Server, realm, executionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigWithBody(ctx context.Context, realm string, executionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigRequestWithBody(c.Server, realm, executionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfig(ctx context.Context, realm string, executionId string, body PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigRequest(c.Server, realm, executionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigId(ctx context.Context, realm string, executionId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdRequest(c.Server, realm, executionId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriority(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityRequest(c.Server, realm, executionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriority(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityRequest(c.Server, realm, executionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationFlows(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationFlowsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationFlowsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationFlowsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationFlows(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationFlowsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyRequestWithBody(c.Server, realm, flowAlias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopy(ctx context.Context, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyRequest(c.Server, realm, flowAlias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions(ctx context.Context, realm string, flowAlias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsRequest(c.Server, realm, flowAlias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsRequestWithBody(c.Server, realm, flowAlias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions(ctx context.Context, realm string, flowAlias string, body PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsRequest(c.Server, realm, flowAlias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequestWithBody(c.Server, realm, flowAlias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecution(ctx context.Context, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequest(c.Server, realm, flowAlias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBody(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowRequestWithBody(c.Server, realm, flowAlias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlow(ctx context.Context, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowRequest(c.Server, realm, flowAlias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmAuthenticationFlowsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmAuthenticationFlowsIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationFlowsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationFlowsIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmAuthenticationFlowsIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmAuthenticationFlowsIdRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmAuthenticationFlowsId(ctx context.Context, realm string, id string, body PutAdminRealmsRealmAuthenticationFlowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmAuthenticationFlowsIdRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationFormActionProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationFormActionProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationFormProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationFormProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationPerClientConfigDescription(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationPerClientConfigDescriptionRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationRegisterRequiredActionWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationRegisterRequiredActionRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationRegisterRequiredAction(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationRegisterRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationRegisterRequiredActionRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationRequiredActions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationRequiredActionsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmAuthenticationRequiredActionsAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmAuthenticationRequiredActionsAliasRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationRequiredActionsAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationRequiredActionsAliasRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmAuthenticationRequiredActionsAliasWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmAuthenticationRequiredActionsAliasRequestWithBody(c.Server, realm, alias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmAuthenticationRequiredActionsAlias(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmAuthenticationRequiredActionsAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmAuthenticationRequiredActionsAliasRequest(c.Server, realm, alias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfig(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfig(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigRequestWithBody(c.Server, realm, alias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfig(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigRequest(c.Server, realm, alias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescription(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriority(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriority(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmAuthenticationUnregisteredRequiredActions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientDescriptionConverterWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientDescriptionConverterRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientDescriptionConverter(ctx context.Context, realm string, body PostAdminRealmsRealmClientDescriptionConverterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientDescriptionConverterRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientDescriptionConverterWithTextBody(ctx context.Context, realm string, body PostAdminRealmsRealmClientDescriptionConverterTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientDescriptionConverterRequestWithTextBody(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientPoliciesPolicies(ctx context.Context, realm string, params *GetAdminRealmsRealmClientPoliciesPoliciesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientPoliciesPoliciesRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientPoliciesPoliciesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientPoliciesPoliciesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientPoliciesPolicies(ctx context.Context, realm string, body PutAdminRealmsRealmClientPoliciesPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientPoliciesPoliciesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientPoliciesProfiles(ctx context.Context, realm string, params *GetAdminRealmsRealmClientPoliciesProfilesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientPoliciesProfilesRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientPoliciesProfilesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientPoliciesProfilesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientPoliciesProfiles(ctx context.Context, realm string, body PutAdminRealmsRealmClientPoliciesProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientPoliciesProfilesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientRegistrationPolicyProviders(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientRegistrationPolicyProvidersRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientScopesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientScopesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientScopesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientScopes(ctx context.Context, realm string, body PostAdminRealmsRealmClientScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientScopesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientScopesClientScopeIdRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientScopesClientScopeIdRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientScopesClientScopeIdWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientScopesClientScopeIdRequestWithBody(c.Server, realm, clientScopeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, body PutAdminRealmsRealmClientScopesClientScopeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientScopesClientScopeIdRequest(c.Server, realm, clientScopeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsRequestWithBody(c.Server, realm, clientScopeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModels(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsRequest(c.Server, realm, clientScopeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsRequestWithBody(c.Server, realm, clientScopeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsRequest(c.Server, realm, clientScopeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdRequest(c.Server, realm, clientScopeId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdRequest(c.Server, realm, clientScopeId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithBody(ctx context.Context, realm string, clientScopeId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdRequestWithBody(c.Server, realm, clientScopeId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId(ctx context.Context, realm string, clientScopeId string, id string, body PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdRequest(c.Server, realm, clientScopeId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocol(ctx context.Context, realm string, clientScopeId string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolRequest(c.Server, realm, clientScopeId, protocol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientScopesClientScopeIdScopeMappings(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequestWithBody(c.Server, realm, clientScopeId, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient(ctx context.Context, realm string, clientScopeId string, client string, body DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequest(c.Server, realm, clientScopeId, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequest(c.Server, realm, clientScopeId, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequestWithBody(c.Server, realm, clientScopeId, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient(ctx context.Context, realm string, clientScopeId string, client string, body PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequest(c.Server, realm, clientScopeId, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailable(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableRequest(c.Server, realm, clientScopeId, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientComposite(ctx context.Context, realm string, clientScopeId string, client string, params *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeRequest(c.Server, realm, clientScopeId, client, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequestWithBody(c.Server, realm, clientScopeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm(ctx context.Context, realm string, clientScopeId string, body DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequest(c.Server, realm, clientScopeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequestWithBody(c.Server, realm, clientScopeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequest(c.Server, realm, clientScopeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailable(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmComposite(ctx context.Context, realm string, clientScopeId string, params *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeRequest(c.Server, realm, clientScopeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientSessionStats(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientSessionStatsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientTemplates(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientTemplatesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientTemplatesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientTemplatesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientTemplates(ctx context.Context, realm string, body PostAdminRealmsRealmClientTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientTemplatesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientTemplatesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientTemplatesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientTemplatesClientScopeIdRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientTemplatesClientScopeIdWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientTemplatesClientScopeIdRequestWithBody(c.Server, realm, clientScopeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientTemplatesClientScopeId(ctx context.Context, realm string, clientScopeId string, body PutAdminRealmsRealmClientTemplatesClientScopeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientTemplatesClientScopeIdRequest(c.Server, realm, clientScopeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsRequestWithBody(c.Server, realm, clientScopeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModels(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsRequest(c.Server, realm, clientScopeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsRequestWithBody(c.Server, realm, clientScopeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsRequest(c.Server, realm, clientScopeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdRequest(c.Server, realm, clientScopeId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdRequest(c.Server, realm, clientScopeId, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithBody(ctx context.Context, realm string, clientScopeId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdRequestWithBody(c.Server, realm, clientScopeId, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId(ctx context.Context, realm string, clientScopeId string, id string, body PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdRequest(c.Server, realm, clientScopeId, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocol(ctx context.Context, realm string, clientScopeId string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolRequest(c.Server, realm, clientScopeId, protocol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappings(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequestWithBody(c.Server, realm, clientScopeId, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient(ctx context.Context, realm string, clientScopeId string, client string, body DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequest(c.Server, realm, clientScopeId, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequest(c.Server, realm, clientScopeId, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBody(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequestWithBody(c.Server, realm, clientScopeId, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient(ctx context.Context, realm string, clientScopeId string, client string, body PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequest(c.Server, realm, clientScopeId, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailable(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableRequest(c.Server, realm, clientScopeId, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientComposite(ctx context.Context, realm string, clientScopeId string, client string, params *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeRequest(c.Server, realm, clientScopeId, client, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequestWithBody(c.Server, realm, clientScopeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm(ctx context.Context, realm string, clientScopeId string, body DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequest(c.Server, realm, clientScopeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBody(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequestWithBody(c.Server, realm, clientScopeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequest(c.Server, realm, clientScopeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailable(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmComposite(ctx context.Context, realm string, clientScopeId string, params *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeRequest(c.Server, realm, clientScopeId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientTypes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientTypesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientTypesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientTypesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientTypes(ctx context.Context, realm string, body PutAdminRealmsRealmClientTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientTypesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClients(ctx context.Context, realm string, params *GetAdminRealmsRealmClientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClients(ctx context.Context, realm string, body PostAdminRealmsRealmClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsInitialAccess(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsInitialAccessRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsInitialAccessWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsInitialAccessRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsInitialAccess(ctx context.Context, realm string, body PostAdminRealmsRealmClientsInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsInitialAccessRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsInitialAccessId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsInitialAccessIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuid(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuid(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuid(ctx context.Context, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServer(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidAuthzResourceServerWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidAuthzResourceServer(ctx context.Context, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImport(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResource(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithBody(ctx context.Context, realm string, clientUuid string, params *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceRequestWithBody(c.Server, realm, clientUuid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResource(ctx context.Context, realm string, clientUuid string, params *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceRequest(c.Server, realm, clientUuid, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId(ctx context.Context, realm string, clientUuid string, resourceId string, params *DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdRequest(c.Server, realm, clientUuid, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdRequest(c.Server, realm, clientUuid, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithBody(ctx context.Context, realm string, clientUuid string, resourceId string, params *PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdRequestWithBody(c.Server, realm, clientUuid, resourceId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId(ctx context.Context, realm string, clientUuid string, resourceId string, params *PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdRequest(c.Server, realm, clientUuid, resourceId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesRequest(c.Server, realm, clientUuid, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsRequest(c.Server, realm, clientUuid, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesRequest(c.Server, realm, clientUuid, resourceId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScope(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScope(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdRequest(c.Server, realm, clientUuid, scopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdRequest(c.Server, realm, clientUuid, scopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithBody(ctx context.Context, realm string, clientUuid string, scopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdRequestWithBody(c.Server, realm, clientUuid, scopeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId(ctx context.Context, realm string, clientUuid string, scopeId string, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdRequest(c.Server, realm, clientUuid, scopeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsRequest(c.Server, realm, clientUuid, scopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesRequest(c.Server, realm, clientUuid, scopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidCertificatesAttr(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidCertificatesAttrRequest(c.Server, realm, clientUuid, attr)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadWithBody(ctx context.Context, realm string, clientUuid string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadRequestWithBody(c.Server, realm, clientUuid, attr, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownload(ctx context.Context, realm string, clientUuid string, attr string, body PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadRequest(c.Server, realm, clientUuid, attr, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerate(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateRequest(c.Server, realm, clientUuid, attr)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadWithBody(ctx context.Context, realm string, clientUuid string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadRequestWithBody(c.Server, realm, clientUuid, attr, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownload(ctx context.Context, realm string, clientUuid string, attr string, body PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadRequest(c.Server, realm, clientUuid, attr, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidCertificatesAttrUpload(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadRequest(c.Server, realm, clientUuid, attr)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificate(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateRequest(c.Server, realm, clientUuid, attr)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidClientSecret(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidClientSecretRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidClientSecret(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidClientSecretRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuidClientSecretRotated(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidClientSecretRotated(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidClientSecretRotatedRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidDefaultClientScopes(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidDefaultClientScopesRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdRequest(c.Server, realm, clientUuid, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdRequest(c.Server, realm, clientUuid, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted(ctx context.Context, realm string, clientUuid string, roleContainerId string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedRequest(c.Server, realm, clientUuid, roleContainerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted(ctx context.Context, realm string, clientUuid string, roleContainerId string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedRequest(c.Server, realm, clientUuid, roleContainerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId(ctx context.Context, realm string, clientUuid string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdRequest(c.Server, realm, clientUuid, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidManagementPermissions(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidManagementPermissionsRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidManagementPermissionsWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidManagementPermissionsRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidManagementPermissions(ctx context.Context, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidManagementPermissionsRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidNodesWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidNodesRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidNodes(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidNodesRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuidNodesNode(ctx context.Context, realm string, clientUuid string, node string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidNodesNodeRequest(c.Server, realm, clientUuid, node)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidOfflineSessionCount(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidOfflineSessionCountRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidOfflineSessions(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidOfflineSessionsRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidOptionalClientScopes(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidOptionalClientScopesRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdRequest(c.Server, realm, clientUuid, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdRequest(c.Server, realm, clientUuid, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModels(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidProtocolMappersModels(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidProtocolMappersModelsRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidProtocolMappersModelsRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidProtocolMappersModels(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidProtocolMappersModelsRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsId(ctx context.Context, realm string, clientUuid string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdRequest(c.Server, realm, clientUuid, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsId(ctx context.Context, realm string, clientUuid string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdRequest(c.Server, realm, clientUuid, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithBody(ctx context.Context, realm string, clientUuid string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdRequestWithBody(c.Server, realm, clientUuid, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsId(ctx context.Context, realm string, clientUuid string, id string, body PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdRequest(c.Server, realm, clientUuid, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocol(ctx context.Context, realm string, clientUuid string, protocol string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolRequest(c.Server, realm, clientUuid, protocol)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidPushRevocation(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidPushRevocationRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidRegistrationAccessToken(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidRoles(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidRolesRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidRolesWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidRolesRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidRoles(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidRolesRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuidRolesRoleName(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameRequest(c.Server, realm, clientUuid, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidRolesRoleName(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameRequest(c.Server, realm, clientUuid, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidRolesRoleNameWithBody(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidRolesRoleNameRequestWithBody(c.Server, realm, clientUuid, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidRolesRoleName(ctx context.Context, realm string, clientUuid string, roleName string, body PutAdminRealmsRealmClientsClientUuidRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidRolesRoleNameRequest(c.Server, realm, clientUuid, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBody(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequestWithBody(c.Server, realm, clientUuid, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameComposites(ctx context.Context, realm string, clientUuid string, roleName string, body DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequest(c.Server, realm, clientUuid, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidRolesRoleNameComposites(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequest(c.Server, realm, clientUuid, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBody(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequestWithBody(c.Server, realm, clientUuid, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidRolesRoleNameComposites(ctx context.Context, realm string, clientUuid string, roleName string, body PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequest(c.Server, realm, clientUuid, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2Uuid(ctx context.Context, realm string, clientUuid string, roleName string, client2Uuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidRequest(c.Server, realm, clientUuid, roleName, client2Uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealm(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmRequest(c.Server, realm, clientUuid, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroups(ctx context.Context, realm string, clientUuid string, roleName string, params *GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsRequest(c.Server, realm, clientUuid, roleName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsRequest(c.Server, realm, clientUuid, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithBody(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsRequestWithBody(c.Server, realm, clientUuid, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions(ctx context.Context, realm string, clientUuid string, roleName string, body PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsRequest(c.Server, realm, clientUuid, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsers(ctx context.Context, realm string, clientUuid string, roleName string, params *GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersRequest(c.Server, realm, clientUuid, roleName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidScopeMappings(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidScopeMappingsRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBody(ctx context.Context, realm string, clientUuid string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequestWithBody(c.Server, realm, clientUuid, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient(ctx context.Context, realm string, clientUuid string, client string, body DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequest(c.Server, realm, clientUuid, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient(ctx context.Context, realm string, clientUuid string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequest(c.Server, realm, clientUuid, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBody(ctx context.Context, realm string, clientUuid string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequestWithBody(c.Server, realm, clientUuid, client, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient(ctx context.Context, realm string, clientUuid string, client string, body PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequest(c.Server, realm, clientUuid, client, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailable(ctx context.Context, realm string, clientUuid string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableRequest(c.Server, realm, clientUuid, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientComposite(ctx context.Context, realm string, clientUuid string, client string, params *GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeRequest(c.Server, realm, clientUuid, client, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealm(ctx context.Context, realm string, clientUuid string, body DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidScopeMappingsRealm(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBody(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequestWithBody(c.Server, realm, clientUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmClientsClientUuidScopeMappingsRealm(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequest(c.Server, realm, clientUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailable(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmComposite(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidServiceAccountUser(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidServiceAccountUserRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidSessionCount(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidSessionCountRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidTestNodesAvailable(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidTestNodesAvailableRequest(c.Server, realm, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmClientsClientUuidUserSessions(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidUserSessionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmClientsClientUuidUserSessionsRequest(c.Server, realm, clientUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmComponents(ctx context.Context, realm string, params *GetAdminRealmsRealmComponentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmComponentsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmComponentsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmComponentsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmComponents(ctx context.Context, realm string, body PostAdminRealmsRealmComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmComponentsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmComponentsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmComponentsIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmComponentsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmComponentsIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmComponentsIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmComponentsIdRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmComponentsId(ctx context.Context, realm string, id string, body PutAdminRealmsRealmComponentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmComponentsIdRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmComponentsIdSubComponentTypes(ctx context.Context, realm string, id string, params *GetAdminRealmsRealmComponentsIdSubComponentTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmComponentsIdSubComponentTypesRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmCredentialRegistrators(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmCredentialRegistratorsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmDefaultDefaultClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmDefaultDefaultClientScopesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmDefaultGroups(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmDefaultGroupsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmDefaultGroupsGroupId(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmDefaultGroupsGroupIdRequest(c.Server, realm, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmDefaultGroupsGroupId(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmDefaultGroupsGroupIdRequest(c.Server, realm, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmDefaultOptionalClientScopes(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmDefaultOptionalClientScopesRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeId(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdRequest(c.Server, realm, clientScopeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmEvents(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmEventsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmEvents(ctx context.Context, realm string, params *GetAdminRealmsRealmEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmEventsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmEventsConfig(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmEventsConfigRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmEventsConfigWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmEventsConfigRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmEventsConfig(ctx context.Context, realm string, body PutAdminRealmsRealmEventsConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmEventsConfigRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmGroupByPathPath(ctx context.Context, realm string, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmGroupByPathPathRequest(c.Server, realm, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmGroups(ctx context.Context, realm string, params *GetAdminRealmsRealmGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmGroupsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmGroupsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmGroupsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmGroups(ctx context.Context, realm string, body PostAdminRealmsRealmGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmGroupsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmGroupsCount(ctx context.Context, realm string, params *GetAdminRealmsRealmGroupsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmGroupsCountRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmGroupsGroupId(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmGroupsGroupIdRequest(c.Server, realm, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmGroupsGroupId(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmGroupsGroupIdRequest(c.Server, realm, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmGroupsGroupIdWithBody(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmGroupsGroupIdRequestWithBody(c.Server, realm, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmGroupsGroupId(ctx context.Context, realm string, groupId string, body PutAdminRealmsRealmGroupsGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmGroupsGroupIdRequest(c.Server, realm, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmGroupsGroupIdChildren(ctx context.Context, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdChildrenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmGroupsGroupIdChildrenRequest(c.Server, realm, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmGroupsGroupIdChildrenWithBody(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmGroupsGroupIdChildrenRequestWithBody(c.Server, realm, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmGroupsGroupIdChildren(ctx context.Context, realm string, groupId string, body PostAdminRealmsRealmGroupsGroupIdChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmGroupsGroupIdChildrenRequest(c.Server, realm, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmGroupsGroupIdManagementPermissions(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmGroupsGroupIdManagementPermissionsRequest(c.Server, realm, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmGroupsGroupIdManagementPermissionsWithBody(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmGroupsGroupIdManagementPermissionsRequestWithBody(c.Server, realm, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmGroupsGroupIdManagementPermissions(ctx context.Context, realm string, groupId string, body PutAdminRealmsRealmGroupsGroupIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmGroupsGroupIdManagementPermissionsRequest(c.Server, realm, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmGroupsGroupIdMembers(ctx context.Context, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmGroupsGroupIdMembersRequest(c.Server, realm, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmGroupsGroupIdRoleMappings(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsRequest(c.Server, realm, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBody(ctx context.Context, realm string, groupId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequestWithBody(c.Server, realm, groupId, clientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId(ctx context.Context, realm string, groupId string, clientId string, body DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequest(c.Server, realm, groupId, clientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId(ctx context.Context, realm string, groupId string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequest(c.Server, realm, groupId, clientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBody(ctx context.Context, realm string, groupId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequestWithBody(c.Server, realm, groupId, clientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId(ctx context.Context, realm string, groupId string, clientId string, body PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequest(c.Server, realm, groupId, clientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable(ctx context.Context, realm string, groupId string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableRequest(c.Server, realm, groupId, clientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite(ctx context.Context, realm string, groupId string, clientId string, params *GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeRequest(c.Server, realm, groupId, clientId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBody(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequestWithBody(c.Server, realm, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealm(ctx context.Context, realm string, groupId string, body DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequest(c.Server, realm, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealm(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequest(c.Server, realm, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBody(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequestWithBody(c.Server, realm, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealm(ctx context.Context, realm string, groupId string, body PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequest(c.Server, realm, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailable(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableRequest(c.Server, realm, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmComposite(ctx context.Context, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeRequest(c.Server, realm, groupId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmIdentityProviderImportConfigWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmIdentityProviderImportConfigRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmIdentityProviderImportConfig(ctx context.Context, realm string, body PostAdminRealmsRealmIdentityProviderImportConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmIdentityProviderImportConfigRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmIdentityProviderInstances(ctx context.Context, realm string, params *GetAdminRealmsRealmIdentityProviderInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmIdentityProviderInstancesRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmIdentityProviderInstancesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmIdentityProviderInstancesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmIdentityProviderInstances(ctx context.Context, realm string, body PostAdminRealmsRealmIdentityProviderInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmIdentityProviderInstancesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmIdentityProviderInstancesAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmIdentityProviderInstancesAliasRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmIdentityProviderInstancesAlias(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmIdentityProviderInstancesAliasRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmIdentityProviderInstancesAliasWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmIdentityProviderInstancesAliasRequestWithBody(c.Server, realm, alias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmIdentityProviderInstancesAlias(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmIdentityProviderInstancesAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmIdentityProviderInstancesAliasRequest(c.Server, realm, alias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmIdentityProviderInstancesAliasExport(ctx context.Context, realm string, alias string, params *GetAdminRealmsRealmIdentityProviderInstancesAliasExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmIdentityProviderInstancesAliasExportRequest(c.Server, realm, alias, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsRequestWithBody(c.Server, realm, alias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsRequest(c.Server, realm, alias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypes(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmIdentityProviderInstancesAliasMappers(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmIdentityProviderInstancesAliasMappersRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmIdentityProviderInstancesAliasMappersWithBody(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmIdentityProviderInstancesAliasMappersRequestWithBody(c.Server, realm, alias, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmIdentityProviderInstancesAliasMappers(ctx context.Context, realm string, alias string, body PostAdminRealmsRealmIdentityProviderInstancesAliasMappersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmIdentityProviderInstancesAliasMappersRequest(c.Server, realm, alias, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersId(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdRequest(c.Server, realm, alias, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmIdentityProviderInstancesAliasMappersId(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdRequest(c.Server, realm, alias, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithBody(ctx context.Context, realm string, alias string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdRequestWithBody(c.Server, realm, alias, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmIdentityProviderInstancesAliasMappersId(ctx context.Context, realm string, alias string, id string, body PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdRequest(c.Server, realm, alias, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeys(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysRequest(c.Server, realm, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmIdentityProviderProvidersProviderId(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmIdentityProviderProvidersProviderIdRequest(c.Server, realm, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmKeys(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmKeysRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmLocalization(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmLocalizationRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmLocalizationLocale(ctx context.Context, realm string, locale string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmLocalizationLocaleRequest(c.Server, realm, locale)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmLocalizationLocale(ctx context.Context, realm string, locale string, params *GetAdminRealmsRealmLocalizationLocaleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmLocalizationLocaleRequest(c.Server, realm, locale, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmLocalizationLocaleWithBody(ctx context.Context, realm string, locale string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmLocalizationLocaleRequestWithBody(c.Server, realm, locale, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmLocalizationLocale(ctx context.Context, realm string, locale string, body PostAdminRealmsRealmLocalizationLocaleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmLocalizationLocaleRequest(c.Server, realm, locale, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmLocalizationLocaleKey(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmLocalizationLocaleKeyRequest(c.Server, realm, locale, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmLocalizationLocaleKey(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmLocalizationLocaleKeyRequest(c.Server, realm, locale, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmLocalizationLocaleKeyWithBody(ctx context.Context, realm string, locale string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmLocalizationLocaleKeyRequestWithBody(c.Server, realm, locale, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmLocalizationLocaleKeyWithTextBody(ctx context.Context, realm string, locale string, key string, body PutAdminRealmsRealmLocalizationLocaleKeyTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmLocalizationLocaleKeyRequestWithTextBody(c.Server, realm, locale, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmLogoutAll(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmLogoutAllRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmOrganizations(ctx context.Context, realm string, params *GetAdminRealmsRealmOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmOrganizationsRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmOrganizationsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmOrganizationsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmOrganizations(ctx context.Context, realm string, body PostAdminRealmsRealmOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmOrganizationsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmOrganizationsMembersIdOrganizations(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmOrganizationsMembersIdOrganizationsRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmOrganizationsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmOrganizationsIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmOrganizationsId(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmOrganizationsIdRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmOrganizationsIdWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmOrganizationsIdRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmOrganizationsId(ctx context.Context, realm string, id string, body PutAdminRealmsRealmOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmOrganizationsIdRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmOrganizationsIdIdentityProviders(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmOrganizationsIdIdentityProvidersRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmOrganizationsIdIdentityProvidersWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmOrganizationsIdIdentityProvidersRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmOrganizationsIdIdentityProviders(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdIdentityProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmOrganizationsIdIdentityProvidersRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAlias(ctx context.Context, realm string, id string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasRequest(c.Server, realm, id, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmOrganizationsIdIdentityProvidersAlias(ctx context.Context, realm string, id string, alias string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasRequest(c.Server, realm, id, alias)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmOrganizationsIdMembers(ctx context.Context, realm string, id string, params *GetAdminRealmsRealmOrganizationsIdMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmOrganizationsIdMembersRequest(c.Server, realm, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmOrganizationsIdMembersWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmOrganizationsIdMembersRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmOrganizationsIdMembers(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmOrganizationsIdMembersRequest(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmOrganizationsIdMembersCount(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmOrganizationsIdMembersCountRequest(c.Server, realm, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserWithFormdataBody(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserRequestWithFormdataBody(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmOrganizationsIdMembersInviteUserWithBody(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmOrganizationsIdMembersInviteUserRequestWithBody(c.Server, realm, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmOrganizationsIdMembersInviteUserWithFormdataBody(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersInviteUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmOrganizationsIdMembersInviteUserRequestWithFormdataBody(c.Server, realm, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmOrganizationsIdMembersMemberId(ctx context.Context, realm string, id string, memberId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmOrganizationsIdMembersMemberIdRequest(c.Server, realm, id, memberId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmOrganizationsIdMembersMemberId(ctx context.Context, realm string, id string, memberId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmOrganizationsIdMembersMemberIdRequest(c.Server, realm, id, memberId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizations(ctx context.Context, realm string, id string, memberId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsRequest(c.Server, realm, id, memberId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmPartialExport(ctx context.Context, realm string, params *PostAdminRealmsRealmPartialExportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmPartialExportRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmPartialImportWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmPartialImportRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmPartialImport(ctx context.Context, realm string, body PostAdminRealmsRealmPartialImportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmPartialImportRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmPushRevocation(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmPushRevocationRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmRoles(ctx context.Context, realm string, params *GetAdminRealmsRealmRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmRolesRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmRolesWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmRolesRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmRoles(ctx context.Context, realm string, body PostAdminRealmsRealmRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmRolesRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmRolesByIdRoleId(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmRolesByIdRoleIdRequest(c.Server, realm, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmRolesByIdRoleId(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmRolesByIdRoleIdRequest(c.Server, realm, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmRolesByIdRoleIdWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmRolesByIdRoleIdRequestWithBody(c.Server, realm, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmRolesByIdRoleId(ctx context.Context, realm string, roleId string, body PutAdminRealmsRealmRolesByIdRoleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmRolesByIdRoleIdRequest(c.Server, realm, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmRolesByIdRoleIdCompositesWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmRolesByIdRoleIdCompositesRequestWithBody(c.Server, realm, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmRolesByIdRoleIdComposites(ctx context.Context, realm string, roleId string, body DeleteAdminRealmsRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmRolesByIdRoleIdCompositesRequest(c.Server, realm, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmRolesByIdRoleIdComposites(ctx context.Context, realm string, roleId string, params *GetAdminRealmsRealmRolesByIdRoleIdCompositesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmRolesByIdRoleIdCompositesRequest(c.Server, realm, roleId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmRolesByIdRoleIdCompositesWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmRolesByIdRoleIdCompositesRequestWithBody(c.Server, realm, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmRolesByIdRoleIdComposites(ctx context.Context, realm string, roleId string, body PostAdminRealmsRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmRolesByIdRoleIdCompositesRequest(c.Server, realm, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuid(ctx context.Context, realm string, roleId string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidRequest(c.Server, realm, roleId, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmRolesByIdRoleIdCompositesRealm(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmRolesByIdRoleIdCompositesRealmRequest(c.Server, realm, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmRolesByIdRoleIdManagementPermissions(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsRequest(c.Server, realm, roleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithBody(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsRequestWithBody(c.Server, realm, roleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmRolesByIdRoleIdManagementPermissions(ctx context.Context, realm string, roleId string, body PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsRequest(c.Server, realm, roleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmRolesRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmRolesRoleNameRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmRolesRoleName(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmRolesRoleNameRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmRolesRoleNameWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmRolesRoleNameRequestWithBody(c.Server, realm, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmRolesRoleName(ctx context.Context, realm string, roleName string, body PutAdminRealmsRealmRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmRolesRoleNameRequest(c.Server, realm, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmRolesRoleNameCompositesWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmRolesRoleNameCompositesRequestWithBody(c.Server, realm, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmRolesRoleNameComposites(ctx context.Context, realm string, roleName string, body DeleteAdminRealmsRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmRolesRoleNameCompositesRequest(c.Server, realm, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmRolesRoleNameComposites(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmRolesRoleNameCompositesRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmRolesRoleNameCompositesWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmRolesRoleNameCompositesRequestWithBody(c.Server, realm, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmRolesRoleNameComposites(ctx context.Context, realm string, roleName string, body PostAdminRealmsRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmRolesRoleNameCompositesRequest(c.Server, realm, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuid(ctx context.Context, realm string, roleName string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidRequest(c.Server, realm, roleName, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmRolesRoleNameCompositesRealm(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmRolesRoleNameCompositesRealmRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmRolesRoleNameGroups(ctx context.Context, realm string, roleName string, params *GetAdminRealmsRealmRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmRolesRoleNameGroupsRequest(c.Server, realm, roleName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmRolesRoleNameManagementPermissions(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmRolesRoleNameManagementPermissionsRequest(c.Server, realm, roleName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmRolesRoleNameManagementPermissionsWithBody(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmRolesRoleNameManagementPermissionsRequestWithBody(c.Server, realm, roleName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmRolesRoleNameManagementPermissions(ctx context.Context, realm string, roleName string, body PutAdminRealmsRealmRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmRolesRoleNameManagementPermissionsRequest(c.Server, realm, roleName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmRolesRoleNameUsers(ctx context.Context, realm string, roleName string, params *GetAdminRealmsRealmRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmRolesRoleNameUsersRequest(c.Server, realm, roleName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmSessionsSession(ctx context.Context, realm string, session string, params *DeleteAdminRealmsRealmSessionsSessionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmSessionsSessionRequest(c.Server, realm, session, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmTestSMTPConnectionWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmTestSMTPConnectionRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmTestSMTPConnection(ctx context.Context, realm string, body PostAdminRealmsRealmTestSMTPConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmTestSMTPConnectionRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmTestSMTPConnectionWithFormdataBody(ctx context.Context, realm string, body PostAdminRealmsRealmTestSMTPConnectionFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmTestSMTPConnectionRequestWithFormdataBody(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsers(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsers(ctx context.Context, realm string, body PostAdminRealmsRealmUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersManagementPermissions(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersManagementPermissionsRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersManagementPermissionsWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersManagementPermissionsRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersManagementPermissions(ctx context.Context, realm string, body PutAdminRealmsRealmUsersManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersManagementPermissionsRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersCount(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersCountRequest(c.Server, realm, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersProfile(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersProfileRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersProfileWithBody(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersProfileRequestWithBody(c.Server, realm, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersProfile(ctx context.Context, realm string, body PutAdminRealmsRealmUsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersProfileRequest(c.Server, realm, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersProfileMetadata(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersProfileMetadataRequest(c.Server, realm)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmUsersUserId(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmUsersUserIdRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserId(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdRequest(c.Server, realm, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdRequestWithBody(c.Server, realm, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserId(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdRequest(c.Server, realm, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypes(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdConsents(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdConsentsRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmUsersUserIdConsentsClient(ctx context.Context, realm string, userId string, client string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmUsersUserIdConsentsClientRequest(c.Server, realm, userId, client)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdCredentials(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdCredentialsRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialId(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdRequest(c.Server, realm, userId, credentialId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId(ctx context.Context, realm string, userId string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdRequest(c.Server, realm, userId, credentialId, newPreviousCredentialId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirst(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstRequest(c.Server, realm, userId, credentialId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBody(ctx context.Context, realm string, userId string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelRequestWithBody(c.Server, realm, userId, credentialId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithTextBody(ctx context.Context, realm string, userId string, credentialId string, body PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelRequestWithTextBody(c.Server, realm, userId, credentialId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequestWithBody(c.Server, realm, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdDisableCredentialTypes(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequest(c.Server, realm, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBody(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequestWithBody(c.Server, realm, userId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdExecuteActionsEmail(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, body PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequest(c.Server, realm, userId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdFederatedIdentity(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdFederatedIdentityRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProvider(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderRequest(c.Server, realm, userId, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersUserIdFederatedIdentityProvider(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersUserIdFederatedIdentityProviderRequest(c.Server, realm, userId, provider)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdGroups(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdGroupsRequest(c.Server, realm, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdGroupsCount(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdGroupsCountRequest(c.Server, realm, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmUsersUserIdGroupsGroupId(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmUsersUserIdGroupsGroupIdRequest(c.Server, realm, userId, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdGroupsGroupId(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdGroupsGroupIdRequest(c.Server, realm, userId, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersUserIdImpersonation(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersUserIdImpersonationRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersUserIdLogout(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersUserIdLogoutRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuid(ctx context.Context, realm string, userId string, clientUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidRequest(c.Server, realm, userId, clientUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdResetPasswordWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdResetPasswordRequestWithBody(c.Server, realm, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdResetPassword(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdResetPasswordRequest(c.Server, realm, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdResetPasswordEmail(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdResetPasswordEmailRequest(c.Server, realm, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdRoleMappings(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdRoleMappingsRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBody(ctx context.Context, realm string, userId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequestWithBody(c.Server, realm, userId, clientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId(ctx context.Context, realm string, userId string, clientId string, body DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequest(c.Server, realm, userId, clientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId(ctx context.Context, realm string, userId string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequest(c.Server, realm, userId, clientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBody(ctx context.Context, realm string, userId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequestWithBody(c.Server, realm, userId, clientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId(ctx context.Context, realm string, userId string, clientId string, body PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequest(c.Server, realm, userId, clientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable(ctx context.Context, realm string, userId string, clientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableRequest(c.Server, realm, userId, clientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite(ctx context.Context, realm string, userId string, clientId string, params *GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeRequest(c.Server, realm, userId, clientId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmRequestWithBody(c.Server, realm, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealm(ctx context.Context, realm string, userId string, body DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmRequest(c.Server, realm, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdRoleMappingsRealm(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdRoleMappingsRealmRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBody(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersUserIdRoleMappingsRealmRequestWithBody(c.Server, realm, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAdminRealmsRealmUsersUserIdRoleMappingsRealm(ctx context.Context, realm string, userId string, body PostAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAdminRealmsRealmUsersUserIdRoleMappingsRealmRequest(c.Server, realm, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailable(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdRoleMappingsRealmComposite(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeRequest(c.Server, realm, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminRealmsRealmUsersUserIdSendVerifyEmail(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminRealmsRealmUsersUserIdSendVerifyEmailRequest(c.Server, realm, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdSessions(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdSessionsRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminRealmsRealmUsersUserIdUnmanagedAttributes(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminRealmsRealmUsersUserIdUnmanagedAttributesRequest(c.Server, realm, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAdminRealmsRequest generates requests for GetAdminRealms
func NewGetAdminRealmsRequest(server string, params *GetAdminRealmsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRequest calls the generic PostAdminRealms builder with application/json body
func NewPostAdminRealmsRequest(server string, body PostAdminRealmsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAdminRealmsRequestWithBody generates requests for PostAdminRealms with any type of body
func NewPostAdminRealmsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmRequest generates requests for DeleteAdminRealmsRealm
func NewDeleteAdminRealmsRealmRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmRequest generates requests for GetAdminRealmsRealm
func NewGetAdminRealmsRealmRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmRequest calls the generic PutAdminRealmsRealm builder with application/json body
func NewPutAdminRealmsRealmRequest(server string, realm string, body PutAdminRealmsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmRequestWithBody generates requests for PutAdminRealmsRealm with any type of body
func NewPutAdminRealmsRealmRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmAdminEventsRequest generates requests for DeleteAdminRealmsRealmAdminEvents
func NewDeleteAdminRealmsRealmAdminEventsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/admin-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmAdminEventsRequest generates requests for GetAdminRealmsRealmAdminEvents
func NewGetAdminRealmsRealmAdminEventsRequest(server string, realm string, params *GetAdminRealmsRealmAdminEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/admin-events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.AuthClient != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authClient", runtime.ParamLocationQuery, *params.AuthClient); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthIpAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authIpAddress", runtime.ParamLocationQuery, *params.AuthIpAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthRealm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authRealm", runtime.ParamLocationQuery, *params.AuthRealm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AuthUser != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "authUser", runtime.ParamLocationQuery, *params.AuthUser); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OperationTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "operationTypes", runtime.ParamLocationQuery, *params.OperationTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResourcePath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourcePath", runtime.ParamLocationQuery, *params.ResourcePath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResourceTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceTypes", runtime.ParamLocationQuery, *params.ResourceTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmAttackDetectionBruteForceUsersRequest generates requests for DeleteAdminRealmsRealmAttackDetectionBruteForceUsers
func NewDeleteAdminRealmsRealmAttackDetectionBruteForceUsersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/attack-detection/brute-force/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdRequest generates requests for DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserId
func NewDeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/attack-detection/brute-force/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdRequest generates requests for GetAdminRealmsRealmAttackDetectionBruteForceUsersUserId
func NewGetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/attack-detection/brute-force/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationAuthenticatorProvidersRequest generates requests for GetAdminRealmsRealmAuthenticationAuthenticatorProviders
func NewGetAdminRealmsRealmAuthenticationAuthenticatorProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/authenticator-providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersRequest generates requests for GetAdminRealmsRealmAuthenticationClientAuthenticatorProviders
func NewGetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/client-authenticator-providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmAuthenticationConfigRequest calls the generic PostAdminRealmsRealmAuthenticationConfig builder with application/json body
func NewPostAdminRealmsRealmAuthenticationConfigRequest(server string, realm string, body PostAdminRealmsRealmAuthenticationConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmAuthenticationConfigRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmAuthenticationConfigRequestWithBody generates requests for PostAdminRealmsRealmAuthenticationConfig with any type of body
func NewPostAdminRealmsRealmAuthenticationConfigRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdRequest generates requests for GetAdminRealmsRealmAuthenticationConfigDescriptionProviderId
func NewGetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdRequest(server string, realm string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/config-description/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmAuthenticationConfigIdRequest generates requests for DeleteAdminRealmsRealmAuthenticationConfigId
func NewDeleteAdminRealmsRealmAuthenticationConfigIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationConfigIdRequest generates requests for GetAdminRealmsRealmAuthenticationConfigId
func NewGetAdminRealmsRealmAuthenticationConfigIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmAuthenticationConfigIdRequest calls the generic PutAdminRealmsRealmAuthenticationConfigId builder with application/json body
func NewPutAdminRealmsRealmAuthenticationConfigIdRequest(server string, realm string, id string, body PutAdminRealmsRealmAuthenticationConfigIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmAuthenticationConfigIdRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmAuthenticationConfigIdRequestWithBody generates requests for PutAdminRealmsRealmAuthenticationConfigId with any type of body
func NewPutAdminRealmsRealmAuthenticationConfigIdRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmAuthenticationExecutionsRequest calls the generic PostAdminRealmsRealmAuthenticationExecutions builder with application/json body
func NewPostAdminRealmsRealmAuthenticationExecutionsRequest(server string, realm string, body PostAdminRealmsRealmAuthenticationExecutionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmAuthenticationExecutionsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmAuthenticationExecutionsRequestWithBody generates requests for PostAdminRealmsRealmAuthenticationExecutions with any type of body
func NewPostAdminRealmsRealmAuthenticationExecutionsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/executions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdRequest generates requests for DeleteAdminRealmsRealmAuthenticationExecutionsExecutionId
func NewDeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdRequest(server string, realm string, executionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/executions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationExecutionsExecutionIdRequest generates requests for GetAdminRealmsRealmAuthenticationExecutionsExecutionId
func NewGetAdminRealmsRealmAuthenticationExecutionsExecutionIdRequest(server string, realm string, executionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/executions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigRequest calls the generic PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfig builder with application/json body
func NewPostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigRequest(server string, realm string, executionId string, body PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigRequestWithBody(server, realm, executionId, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigRequestWithBody generates requests for PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfig with any type of body
func NewPostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigRequestWithBody(server string, realm string, executionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/executions/%s/config", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdRequest generates requests for GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigId
func NewGetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdRequest(server string, realm string, executionId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/executions/%s/config/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityRequest generates requests for PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriority
func NewPostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityRequest(server string, realm string, executionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/executions/%s/lower-priority", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityRequest generates requests for PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriority
func NewPostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityRequest(server string, realm string, executionId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "executionId", runtime.ParamLocationPath, executionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/executions/%s/raise-priority", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationFlowsRequest generates requests for GetAdminRealmsRealmAuthenticationFlows
func NewGetAdminRealmsRealmAuthenticationFlowsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/flows", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmAuthenticationFlowsRequest calls the generic PostAdminRealmsRealmAuthenticationFlows builder with application/json body
func NewPostAdminRealmsRealmAuthenticationFlowsRequest(server string, realm string, body PostAdminRealmsRealmAuthenticationFlowsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmAuthenticationFlowsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmAuthenticationFlowsRequestWithBody generates requests for PostAdminRealmsRealmAuthenticationFlows with any type of body
func NewPostAdminRealmsRealmAuthenticationFlowsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/flows", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyRequest calls the generic PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopy builder with application/json body
func NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyRequest(server string, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyRequestWithBody(server, realm, flowAlias, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyRequestWithBody generates requests for PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopy with any type of body
func NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyRequestWithBody(server string, realm string, flowAlias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/flows/%s/copy", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsRequest generates requests for GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions
func NewGetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsRequest(server string, realm string, flowAlias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/flows/%s/executions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsRequest calls the generic PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions builder with application/json body
func NewPutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsRequest(server string, realm string, flowAlias string, body PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsRequestWithBody(server, realm, flowAlias, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsRequestWithBody generates requests for PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions with any type of body
func NewPutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsRequestWithBody(server string, realm string, flowAlias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/flows/%s/executions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequest calls the generic PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecution builder with application/json body
func NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequest(server string, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequestWithBody(server, realm, flowAlias, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequestWithBody generates requests for PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecution with any type of body
func NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionRequestWithBody(server string, realm string, flowAlias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/flows/%s/executions/execution", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowRequest calls the generic PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlow builder with application/json body
func NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowRequest(server string, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowRequestWithBody(server, realm, flowAlias, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowRequestWithBody generates requests for PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlow with any type of body
func NewPostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowRequestWithBody(server string, realm string, flowAlias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "flowAlias", runtime.ParamLocationPath, flowAlias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/flows/%s/executions/flow", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmAuthenticationFlowsIdRequest generates requests for DeleteAdminRealmsRealmAuthenticationFlowsId
func NewDeleteAdminRealmsRealmAuthenticationFlowsIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/flows/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationFlowsIdRequest generates requests for GetAdminRealmsRealmAuthenticationFlowsId
func NewGetAdminRealmsRealmAuthenticationFlowsIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/flows/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmAuthenticationFlowsIdRequest calls the generic PutAdminRealmsRealmAuthenticationFlowsId builder with application/json body
func NewPutAdminRealmsRealmAuthenticationFlowsIdRequest(server string, realm string, id string, body PutAdminRealmsRealmAuthenticationFlowsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmAuthenticationFlowsIdRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmAuthenticationFlowsIdRequestWithBody generates requests for PutAdminRealmsRealmAuthenticationFlowsId with any type of body
func NewPutAdminRealmsRealmAuthenticationFlowsIdRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/flows/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationFormActionProvidersRequest generates requests for GetAdminRealmsRealmAuthenticationFormActionProviders
func NewGetAdminRealmsRealmAuthenticationFormActionProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/form-action-providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationFormProvidersRequest generates requests for GetAdminRealmsRealmAuthenticationFormProviders
func NewGetAdminRealmsRealmAuthenticationFormProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/form-providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationPerClientConfigDescriptionRequest generates requests for GetAdminRealmsRealmAuthenticationPerClientConfigDescription
func NewGetAdminRealmsRealmAuthenticationPerClientConfigDescriptionRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/per-client-config-description", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmAuthenticationRegisterRequiredActionRequest calls the generic PostAdminRealmsRealmAuthenticationRegisterRequiredAction builder with application/json body
func NewPostAdminRealmsRealmAuthenticationRegisterRequiredActionRequest(server string, realm string, body PostAdminRealmsRealmAuthenticationRegisterRequiredActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmAuthenticationRegisterRequiredActionRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmAuthenticationRegisterRequiredActionRequestWithBody generates requests for PostAdminRealmsRealmAuthenticationRegisterRequiredAction with any type of body
func NewPostAdminRealmsRealmAuthenticationRegisterRequiredActionRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/register-required-action", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationRequiredActionsRequest generates requests for GetAdminRealmsRealmAuthenticationRequiredActions
func NewGetAdminRealmsRealmAuthenticationRequiredActionsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/required-actions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmAuthenticationRequiredActionsAliasRequest generates requests for DeleteAdminRealmsRealmAuthenticationRequiredActionsAlias
func NewDeleteAdminRealmsRealmAuthenticationRequiredActionsAliasRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/required-actions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationRequiredActionsAliasRequest generates requests for GetAdminRealmsRealmAuthenticationRequiredActionsAlias
func NewGetAdminRealmsRealmAuthenticationRequiredActionsAliasRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/required-actions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmAuthenticationRequiredActionsAliasRequest calls the generic PutAdminRealmsRealmAuthenticationRequiredActionsAlias builder with application/json body
func NewPutAdminRealmsRealmAuthenticationRequiredActionsAliasRequest(server string, realm string, alias string, body PutAdminRealmsRealmAuthenticationRequiredActionsAliasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmAuthenticationRequiredActionsAliasRequestWithBody(server, realm, alias, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmAuthenticationRequiredActionsAliasRequestWithBody generates requests for PutAdminRealmsRealmAuthenticationRequiredActionsAlias with any type of body
func NewPutAdminRealmsRealmAuthenticationRequiredActionsAliasRequestWithBody(server string, realm string, alias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/required-actions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigRequest generates requests for DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfig
func NewDeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/required-actions/%s/config", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigRequest generates requests for GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfig
func NewGetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/required-actions/%s/config", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigRequest calls the generic PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfig builder with application/json body
func NewPutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigRequest(server string, realm string, alias string, body PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigRequestWithBody(server, realm, alias, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigRequestWithBody generates requests for PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfig with any type of body
func NewPutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigRequestWithBody(server string, realm string, alias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/required-actions/%s/config", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionRequest generates requests for GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescription
func NewGetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/required-actions/%s/config-description", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityRequest generates requests for PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriority
func NewPostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/required-actions/%s/lower-priority", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityRequest generates requests for PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriority
func NewPostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/required-actions/%s/raise-priority", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsRequest generates requests for GetAdminRealmsRealmAuthenticationUnregisteredRequiredActions
func NewGetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/authentication/unregistered-required-actions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientDescriptionConverterRequest calls the generic PostAdminRealmsRealmClientDescriptionConverter builder with application/json body
func NewPostAdminRealmsRealmClientDescriptionConverterRequest(server string, realm string, body PostAdminRealmsRealmClientDescriptionConverterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientDescriptionConverterRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientDescriptionConverterRequestWithTextBody calls the generic PostAdminRealmsRealmClientDescriptionConverter builder with text/plain body
func NewPostAdminRealmsRealmClientDescriptionConverterRequestWithTextBody(server string, realm string, body PostAdminRealmsRealmClientDescriptionConverterTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPostAdminRealmsRealmClientDescriptionConverterRequestWithBody(server, realm, "text/plain", bodyReader)
}

// NewPostAdminRealmsRealmClientDescriptionConverterRequestWithBody generates requests for PostAdminRealmsRealmClientDescriptionConverter with any type of body
func NewPostAdminRealmsRealmClientDescriptionConverterRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-description-converter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientPoliciesPoliciesRequest generates requests for GetAdminRealmsRealmClientPoliciesPolicies
func NewGetAdminRealmsRealmClientPoliciesPoliciesRequest(server string, realm string, params *GetAdminRealmsRealmClientPoliciesPoliciesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-policies/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeGlobalPolicies != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include-global-policies", runtime.ParamLocationQuery, *params.IncludeGlobalPolicies); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientPoliciesPoliciesRequest calls the generic PutAdminRealmsRealmClientPoliciesPolicies builder with application/json body
func NewPutAdminRealmsRealmClientPoliciesPoliciesRequest(server string, realm string, body PutAdminRealmsRealmClientPoliciesPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientPoliciesPoliciesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientPoliciesPoliciesRequestWithBody generates requests for PutAdminRealmsRealmClientPoliciesPolicies with any type of body
func NewPutAdminRealmsRealmClientPoliciesPoliciesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-policies/policies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientPoliciesProfilesRequest generates requests for GetAdminRealmsRealmClientPoliciesProfiles
func NewGetAdminRealmsRealmClientPoliciesProfilesRequest(server string, realm string, params *GetAdminRealmsRealmClientPoliciesProfilesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-policies/profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludeGlobalProfiles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include-global-profiles", runtime.ParamLocationQuery, *params.IncludeGlobalProfiles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientPoliciesProfilesRequest calls the generic PutAdminRealmsRealmClientPoliciesProfiles builder with application/json body
func NewPutAdminRealmsRealmClientPoliciesProfilesRequest(server string, realm string, body PutAdminRealmsRealmClientPoliciesProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientPoliciesProfilesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientPoliciesProfilesRequestWithBody generates requests for PutAdminRealmsRealmClientPoliciesProfiles with any type of body
func NewPutAdminRealmsRealmClientPoliciesProfilesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-policies/profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientRegistrationPolicyProvidersRequest generates requests for GetAdminRealmsRealmClientRegistrationPolicyProviders
func NewGetAdminRealmsRealmClientRegistrationPolicyProvidersRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-registration-policy/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientScopesRequest generates requests for GetAdminRealmsRealmClientScopes
func NewGetAdminRealmsRealmClientScopesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientScopesRequest calls the generic PostAdminRealmsRealmClientScopes builder with application/json body
func NewPostAdminRealmsRealmClientScopesRequest(server string, realm string, body PostAdminRealmsRealmClientScopesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientScopesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientScopesRequestWithBody generates requests for PostAdminRealmsRealmClientScopes with any type of body
func NewPostAdminRealmsRealmClientScopesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmClientScopesClientScopeIdRequest generates requests for DeleteAdminRealmsRealmClientScopesClientScopeId
func NewDeleteAdminRealmsRealmClientScopesClientScopeIdRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientScopesClientScopeIdRequest generates requests for GetAdminRealmsRealmClientScopesClientScopeId
func NewGetAdminRealmsRealmClientScopesClientScopeIdRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientScopesClientScopeIdRequest calls the generic PutAdminRealmsRealmClientScopesClientScopeId builder with application/json body
func NewPutAdminRealmsRealmClientScopesClientScopeIdRequest(server string, realm string, clientScopeId string, body PutAdminRealmsRealmClientScopesClientScopeIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientScopesClientScopeIdRequestWithBody(server, realm, clientScopeId, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientScopesClientScopeIdRequestWithBody generates requests for PutAdminRealmsRealmClientScopesClientScopeId with any type of body
func NewPutAdminRealmsRealmClientScopesClientScopeIdRequestWithBody(server string, realm string, clientScopeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsRequest calls the generic PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModels builder with application/json body
func NewPostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsRequest(server string, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsRequestWithBody(server, realm, clientScopeId, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsRequestWithBody generates requests for PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModels with any type of body
func NewPostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsRequestWithBody(server string, realm string, clientScopeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/protocol-mappers/add-models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsRequest generates requests for GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels
func NewGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsRequest calls the generic PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels builder with application/json body
func NewPostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsRequest(server string, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsRequestWithBody(server, realm, clientScopeId, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsRequestWithBody generates requests for PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels with any type of body
func NewPostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsRequestWithBody(server string, realm string, clientScopeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdRequest generates requests for DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId
func NewDeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdRequest(server string, realm string, clientScopeId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdRequest generates requests for GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId
func NewGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdRequest(server string, realm string, clientScopeId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdRequest calls the generic PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId builder with application/json body
func NewPutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdRequest(server string, realm string, clientScopeId string, id string, body PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdRequestWithBody(server, realm, clientScopeId, id, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdRequestWithBody generates requests for PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId with any type of body
func NewPutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdRequestWithBody(server string, realm string, clientScopeId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolRequest generates requests for GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocol
func NewGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolRequest(server string, realm string, clientScopeId string, protocol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "protocol", runtime.ParamLocationPath, protocol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/protocol-mappers/protocol/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRequest generates requests for GetAdminRealmsRealmClientScopesClientScopeIdScopeMappings
func NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/scope-mappings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequest calls the generic DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient builder with application/json body
func NewDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequest(server string, realm string, clientScopeId string, client string, body DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequestWithBody(server, realm, clientScopeId, client, "application/json", bodyReader)
}

// NewDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequestWithBody generates requests for DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient with any type of body
func NewDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequestWithBody(server string, realm string, clientScopeId string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequest generates requests for GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient
func NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequest(server string, realm string, clientScopeId string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequest calls the generic PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient builder with application/json body
func NewPostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequest(server string, realm string, clientScopeId string, client string, body PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequestWithBody(server, realm, clientScopeId, client, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequestWithBody generates requests for PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient with any type of body
func NewPostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientRequestWithBody(server string, realm string, clientScopeId string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableRequest generates requests for GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailable
func NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableRequest(server string, realm string, clientScopeId string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/scope-mappings/clients/%s/available", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeRequest generates requests for GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientComposite
func NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeRequest(server string, realm string, clientScopeId string, client string, params *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/scope-mappings/clients/%s/composite", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequest calls the generic DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm builder with application/json body
func NewDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequest(server string, realm string, clientScopeId string, body DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequestWithBody(server, realm, clientScopeId, "application/json", bodyReader)
}

// NewDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequestWithBody generates requests for DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm with any type of body
func NewDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequestWithBody(server string, realm string, clientScopeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequest generates requests for GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm
func NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequest calls the generic PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm builder with application/json body
func NewPostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequest(server string, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequestWithBody(server, realm, clientScopeId, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequestWithBody generates requests for PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm with any type of body
func NewPostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmRequestWithBody(server string, realm string, clientScopeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableRequest generates requests for GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailable
func NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/scope-mappings/realm/available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeRequest generates requests for GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmComposite
func NewGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeRequest(server string, realm string, clientScopeId string, params *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-scopes/%s/scope-mappings/realm/composite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientSessionStatsRequest generates requests for GetAdminRealmsRealmClientSessionStats
func NewGetAdminRealmsRealmClientSessionStatsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-session-stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientTemplatesRequest generates requests for GetAdminRealmsRealmClientTemplates
func NewGetAdminRealmsRealmClientTemplatesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientTemplatesRequest calls the generic PostAdminRealmsRealmClientTemplates builder with application/json body
func NewPostAdminRealmsRealmClientTemplatesRequest(server string, realm string, body PostAdminRealmsRealmClientTemplatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientTemplatesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientTemplatesRequestWithBody generates requests for PostAdminRealmsRealmClientTemplates with any type of body
func NewPostAdminRealmsRealmClientTemplatesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdRequest generates requests for DeleteAdminRealmsRealmClientTemplatesClientScopeId
func NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientTemplatesClientScopeIdRequest generates requests for GetAdminRealmsRealmClientTemplatesClientScopeId
func NewGetAdminRealmsRealmClientTemplatesClientScopeIdRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientTemplatesClientScopeIdRequest calls the generic PutAdminRealmsRealmClientTemplatesClientScopeId builder with application/json body
func NewPutAdminRealmsRealmClientTemplatesClientScopeIdRequest(server string, realm string, clientScopeId string, body PutAdminRealmsRealmClientTemplatesClientScopeIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientTemplatesClientScopeIdRequestWithBody(server, realm, clientScopeId, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientTemplatesClientScopeIdRequestWithBody generates requests for PutAdminRealmsRealmClientTemplatesClientScopeId with any type of body
func NewPutAdminRealmsRealmClientTemplatesClientScopeIdRequestWithBody(server string, realm string, clientScopeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsRequest calls the generic PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModels builder with application/json body
func NewPostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsRequest(server string, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsRequestWithBody(server, realm, clientScopeId, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsRequestWithBody generates requests for PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModels with any type of body
func NewPostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsRequestWithBody(server string, realm string, clientScopeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/protocol-mappers/add-models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsRequest generates requests for GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels
func NewGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsRequest calls the generic PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels builder with application/json body
func NewPostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsRequest(server string, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsRequestWithBody(server, realm, clientScopeId, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsRequestWithBody generates requests for PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels with any type of body
func NewPostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsRequestWithBody(server string, realm string, clientScopeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdRequest generates requests for DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId
func NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdRequest(server string, realm string, clientScopeId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdRequest generates requests for GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId
func NewGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdRequest(server string, realm string, clientScopeId string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdRequest calls the generic PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId builder with application/json body
func NewPutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdRequest(server string, realm string, clientScopeId string, id string, body PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdRequestWithBody(server, realm, clientScopeId, id, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdRequestWithBody generates requests for PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId with any type of body
func NewPutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdRequestWithBody(server string, realm string, clientScopeId string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolRequest generates requests for GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocol
func NewGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolRequest(server string, realm string, clientScopeId string, protocol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "protocol", runtime.ParamLocationPath, protocol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/protocol-mappers/protocol/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRequest generates requests for GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappings
func NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/scope-mappings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequest calls the generic DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient builder with application/json body
func NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequest(server string, realm string, clientScopeId string, client string, body DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequestWithBody(server, realm, clientScopeId, client, "application/json", bodyReader)
}

// NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequestWithBody generates requests for DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient with any type of body
func NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequestWithBody(server string, realm string, clientScopeId string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequest generates requests for GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient
func NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequest(server string, realm string, clientScopeId string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequest calls the generic PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient builder with application/json body
func NewPostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequest(server string, realm string, clientScopeId string, client string, body PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequestWithBody(server, realm, clientScopeId, client, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequestWithBody generates requests for PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient with any type of body
func NewPostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientRequestWithBody(server string, realm string, clientScopeId string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableRequest generates requests for GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailable
func NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableRequest(server string, realm string, clientScopeId string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/scope-mappings/clients/%s/available", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeRequest generates requests for GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientComposite
func NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeRequest(server string, realm string, clientScopeId string, client string, params *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/scope-mappings/clients/%s/composite", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequest calls the generic DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm builder with application/json body
func NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequest(server string, realm string, clientScopeId string, body DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequestWithBody(server, realm, clientScopeId, "application/json", bodyReader)
}

// NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequestWithBody generates requests for DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm with any type of body
func NewDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequestWithBody(server string, realm string, clientScopeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequest generates requests for GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm
func NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequest calls the generic PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm builder with application/json body
func NewPostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequest(server string, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequestWithBody(server, realm, clientScopeId, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequestWithBody generates requests for PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm with any type of body
func NewPostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmRequestWithBody(server string, realm string, clientScopeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableRequest generates requests for GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailable
func NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/scope-mappings/realm/available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeRequest generates requests for GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmComposite
func NewGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeRequest(server string, realm string, clientScopeId string, params *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-scope-id", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-templates/%s/scope-mappings/realm/composite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientTypesRequest generates requests for GetAdminRealmsRealmClientTypes
func NewGetAdminRealmsRealmClientTypesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientTypesRequest calls the generic PutAdminRealmsRealmClientTypes builder with application/json body
func NewPutAdminRealmsRealmClientTypesRequest(server string, realm string, body PutAdminRealmsRealmClientTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientTypesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientTypesRequestWithBody generates requests for PutAdminRealmsRealmClientTypes with any type of body
func NewPutAdminRealmsRealmClientTypesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/client-types", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsRequest generates requests for GetAdminRealmsRealmClients
func NewGetAdminRealmsRealmClientsRequest(server string, realm string, params *GetAdminRealmsRealmClientsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientId", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ViewableOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "viewableOnly", runtime.ParamLocationQuery, *params.ViewableOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsRequest calls the generic PostAdminRealmsRealmClients builder with application/json body
func NewPostAdminRealmsRealmClientsRequest(server string, realm string, body PostAdminRealmsRealmClientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsRequestWithBody generates requests for PostAdminRealmsRealmClients with any type of body
func NewPostAdminRealmsRealmClientsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsInitialAccessRequest generates requests for GetAdminRealmsRealmClientsInitialAccess
func NewGetAdminRealmsRealmClientsInitialAccessRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients-initial-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsInitialAccessRequest calls the generic PostAdminRealmsRealmClientsInitialAccess builder with application/json body
func NewPostAdminRealmsRealmClientsInitialAccessRequest(server string, realm string, body PostAdminRealmsRealmClientsInitialAccessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsInitialAccessRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsInitialAccessRequestWithBody generates requests for PostAdminRealmsRealmClientsInitialAccess with any type of body
func NewPostAdminRealmsRealmClientsInitialAccessRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients-initial-access", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmClientsInitialAccessIdRequest generates requests for DeleteAdminRealmsRealmClientsInitialAccessId
func NewDeleteAdminRealmsRealmClientsInitialAccessIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients-initial-access/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmClientsClientUuidRequest generates requests for DeleteAdminRealmsRealmClientsClientUuid
func NewDeleteAdminRealmsRealmClientsClientUuidRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidRequest generates requests for GetAdminRealmsRealmClientsClientUuid
func NewGetAdminRealmsRealmClientsClientUuidRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientsClientUuidRequest calls the generic PutAdminRealmsRealmClientsClientUuid builder with application/json body
func NewPutAdminRealmsRealmClientsClientUuidRequest(server string, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientsClientUuidRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientsClientUuidRequestWithBody generates requests for PutAdminRealmsRealmClientsClientUuid with any type of body
func NewPutAdminRealmsRealmClientsClientUuidRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServer
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerRequest calls the generic PutAdminRealmsRealmClientsClientUuidAuthzResourceServer builder with application/json body
func NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerRequest(server string, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerRequestWithBody generates requests for PutAdminRealmsRealmClientsClientUuidAuthzResourceServer with any type of body
func NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportRequest calls the generic PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImport builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportRequest(server string, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImport with any type of body
func NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/import", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/permission", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Permission != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permission", runtime.ParamLocationQuery, *params.Permission); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PolicyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policyId", runtime.ParamLocationQuery, *params.PolicyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Resource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource", runtime.ParamLocationQuery, *params.Resource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionRequest calls the generic PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionRequest(server string, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission with any type of body
func NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/permission", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateRequest calls the generic PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateRequest(server string, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate with any type of body
func NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/permission/evaluate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/permission/providers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/permission/search", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/policy", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Permission != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permission", runtime.ParamLocationQuery, *params.Permission); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PolicyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policyId", runtime.ParamLocationQuery, *params.PolicyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Resource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource", runtime.ParamLocationQuery, *params.Resource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyRequest calls the generic PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyRequest(server string, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy with any type of body
func NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/policy", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateRequest calls the generic PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateRequest(server string, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate with any type of body
func NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/policy/evaluate", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/policy/providers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/policy/search", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Fields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fields", runtime.ParamLocationQuery, *params.Fields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResource
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/resource", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Deep != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deep", runtime.ParamLocationQuery, *params.Deep); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExactName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exactName", runtime.ParamLocationQuery, *params.ExactName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MatchingUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchingUri", runtime.ParamLocationQuery, *params.MatchingUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uri", runtime.ParamLocationQuery, *params.Uri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceRequest calls the generic PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResource builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceRequest(server string, realm string, clientUuid string, params *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceRequestWithBody(server, realm, clientUuid, params, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResource with any type of body
func NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceRequestWithBody(server string, realm string, clientUuid string, params *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/resource", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Deep != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deep", runtime.ParamLocationQuery, *params.Deep); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExactName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exactName", runtime.ParamLocationQuery, *params.ExactName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MatchingUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchingUri", runtime.ParamLocationQuery, *params.MatchingUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uri", runtime.ParamLocationQuery, *params.Uri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/resource/search", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Deep != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deep", runtime.ParamLocationQuery, *params.Deep); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExactName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exactName", runtime.ParamLocationQuery, *params.ExactName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MatchingUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchingUri", runtime.ParamLocationQuery, *params.MatchingUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uri", runtime.ParamLocationQuery, *params.Uri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdRequest generates requests for DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId
func NewDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdRequest(server string, realm string, clientUuid string, resourceId string, params *DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resource-id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/resource/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Deep != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deep", runtime.ParamLocationQuery, *params.Deep); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExactName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exactName", runtime.ParamLocationQuery, *params.ExactName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MatchingUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchingUri", runtime.ParamLocationQuery, *params.MatchingUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uri", runtime.ParamLocationQuery, *params.Uri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdRequest(server string, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resource-id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/resource/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Deep != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deep", runtime.ParamLocationQuery, *params.Deep); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExactName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exactName", runtime.ParamLocationQuery, *params.ExactName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MatchingUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchingUri", runtime.ParamLocationQuery, *params.MatchingUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uri", runtime.ParamLocationQuery, *params.Uri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdRequest calls the generic PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId builder with application/json body
func NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdRequest(server string, realm string, clientUuid string, resourceId string, params *PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdRequestWithBody(server, realm, clientUuid, resourceId, params, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdRequestWithBody generates requests for PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId with any type of body
func NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdRequestWithBody(server string, realm string, clientUuid string, resourceId string, params *PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resource-id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/resource/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Deep != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deep", runtime.ParamLocationQuery, *params.Deep); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExactName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exactName", runtime.ParamLocationQuery, *params.ExactName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MatchingUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchingUri", runtime.ParamLocationQuery, *params.MatchingUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uri", runtime.ParamLocationQuery, *params.Uri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesRequest(server string, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resource-id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/resource/%s/attributes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Deep != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deep", runtime.ParamLocationQuery, *params.Deep); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExactName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exactName", runtime.ParamLocationQuery, *params.ExactName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MatchingUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchingUri", runtime.ParamLocationQuery, *params.MatchingUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uri", runtime.ParamLocationQuery, *params.Uri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsRequest(server string, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resource-id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/resource/%s/permissions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Deep != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deep", runtime.ParamLocationQuery, *params.Deep); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExactName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exactName", runtime.ParamLocationQuery, *params.ExactName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MatchingUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchingUri", runtime.ParamLocationQuery, *params.MatchingUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uri", runtime.ParamLocationQuery, *params.Uri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesRequest(server string, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "resource-id", runtime.ParamLocationPath, resourceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/resource/%s/scopes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "_id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Deep != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deep", runtime.ParamLocationQuery, *params.Deep); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExactName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exactName", runtime.ParamLocationQuery, *params.ExactName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MatchingUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "matchingUri", runtime.ParamLocationQuery, *params.MatchingUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Owner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "owner", runtime.ParamLocationQuery, *params.Owner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uri", runtime.ParamLocationQuery, *params.Uri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScope
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/scope", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ScopeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scopeId", runtime.ParamLocationQuery, *params.ScopeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeRequest calls the generic PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScope builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeRequest(server string, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScope with any type of body
func NewPostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/scope", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/scope/search", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdRequest generates requests for DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId
func NewDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdRequest(server string, realm string, clientUuid string, scopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "scope-id", runtime.ParamLocationPath, scopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/scope/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdRequest(server string, realm string, clientUuid string, scopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "scope-id", runtime.ParamLocationPath, scopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/scope/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdRequest calls the generic PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId builder with application/json body
func NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdRequest(server string, realm string, clientUuid string, scopeId string, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdRequestWithBody(server, realm, clientUuid, scopeId, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdRequestWithBody generates requests for PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId with any type of body
func NewPutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdRequestWithBody(server string, realm string, clientUuid string, scopeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "scope-id", runtime.ParamLocationPath, scopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/scope/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsRequest(server string, realm string, clientUuid string, scopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "scope-id", runtime.ParamLocationPath, scopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/scope/%s/permissions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesRequest(server string, realm string, clientUuid string, scopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "scope-id", runtime.ParamLocationPath, scopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/scope/%s/resources", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsRequest generates requests for GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings
func NewGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/authz/resource-server/settings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidCertificatesAttrRequest generates requests for GetAdminRealmsRealmClientsClientUuidCertificatesAttr
func NewGetAdminRealmsRealmClientsClientUuidCertificatesAttrRequest(server string, realm string, clientUuid string, attr string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/certificates/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadRequest calls the generic PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownload builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadRequest(server string, realm string, clientUuid string, attr string, body PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadRequestWithBody(server, realm, clientUuid, attr, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownload with any type of body
func NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadRequestWithBody(server string, realm string, clientUuid string, attr string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/certificates/%s/download", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateRequest generates requests for PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerate
func NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateRequest(server string, realm string, clientUuid string, attr string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/certificates/%s/generate", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadRequest calls the generic PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownload builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadRequest(server string, realm string, clientUuid string, attr string, body PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadRequestWithBody(server, realm, clientUuid, attr, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownload with any type of body
func NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadRequestWithBody(server string, realm string, clientUuid string, attr string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/certificates/%s/generate-and-download", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadRequest generates requests for PostAdminRealmsRealmClientsClientUuidCertificatesAttrUpload
func NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadRequest(server string, realm string, clientUuid string, attr string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/certificates/%s/upload", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateRequest generates requests for PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificate
func NewPostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateRequest(server string, realm string, clientUuid string, attr string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attr", runtime.ParamLocationPath, attr)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/certificates/%s/upload-certificate", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidClientSecretRequest generates requests for GetAdminRealmsRealmClientsClientUuidClientSecret
func NewGetAdminRealmsRealmClientsClientUuidClientSecretRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/client-secret", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidClientSecretRequest generates requests for PostAdminRealmsRealmClientsClientUuidClientSecret
func NewPostAdminRealmsRealmClientsClientUuidClientSecretRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/client-secret", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedRequest generates requests for DeleteAdminRealmsRealmClientsClientUuidClientSecretRotated
func NewDeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/client-secret/rotated", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidClientSecretRotatedRequest generates requests for GetAdminRealmsRealmClientsClientUuidClientSecretRotated
func NewGetAdminRealmsRealmClientsClientUuidClientSecretRotatedRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/client-secret/rotated", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidDefaultClientScopesRequest generates requests for GetAdminRealmsRealmClientsClientUuidDefaultClientScopes
func NewGetAdminRealmsRealmClientsClientUuidDefaultClientScopesRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/default-client-scopes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdRequest generates requests for DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId
func NewDeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdRequest(server string, realm string, clientUuid string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/default-client-scopes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdRequest generates requests for PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId
func NewPutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdRequest(server string, realm string, clientUuid string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/default-client-scopes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenRequest generates requests for GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken
func NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/evaluate-scopes/generate-example-access-token", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenRequest generates requests for GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken
func NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/evaluate-scopes/generate-example-id-token", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoRequest generates requests for GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo
func NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/evaluate-scopes/generate-example-userinfo", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersRequest generates requests for GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers
func NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/evaluate-scopes/protocol-mappers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedRequest generates requests for GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted
func NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedRequest(server string, realm string, clientUuid string, roleContainerId string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "roleContainerId", runtime.ParamLocationPath, roleContainerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/evaluate-scopes/scope-mappings/%s/granted", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedRequest generates requests for GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted
func NewGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedRequest(server string, realm string, clientUuid string, roleContainerId string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "roleContainerId", runtime.ParamLocationPath, roleContainerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/evaluate-scopes/scope-mappings/%s/not-granted", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdRequest generates requests for GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId
func NewGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdRequest(server string, realm string, clientUuid string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "providerId", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/installation/providers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidManagementPermissionsRequest generates requests for GetAdminRealmsRealmClientsClientUuidManagementPermissions
func NewGetAdminRealmsRealmClientsClientUuidManagementPermissionsRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientsClientUuidManagementPermissionsRequest calls the generic PutAdminRealmsRealmClientsClientUuidManagementPermissions builder with application/json body
func NewPutAdminRealmsRealmClientsClientUuidManagementPermissionsRequest(server string, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientsClientUuidManagementPermissionsRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientsClientUuidManagementPermissionsRequestWithBody generates requests for PutAdminRealmsRealmClientsClientUuidManagementPermissions with any type of body
func NewPutAdminRealmsRealmClientsClientUuidManagementPermissionsRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidNodesRequest calls the generic PostAdminRealmsRealmClientsClientUuidNodes builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidNodesRequest(server string, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidNodesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidNodesRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidNodesRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidNodes with any type of body
func NewPostAdminRealmsRealmClientsClientUuidNodesRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/nodes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmClientsClientUuidNodesNodeRequest generates requests for DeleteAdminRealmsRealmClientsClientUuidNodesNode
func NewDeleteAdminRealmsRealmClientsClientUuidNodesNodeRequest(server string, realm string, clientUuid string, node string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "node", runtime.ParamLocationPath, node)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/nodes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidOfflineSessionCountRequest generates requests for GetAdminRealmsRealmClientsClientUuidOfflineSessionCount
func NewGetAdminRealmsRealmClientsClientUuidOfflineSessionCountRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/offline-session-count", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidOfflineSessionsRequest generates requests for GetAdminRealmsRealmClientsClientUuidOfflineSessions
func NewGetAdminRealmsRealmClientsClientUuidOfflineSessionsRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/offline-sessions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidOptionalClientScopesRequest generates requests for GetAdminRealmsRealmClientsClientUuidOptionalClientScopes
func NewGetAdminRealmsRealmClientsClientUuidOptionalClientScopesRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/optional-client-scopes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdRequest generates requests for DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId
func NewDeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdRequest(server string, realm string, clientUuid string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/optional-client-scopes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdRequest generates requests for PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId
func NewPutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdRequest(server string, realm string, clientUuid string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/optional-client-scopes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsRequest calls the generic PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModels builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsRequest(server string, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModels with any type of body
func NewPostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/protocol-mappers/add-models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidProtocolMappersModelsRequest generates requests for GetAdminRealmsRealmClientsClientUuidProtocolMappersModels
func NewGetAdminRealmsRealmClientsClientUuidProtocolMappersModelsRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidProtocolMappersModelsRequest calls the generic PostAdminRealmsRealmClientsClientUuidProtocolMappersModels builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidProtocolMappersModelsRequest(server string, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidProtocolMappersModelsRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidProtocolMappersModelsRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidProtocolMappersModels with any type of body
func NewPostAdminRealmsRealmClientsClientUuidProtocolMappersModelsRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/protocol-mappers/models", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdRequest generates requests for DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsId
func NewDeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdRequest(server string, realm string, clientUuid string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdRequest generates requests for GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsId
func NewGetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdRequest(server string, realm string, clientUuid string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdRequest calls the generic PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsId builder with application/json body
func NewPutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdRequest(server string, realm string, clientUuid string, id string, body PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdRequestWithBody(server, realm, clientUuid, id, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdRequestWithBody generates requests for PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsId with any type of body
func NewPutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdRequestWithBody(server string, realm string, clientUuid string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/protocol-mappers/models/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolRequest generates requests for GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocol
func NewGetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolRequest(server string, realm string, clientUuid string, protocol string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "protocol", runtime.ParamLocationPath, protocol)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/protocol-mappers/protocol/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidPushRevocationRequest generates requests for PostAdminRealmsRealmClientsClientUuidPushRevocation
func NewPostAdminRealmsRealmClientsClientUuidPushRevocationRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/push-revocation", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenRequest generates requests for PostAdminRealmsRealmClientsClientUuidRegistrationAccessToken
func NewPostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/registration-access-token", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidRolesRequest generates requests for GetAdminRealmsRealmClientsClientUuidRoles
func NewGetAdminRealmsRealmClientsClientUuidRolesRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidRolesRequest calls the generic PostAdminRealmsRealmClientsClientUuidRoles builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidRolesRequest(server string, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidRolesRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidRolesRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidRoles with any type of body
func NewPostAdminRealmsRealmClientsClientUuidRolesRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameRequest generates requests for DeleteAdminRealmsRealmClientsClientUuidRolesRoleName
func NewDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameRequest(server string, realm string, clientUuid string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/roles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameRequest generates requests for GetAdminRealmsRealmClientsClientUuidRolesRoleName
func NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameRequest(server string, realm string, clientUuid string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/roles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientsClientUuidRolesRoleNameRequest calls the generic PutAdminRealmsRealmClientsClientUuidRolesRoleName builder with application/json body
func NewPutAdminRealmsRealmClientsClientUuidRolesRoleNameRequest(server string, realm string, clientUuid string, roleName string, body PutAdminRealmsRealmClientsClientUuidRolesRoleNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientsClientUuidRolesRoleNameRequestWithBody(server, realm, clientUuid, roleName, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientsClientUuidRolesRoleNameRequestWithBody generates requests for PutAdminRealmsRealmClientsClientUuidRolesRoleName with any type of body
func NewPutAdminRealmsRealmClientsClientUuidRolesRoleNameRequestWithBody(server string, realm string, clientUuid string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/roles/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequest calls the generic DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameComposites builder with application/json body
func NewDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequest(server string, realm string, clientUuid string, roleName string, body DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequestWithBody(server, realm, clientUuid, roleName, "application/json", bodyReader)
}

// NewDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequestWithBody generates requests for DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameComposites with any type of body
func NewDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequestWithBody(server string, realm string, clientUuid string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/roles/%s/composites", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequest generates requests for GetAdminRealmsRealmClientsClientUuidRolesRoleNameComposites
func NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequest(server string, realm string, clientUuid string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/roles/%s/composites", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequest calls the generic PostAdminRealmsRealmClientsClientUuidRolesRoleNameComposites builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequest(server string, realm string, clientUuid string, roleName string, body PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequestWithBody(server, realm, clientUuid, roleName, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidRolesRoleNameComposites with any type of body
func NewPostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRequestWithBody(server string, realm string, clientUuid string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/roles/%s/composites", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidRequest generates requests for GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2Uuid
func NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidRequest(server string, realm string, clientUuid string, roleName string, client2Uuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "client2-uuid", runtime.ParamLocationPath, client2Uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/roles/%s/composites/clients/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmRequest generates requests for GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealm
func NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmRequest(server string, realm string, clientUuid string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/roles/%s/composites/realm", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsRequest generates requests for GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroups
func NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsRequest(server string, realm string, clientUuid string, roleName string, params *GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/roles/%s/groups", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsRequest generates requests for GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions
func NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsRequest(server string, realm string, clientUuid string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/roles/%s/management/permissions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsRequest calls the generic PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions builder with application/json body
func NewPutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsRequest(server string, realm string, clientUuid string, roleName string, body PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsRequestWithBody(server, realm, clientUuid, roleName, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsRequestWithBody generates requests for PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions with any type of body
func NewPutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsRequestWithBody(server string, realm string, clientUuid string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/roles/%s/management/permissions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersRequest generates requests for GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsers
func NewGetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersRequest(server string, realm string, clientUuid string, roleName string, params *GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/roles/%s/users", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidScopeMappingsRequest generates requests for GetAdminRealmsRealmClientsClientUuidScopeMappings
func NewGetAdminRealmsRealmClientsClientUuidScopeMappingsRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/scope-mappings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequest calls the generic DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient builder with application/json body
func NewDeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequest(server string, realm string, clientUuid string, client string, body DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequestWithBody(server, realm, clientUuid, client, "application/json", bodyReader)
}

// NewDeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequestWithBody generates requests for DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient with any type of body
func NewDeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequestWithBody(server string, realm string, clientUuid string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequest generates requests for GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient
func NewGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequest(server string, realm string, clientUuid string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequest calls the generic PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequest(server string, realm string, clientUuid string, client string, body PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequestWithBody(server, realm, clientUuid, client, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient with any type of body
func NewPostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientRequestWithBody(server string, realm string, clientUuid string, client string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/scope-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableRequest generates requests for GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailable
func NewGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableRequest(server string, realm string, clientUuid string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/scope-mappings/clients/%s/available", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeRequest generates requests for GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientComposite
func NewGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeRequest(server string, realm string, clientUuid string, client string, params *GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/scope-mappings/clients/%s/composite", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequest calls the generic DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealm builder with application/json body
func NewDeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequest(server string, realm string, clientUuid string, body DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewDeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequestWithBody generates requests for DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealm with any type of body
func NewDeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequest generates requests for GetAdminRealmsRealmClientsClientUuidScopeMappingsRealm
func NewGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequest calls the generic PostAdminRealmsRealmClientsClientUuidScopeMappingsRealm builder with application/json body
func NewPostAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequest(server string, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequestWithBody(server, realm, clientUuid, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequestWithBody generates requests for PostAdminRealmsRealmClientsClientUuidScopeMappingsRealm with any type of body
func NewPostAdminRealmsRealmClientsClientUuidScopeMappingsRealmRequestWithBody(server string, realm string, clientUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/scope-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableRequest generates requests for GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailable
func NewGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/scope-mappings/realm/available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeRequest generates requests for GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmComposite
func NewGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/scope-mappings/realm/composite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidServiceAccountUserRequest generates requests for GetAdminRealmsRealmClientsClientUuidServiceAccountUser
func NewGetAdminRealmsRealmClientsClientUuidServiceAccountUserRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/service-account-user", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidSessionCountRequest generates requests for GetAdminRealmsRealmClientsClientUuidSessionCount
func NewGetAdminRealmsRealmClientsClientUuidSessionCountRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/session-count", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidTestNodesAvailableRequest generates requests for GetAdminRealmsRealmClientsClientUuidTestNodesAvailable
func NewGetAdminRealmsRealmClientsClientUuidTestNodesAvailableRequest(server string, realm string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/test-nodes-available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmClientsClientUuidUserSessionsRequest generates requests for GetAdminRealmsRealmClientsClientUuidUserSessions
func NewGetAdminRealmsRealmClientsClientUuidUserSessionsRequest(server string, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidUserSessionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/clients/%s/user-sessions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmComponentsRequest generates requests for GetAdminRealmsRealmComponents
func NewGetAdminRealmsRealmComponentsRequest(server string, realm string, params *GetAdminRealmsRealmComponentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/components", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Parent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent", runtime.ParamLocationQuery, *params.Parent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmComponentsRequest calls the generic PostAdminRealmsRealmComponents builder with application/json body
func NewPostAdminRealmsRealmComponentsRequest(server string, realm string, body PostAdminRealmsRealmComponentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmComponentsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmComponentsRequestWithBody generates requests for PostAdminRealmsRealmComponents with any type of body
func NewPostAdminRealmsRealmComponentsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/components", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmComponentsIdRequest generates requests for DeleteAdminRealmsRealmComponentsId
func NewDeleteAdminRealmsRealmComponentsIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/components/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmComponentsIdRequest generates requests for GetAdminRealmsRealmComponentsId
func NewGetAdminRealmsRealmComponentsIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/components/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmComponentsIdRequest calls the generic PutAdminRealmsRealmComponentsId builder with application/json body
func NewPutAdminRealmsRealmComponentsIdRequest(server string, realm string, id string, body PutAdminRealmsRealmComponentsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmComponentsIdRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmComponentsIdRequestWithBody generates requests for PutAdminRealmsRealmComponentsId with any type of body
func NewPutAdminRealmsRealmComponentsIdRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/components/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmComponentsIdSubComponentTypesRequest generates requests for GetAdminRealmsRealmComponentsIdSubComponentTypes
func NewGetAdminRealmsRealmComponentsIdSubComponentTypesRequest(server string, realm string, id string, params *GetAdminRealmsRealmComponentsIdSubComponentTypesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/components/%s/sub-component-types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmCredentialRegistratorsRequest generates requests for GetAdminRealmsRealmCredentialRegistrators
func NewGetAdminRealmsRealmCredentialRegistratorsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/credential-registrators", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmDefaultDefaultClientScopesRequest generates requests for GetAdminRealmsRealmDefaultDefaultClientScopes
func NewGetAdminRealmsRealmDefaultDefaultClientScopesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/default-default-client-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdRequest generates requests for DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId
func NewDeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/default-default-client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdRequest generates requests for PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeId
func NewPutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/default-default-client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmDefaultGroupsRequest generates requests for GetAdminRealmsRealmDefaultGroups
func NewGetAdminRealmsRealmDefaultGroupsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/default-groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmDefaultGroupsGroupIdRequest generates requests for DeleteAdminRealmsRealmDefaultGroupsGroupId
func NewDeleteAdminRealmsRealmDefaultGroupsGroupIdRequest(server string, realm string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/default-groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmDefaultGroupsGroupIdRequest generates requests for PutAdminRealmsRealmDefaultGroupsGroupId
func NewPutAdminRealmsRealmDefaultGroupsGroupIdRequest(server string, realm string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/default-groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmDefaultOptionalClientScopesRequest generates requests for GetAdminRealmsRealmDefaultOptionalClientScopes
func NewGetAdminRealmsRealmDefaultOptionalClientScopesRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/default-optional-client-scopes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdRequest generates requests for DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId
func NewDeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/default-optional-client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdRequest generates requests for PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeId
func NewPutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdRequest(server string, realm string, clientScopeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "clientScopeId", runtime.ParamLocationPath, clientScopeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/default-optional-client-scopes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmEventsRequest generates requests for DeleteAdminRealmsRealmEvents
func NewDeleteAdminRealmsRealmEventsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmEventsRequest generates requests for GetAdminRealmsRealmEvents
func NewGetAdminRealmsRealmEventsRequest(server string, realm string, params *GetAdminRealmsRealmEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Client != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client", runtime.ParamLocationQuery, *params.Client); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateFrom", runtime.ParamLocationQuery, *params.DateFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DateTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dateTo", runtime.ParamLocationQuery, *params.DateTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IpAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ipAddress", runtime.ParamLocationQuery, *params.IpAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.User != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmEventsConfigRequest generates requests for GetAdminRealmsRealmEventsConfig
func NewGetAdminRealmsRealmEventsConfigRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/events/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmEventsConfigRequest calls the generic PutAdminRealmsRealmEventsConfig builder with application/json body
func NewPutAdminRealmsRealmEventsConfigRequest(server string, realm string, body PutAdminRealmsRealmEventsConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmEventsConfigRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmEventsConfigRequestWithBody generates requests for PutAdminRealmsRealmEventsConfig with any type of body
func NewPutAdminRealmsRealmEventsConfigRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/events/config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmGroupByPathPathRequest generates requests for GetAdminRealmsRealmGroupByPathPath
func NewGetAdminRealmsRealmGroupByPathPathRequest(server string, realm string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/group-by-path/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmGroupsRequest generates requests for GetAdminRealmsRealmGroups
func NewGetAdminRealmsRealmGroupsRequest(server string, realm string, params *GetAdminRealmsRealmGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exact", runtime.ParamLocationQuery, *params.Exact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PopulateHierarchy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "populateHierarchy", runtime.ParamLocationQuery, *params.PopulateHierarchy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmGroupsRequest calls the generic PostAdminRealmsRealmGroups builder with application/json body
func NewPostAdminRealmsRealmGroupsRequest(server string, realm string, body PostAdminRealmsRealmGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmGroupsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmGroupsRequestWithBody generates requests for PostAdminRealmsRealmGroups with any type of body
func NewPostAdminRealmsRealmGroupsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmGroupsCountRequest generates requests for GetAdminRealmsRealmGroupsCount
func NewGetAdminRealmsRealmGroupsCountRequest(server string, realm string, params *GetAdminRealmsRealmGroupsCountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmGroupsGroupIdRequest generates requests for DeleteAdminRealmsRealmGroupsGroupId
func NewDeleteAdminRealmsRealmGroupsGroupIdRequest(server string, realm string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmGroupsGroupIdRequest generates requests for GetAdminRealmsRealmGroupsGroupId
func NewGetAdminRealmsRealmGroupsGroupIdRequest(server string, realm string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmGroupsGroupIdRequest calls the generic PutAdminRealmsRealmGroupsGroupId builder with application/json body
func NewPutAdminRealmsRealmGroupsGroupIdRequest(server string, realm string, groupId string, body PutAdminRealmsRealmGroupsGroupIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmGroupsGroupIdRequestWithBody(server, realm, groupId, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmGroupsGroupIdRequestWithBody generates requests for PutAdminRealmsRealmGroupsGroupId with any type of body
func NewPutAdminRealmsRealmGroupsGroupIdRequestWithBody(server string, realm string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmGroupsGroupIdChildrenRequest generates requests for GetAdminRealmsRealmGroupsGroupIdChildren
func NewGetAdminRealmsRealmGroupsGroupIdChildrenRequest(server string, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdChildrenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/children", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exact", runtime.ParamLocationQuery, *params.Exact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmGroupsGroupIdChildrenRequest calls the generic PostAdminRealmsRealmGroupsGroupIdChildren builder with application/json body
func NewPostAdminRealmsRealmGroupsGroupIdChildrenRequest(server string, realm string, groupId string, body PostAdminRealmsRealmGroupsGroupIdChildrenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmGroupsGroupIdChildrenRequestWithBody(server, realm, groupId, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmGroupsGroupIdChildrenRequestWithBody generates requests for PostAdminRealmsRealmGroupsGroupIdChildren with any type of body
func NewPostAdminRealmsRealmGroupsGroupIdChildrenRequestWithBody(server string, realm string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/children", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmGroupsGroupIdManagementPermissionsRequest generates requests for GetAdminRealmsRealmGroupsGroupIdManagementPermissions
func NewGetAdminRealmsRealmGroupsGroupIdManagementPermissionsRequest(server string, realm string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmGroupsGroupIdManagementPermissionsRequest calls the generic PutAdminRealmsRealmGroupsGroupIdManagementPermissions builder with application/json body
func NewPutAdminRealmsRealmGroupsGroupIdManagementPermissionsRequest(server string, realm string, groupId string, body PutAdminRealmsRealmGroupsGroupIdManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmGroupsGroupIdManagementPermissionsRequestWithBody(server, realm, groupId, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmGroupsGroupIdManagementPermissionsRequestWithBody generates requests for PutAdminRealmsRealmGroupsGroupIdManagementPermissions with any type of body
func NewPutAdminRealmsRealmGroupsGroupIdManagementPermissionsRequestWithBody(server string, realm string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmGroupsGroupIdMembersRequest generates requests for GetAdminRealmsRealmGroupsGroupIdMembers
func NewGetAdminRealmsRealmGroupsGroupIdMembersRequest(server string, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsRequest generates requests for GetAdminRealmsRealmGroupsGroupIdRoleMappings
func NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsRequest(server string, realm string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/role-mappings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequest calls the generic DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId builder with application/json body
func NewDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequest(server string, realm string, groupId string, clientId string, body DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequestWithBody(server, realm, groupId, clientId, "application/json", bodyReader)
}

// NewDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequestWithBody generates requests for DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId with any type of body
func NewDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequestWithBody(server string, realm string, groupId string, clientId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client-id", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequest generates requests for GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId
func NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequest(server string, realm string, groupId string, clientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client-id", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequest calls the generic PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId builder with application/json body
func NewPostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequest(server string, realm string, groupId string, clientId string, body PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequestWithBody(server, realm, groupId, clientId, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequestWithBody generates requests for PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId with any type of body
func NewPostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdRequestWithBody(server string, realm string, groupId string, clientId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client-id", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableRequest generates requests for GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable
func NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableRequest(server string, realm string, groupId string, clientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client-id", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/role-mappings/clients/%s/available", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeRequest generates requests for GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite
func NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeRequest(server string, realm string, groupId string, clientId string, params *GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client-id", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/role-mappings/clients/%s/composite", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequest calls the generic DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealm builder with application/json body
func NewDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequest(server string, realm string, groupId string, body DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequestWithBody(server, realm, groupId, "application/json", bodyReader)
}

// NewDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequestWithBody generates requests for DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealm with any type of body
func NewDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequestWithBody(server string, realm string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequest generates requests for GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealm
func NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequest(server string, realm string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequest calls the generic PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealm builder with application/json body
func NewPostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequest(server string, realm string, groupId string, body PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequestWithBody(server, realm, groupId, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequestWithBody generates requests for PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealm with any type of body
func NewPostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmRequestWithBody(server string, realm string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableRequest generates requests for GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailable
func NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableRequest(server string, realm string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/role-mappings/realm/available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeRequest generates requests for GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmComposite
func NewGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeRequest(server string, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "group-id", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/groups/%s/role-mappings/realm/composite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmIdentityProviderImportConfigRequest calls the generic PostAdminRealmsRealmIdentityProviderImportConfig builder with application/json body
func NewPostAdminRealmsRealmIdentityProviderImportConfigRequest(server string, realm string, body PostAdminRealmsRealmIdentityProviderImportConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmIdentityProviderImportConfigRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmIdentityProviderImportConfigRequestWithBody generates requests for PostAdminRealmsRealmIdentityProviderImportConfig with any type of body
func NewPostAdminRealmsRealmIdentityProviderImportConfigRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/import-config", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmIdentityProviderInstancesRequest generates requests for GetAdminRealmsRealmIdentityProviderInstances
func NewGetAdminRealmsRealmIdentityProviderInstancesRequest(server string, realm string, params *GetAdminRealmsRealmIdentityProviderInstancesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RealmOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "realmOnly", runtime.ParamLocationQuery, *params.RealmOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmIdentityProviderInstancesRequest calls the generic PostAdminRealmsRealmIdentityProviderInstances builder with application/json body
func NewPostAdminRealmsRealmIdentityProviderInstancesRequest(server string, realm string, body PostAdminRealmsRealmIdentityProviderInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmIdentityProviderInstancesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmIdentityProviderInstancesRequestWithBody generates requests for PostAdminRealmsRealmIdentityProviderInstances with any type of body
func NewPostAdminRealmsRealmIdentityProviderInstancesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmIdentityProviderInstancesAliasRequest generates requests for DeleteAdminRealmsRealmIdentityProviderInstancesAlias
func NewDeleteAdminRealmsRealmIdentityProviderInstancesAliasRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmIdentityProviderInstancesAliasRequest generates requests for GetAdminRealmsRealmIdentityProviderInstancesAlias
func NewGetAdminRealmsRealmIdentityProviderInstancesAliasRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmIdentityProviderInstancesAliasRequest calls the generic PutAdminRealmsRealmIdentityProviderInstancesAlias builder with application/json body
func NewPutAdminRealmsRealmIdentityProviderInstancesAliasRequest(server string, realm string, alias string, body PutAdminRealmsRealmIdentityProviderInstancesAliasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmIdentityProviderInstancesAliasRequestWithBody(server, realm, alias, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmIdentityProviderInstancesAliasRequestWithBody generates requests for PutAdminRealmsRealmIdentityProviderInstancesAlias with any type of body
func NewPutAdminRealmsRealmIdentityProviderInstancesAliasRequestWithBody(server string, realm string, alias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmIdentityProviderInstancesAliasExportRequest generates requests for GetAdminRealmsRealmIdentityProviderInstancesAliasExport
func NewGetAdminRealmsRealmIdentityProviderInstancesAliasExportRequest(server string, realm string, alias string, params *GetAdminRealmsRealmIdentityProviderInstancesAliasExportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances/%s/export", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsRequest generates requests for GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions
func NewGetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsRequest calls the generic PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions builder with application/json body
func NewPutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsRequest(server string, realm string, alias string, body PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsRequestWithBody(server, realm, alias, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsRequestWithBody generates requests for PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions with any type of body
func NewPutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsRequestWithBody(server string, realm string, alias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesRequest generates requests for GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypes
func NewGetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances/%s/mapper-types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmIdentityProviderInstancesAliasMappersRequest generates requests for GetAdminRealmsRealmIdentityProviderInstancesAliasMappers
func NewGetAdminRealmsRealmIdentityProviderInstancesAliasMappersRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances/%s/mappers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmIdentityProviderInstancesAliasMappersRequest calls the generic PostAdminRealmsRealmIdentityProviderInstancesAliasMappers builder with application/json body
func NewPostAdminRealmsRealmIdentityProviderInstancesAliasMappersRequest(server string, realm string, alias string, body PostAdminRealmsRealmIdentityProviderInstancesAliasMappersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmIdentityProviderInstancesAliasMappersRequestWithBody(server, realm, alias, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmIdentityProviderInstancesAliasMappersRequestWithBody generates requests for PostAdminRealmsRealmIdentityProviderInstancesAliasMappers with any type of body
func NewPostAdminRealmsRealmIdentityProviderInstancesAliasMappersRequestWithBody(server string, realm string, alias string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances/%s/mappers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdRequest generates requests for DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersId
func NewDeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdRequest(server string, realm string, alias string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances/%s/mappers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdRequest generates requests for GetAdminRealmsRealmIdentityProviderInstancesAliasMappersId
func NewGetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdRequest(server string, realm string, alias string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances/%s/mappers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdRequest calls the generic PutAdminRealmsRealmIdentityProviderInstancesAliasMappersId builder with application/json body
func NewPutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdRequest(server string, realm string, alias string, id string, body PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdRequestWithBody(server, realm, alias, id, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdRequestWithBody generates requests for PutAdminRealmsRealmIdentityProviderInstancesAliasMappersId with any type of body
func NewPutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdRequestWithBody(server string, realm string, alias string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances/%s/mappers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysRequest generates requests for GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeys
func NewGetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysRequest(server string, realm string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/instances/%s/reload-keys", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmIdentityProviderProvidersProviderIdRequest generates requests for GetAdminRealmsRealmIdentityProviderProvidersProviderId
func NewGetAdminRealmsRealmIdentityProviderProvidersProviderIdRequest(server string, realm string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "provider_id", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/identity-provider/providers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmKeysRequest generates requests for GetAdminRealmsRealmKeys
func NewGetAdminRealmsRealmKeysRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmLocalizationRequest generates requests for GetAdminRealmsRealmLocalization
func NewGetAdminRealmsRealmLocalizationRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/localization", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmLocalizationLocaleRequest generates requests for DeleteAdminRealmsRealmLocalizationLocale
func NewDeleteAdminRealmsRealmLocalizationLocaleRequest(server string, realm string, locale string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "locale", runtime.ParamLocationPath, locale)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/localization/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmLocalizationLocaleRequest generates requests for GetAdminRealmsRealmLocalizationLocale
func NewGetAdminRealmsRealmLocalizationLocaleRequest(server string, realm string, locale string, params *GetAdminRealmsRealmLocalizationLocaleParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "locale", runtime.ParamLocationPath, locale)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/localization/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UseRealmDefaultLocaleFallback != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "useRealmDefaultLocaleFallback", runtime.ParamLocationQuery, *params.UseRealmDefaultLocaleFallback); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmLocalizationLocaleRequest calls the generic PostAdminRealmsRealmLocalizationLocale builder with application/json body
func NewPostAdminRealmsRealmLocalizationLocaleRequest(server string, realm string, locale string, body PostAdminRealmsRealmLocalizationLocaleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmLocalizationLocaleRequestWithBody(server, realm, locale, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmLocalizationLocaleRequestWithBody generates requests for PostAdminRealmsRealmLocalizationLocale with any type of body
func NewPostAdminRealmsRealmLocalizationLocaleRequestWithBody(server string, realm string, locale string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "locale", runtime.ParamLocationPath, locale)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/localization/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmLocalizationLocaleKeyRequest generates requests for DeleteAdminRealmsRealmLocalizationLocaleKey
func NewDeleteAdminRealmsRealmLocalizationLocaleKeyRequest(server string, realm string, locale string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "locale", runtime.ParamLocationPath, locale)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/localization/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmLocalizationLocaleKeyRequest generates requests for GetAdminRealmsRealmLocalizationLocaleKey
func NewGetAdminRealmsRealmLocalizationLocaleKeyRequest(server string, realm string, locale string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "locale", runtime.ParamLocationPath, locale)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/localization/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmLocalizationLocaleKeyRequestWithTextBody calls the generic PutAdminRealmsRealmLocalizationLocaleKey builder with text/plain body
func NewPutAdminRealmsRealmLocalizationLocaleKeyRequestWithTextBody(server string, realm string, locale string, key string, body PutAdminRealmsRealmLocalizationLocaleKeyTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPutAdminRealmsRealmLocalizationLocaleKeyRequestWithBody(server, realm, locale, key, "text/plain", bodyReader)
}

// NewPutAdminRealmsRealmLocalizationLocaleKeyRequestWithBody generates requests for PutAdminRealmsRealmLocalizationLocaleKey with any type of body
func NewPutAdminRealmsRealmLocalizationLocaleKeyRequestWithBody(server string, realm string, locale string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "locale", runtime.ParamLocationPath, locale)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/localization/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmLogoutAllRequest generates requests for PostAdminRealmsRealmLogoutAll
func NewPostAdminRealmsRealmLogoutAllRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/logout-all", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmOrganizationsRequest generates requests for GetAdminRealmsRealmOrganizations
func NewGetAdminRealmsRealmOrganizationsRequest(server string, realm string, params *GetAdminRealmsRealmOrganizationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Exact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exact", runtime.ParamLocationQuery, *params.Exact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmOrganizationsRequest calls the generic PostAdminRealmsRealmOrganizations builder with application/json body
func NewPostAdminRealmsRealmOrganizationsRequest(server string, realm string, body PostAdminRealmsRealmOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmOrganizationsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmOrganizationsRequestWithBody generates requests for PostAdminRealmsRealmOrganizations with any type of body
func NewPostAdminRealmsRealmOrganizationsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmOrganizationsMembersIdOrganizationsRequest generates requests for GetAdminRealmsRealmOrganizationsMembersIdOrganizations
func NewGetAdminRealmsRealmOrganizationsMembersIdOrganizationsRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/members/%s/organizations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmOrganizationsIdRequest generates requests for DeleteAdminRealmsRealmOrganizationsId
func NewDeleteAdminRealmsRealmOrganizationsIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmOrganizationsIdRequest generates requests for GetAdminRealmsRealmOrganizationsId
func NewGetAdminRealmsRealmOrganizationsIdRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmOrganizationsIdRequest calls the generic PutAdminRealmsRealmOrganizationsId builder with application/json body
func NewPutAdminRealmsRealmOrganizationsIdRequest(server string, realm string, id string, body PutAdminRealmsRealmOrganizationsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmOrganizationsIdRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmOrganizationsIdRequestWithBody generates requests for PutAdminRealmsRealmOrganizationsId with any type of body
func NewPutAdminRealmsRealmOrganizationsIdRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmOrganizationsIdIdentityProvidersRequest generates requests for GetAdminRealmsRealmOrganizationsIdIdentityProviders
func NewGetAdminRealmsRealmOrganizationsIdIdentityProvidersRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s/identity-providers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmOrganizationsIdIdentityProvidersRequest calls the generic PostAdminRealmsRealmOrganizationsIdIdentityProviders builder with application/json body
func NewPostAdminRealmsRealmOrganizationsIdIdentityProvidersRequest(server string, realm string, id string, body PostAdminRealmsRealmOrganizationsIdIdentityProvidersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmOrganizationsIdIdentityProvidersRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmOrganizationsIdIdentityProvidersRequestWithBody generates requests for PostAdminRealmsRealmOrganizationsIdIdentityProviders with any type of body
func NewPostAdminRealmsRealmOrganizationsIdIdentityProvidersRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s/identity-providers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasRequest generates requests for DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAlias
func NewDeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasRequest(server string, realm string, id string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s/identity-providers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasRequest generates requests for GetAdminRealmsRealmOrganizationsIdIdentityProvidersAlias
func NewGetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasRequest(server string, realm string, id string, alias string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "alias", runtime.ParamLocationPath, alias)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s/identity-providers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmOrganizationsIdMembersRequest generates requests for GetAdminRealmsRealmOrganizationsIdMembers
func NewGetAdminRealmsRealmOrganizationsIdMembersRequest(server string, realm string, id string, params *GetAdminRealmsRealmOrganizationsIdMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Exact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exact", runtime.ParamLocationQuery, *params.Exact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmOrganizationsIdMembersRequest calls the generic PostAdminRealmsRealmOrganizationsIdMembers builder with application/json body
func NewPostAdminRealmsRealmOrganizationsIdMembersRequest(server string, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmOrganizationsIdMembersRequestWithBody(server, realm, id, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmOrganizationsIdMembersRequestWithBody generates requests for PostAdminRealmsRealmOrganizationsIdMembers with any type of body
func NewPostAdminRealmsRealmOrganizationsIdMembersRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmOrganizationsIdMembersCountRequest generates requests for GetAdminRealmsRealmOrganizationsIdMembersCount
func NewGetAdminRealmsRealmOrganizationsIdMembersCountRequest(server string, realm string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s/members/count", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserRequestWithFormdataBody calls the generic PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUser builder with application/x-www-form-urlencoded body
func NewPostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserRequestWithFormdataBody(server string, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserRequestWithBody(server, realm, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserRequestWithBody generates requests for PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUser with any type of body
func NewPostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s/members/invite-existing-user", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmOrganizationsIdMembersInviteUserRequestWithFormdataBody calls the generic PostAdminRealmsRealmOrganizationsIdMembersInviteUser builder with application/x-www-form-urlencoded body
func NewPostAdminRealmsRealmOrganizationsIdMembersInviteUserRequestWithFormdataBody(server string, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersInviteUserFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAdminRealmsRealmOrganizationsIdMembersInviteUserRequestWithBody(server, realm, id, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAdminRealmsRealmOrganizationsIdMembersInviteUserRequestWithBody generates requests for PostAdminRealmsRealmOrganizationsIdMembersInviteUser with any type of body
func NewPostAdminRealmsRealmOrganizationsIdMembersInviteUserRequestWithBody(server string, realm string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s/members/invite-user", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmOrganizationsIdMembersMemberIdRequest generates requests for DeleteAdminRealmsRealmOrganizationsIdMembersMemberId
func NewDeleteAdminRealmsRealmOrganizationsIdMembersMemberIdRequest(server string, realm string, id string, memberId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "member-id", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s/members/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmOrganizationsIdMembersMemberIdRequest generates requests for GetAdminRealmsRealmOrganizationsIdMembersMemberId
func NewGetAdminRealmsRealmOrganizationsIdMembersMemberIdRequest(server string, realm string, id string, memberId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "member-id", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s/members/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsRequest generates requests for GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizations
func NewGetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsRequest(server string, realm string, id string, memberId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "member-id", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/organizations/%s/members/%s/organizations", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmPartialExportRequest generates requests for PostAdminRealmsRealmPartialExport
func NewPostAdminRealmsRealmPartialExportRequest(server string, realm string, params *PostAdminRealmsRealmPartialExportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/partial-export", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExportClients != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exportClients", runtime.ParamLocationQuery, *params.ExportClients); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExportGroupsAndRoles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exportGroupsAndRoles", runtime.ParamLocationQuery, *params.ExportGroupsAndRoles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmPartialImportRequest calls the generic PostAdminRealmsRealmPartialImport builder with application/json body
func NewPostAdminRealmsRealmPartialImportRequest(server string, realm string, body PostAdminRealmsRealmPartialImportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmPartialImportRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmPartialImportRequestWithBody generates requests for PostAdminRealmsRealmPartialImport with any type of body
func NewPostAdminRealmsRealmPartialImportRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/partialImport", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAdminRealmsRealmPushRevocationRequest generates requests for PostAdminRealmsRealmPushRevocation
func NewPostAdminRealmsRealmPushRevocationRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/push-revocation", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmRolesRequest generates requests for GetAdminRealmsRealmRoles
func NewGetAdminRealmsRealmRolesRequest(server string, realm string, params *GetAdminRealmsRealmRolesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmRolesRequest calls the generic PostAdminRealmsRealmRoles builder with application/json body
func NewPostAdminRealmsRealmRolesRequest(server string, realm string, body PostAdminRealmsRealmRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmRolesRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmRolesRequestWithBody generates requests for PostAdminRealmsRealmRoles with any type of body
func NewPostAdminRealmsRealmRolesRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmRolesByIdRoleIdRequest generates requests for DeleteAdminRealmsRealmRolesByIdRoleId
func NewDeleteAdminRealmsRealmRolesByIdRoleIdRequest(server string, realm string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles-by-id/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmRolesByIdRoleIdRequest generates requests for GetAdminRealmsRealmRolesByIdRoleId
func NewGetAdminRealmsRealmRolesByIdRoleIdRequest(server string, realm string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles-by-id/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmRolesByIdRoleIdRequest calls the generic PutAdminRealmsRealmRolesByIdRoleId builder with application/json body
func NewPutAdminRealmsRealmRolesByIdRoleIdRequest(server string, realm string, roleId string, body PutAdminRealmsRealmRolesByIdRoleIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmRolesByIdRoleIdRequestWithBody(server, realm, roleId, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmRolesByIdRoleIdRequestWithBody generates requests for PutAdminRealmsRealmRolesByIdRoleId with any type of body
func NewPutAdminRealmsRealmRolesByIdRoleIdRequestWithBody(server string, realm string, roleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles-by-id/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmRolesByIdRoleIdCompositesRequest calls the generic DeleteAdminRealmsRealmRolesByIdRoleIdComposites builder with application/json body
func NewDeleteAdminRealmsRealmRolesByIdRoleIdCompositesRequest(server string, realm string, roleId string, body DeleteAdminRealmsRealmRolesByIdRoleIdCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAdminRealmsRealmRolesByIdRoleIdCompositesRequestWithBody(server, realm, roleId, "application/json", bodyReader)
}

// NewDeleteAdminRealmsRealmRolesByIdRoleIdCompositesRequestWithBody generates requests for DeleteAdminRealmsRealmRolesByIdRoleIdComposites with any type of body
func NewDeleteAdminRealmsRealmRolesByIdRoleIdCompositesRequestWithBody(server string, realm string, roleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles-by-id/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmRolesByIdRoleIdCompositesRequest generates requests for GetAdminRealmsRealmRolesByIdRoleIdComposites
func NewGetAdminRealmsRealmRolesByIdRoleIdCompositesRequest(server string, realm string, roleId string, params *GetAdminRealmsRealmRolesByIdRoleIdCompositesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles-by-id/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmRolesByIdRoleIdCompositesRequest calls the generic PostAdminRealmsRealmRolesByIdRoleIdComposites builder with application/json body
func NewPostAdminRealmsRealmRolesByIdRoleIdCompositesRequest(server string, realm string, roleId string, body PostAdminRealmsRealmRolesByIdRoleIdCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmRolesByIdRoleIdCompositesRequestWithBody(server, realm, roleId, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmRolesByIdRoleIdCompositesRequestWithBody generates requests for PostAdminRealmsRealmRolesByIdRoleIdComposites with any type of body
func NewPostAdminRealmsRealmRolesByIdRoleIdCompositesRequestWithBody(server string, realm string, roleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles-by-id/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidRequest generates requests for GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuid
func NewGetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidRequest(server string, realm string, roleId string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientUuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles-by-id/%s/composites/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmRolesByIdRoleIdCompositesRealmRequest generates requests for GetAdminRealmsRealmRolesByIdRoleIdCompositesRealm
func NewGetAdminRealmsRealmRolesByIdRoleIdCompositesRealmRequest(server string, realm string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles-by-id/%s/composites/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsRequest generates requests for GetAdminRealmsRealmRolesByIdRoleIdManagementPermissions
func NewGetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsRequest(server string, realm string, roleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles-by-id/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsRequest calls the generic PutAdminRealmsRealmRolesByIdRoleIdManagementPermissions builder with application/json body
func NewPutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsRequest(server string, realm string, roleId string, body PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsRequestWithBody(server, realm, roleId, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsRequestWithBody generates requests for PutAdminRealmsRealmRolesByIdRoleIdManagementPermissions with any type of body
func NewPutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsRequestWithBody(server string, realm string, roleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-id", runtime.ParamLocationPath, roleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles-by-id/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmRolesRoleNameRequest generates requests for DeleteAdminRealmsRealmRolesRoleName
func NewDeleteAdminRealmsRealmRolesRoleNameRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmRolesRoleNameRequest generates requests for GetAdminRealmsRealmRolesRoleName
func NewGetAdminRealmsRealmRolesRoleNameRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmRolesRoleNameRequest calls the generic PutAdminRealmsRealmRolesRoleName builder with application/json body
func NewPutAdminRealmsRealmRolesRoleNameRequest(server string, realm string, roleName string, body PutAdminRealmsRealmRolesRoleNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmRolesRoleNameRequestWithBody(server, realm, roleName, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmRolesRoleNameRequestWithBody generates requests for PutAdminRealmsRealmRolesRoleName with any type of body
func NewPutAdminRealmsRealmRolesRoleNameRequestWithBody(server string, realm string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAdminRealmsRealmRolesRoleNameCompositesRequest calls the generic DeleteAdminRealmsRealmRolesRoleNameComposites builder with application/json body
func NewDeleteAdminRealmsRealmRolesRoleNameCompositesRequest(server string, realm string, roleName string, body DeleteAdminRealmsRealmRolesRoleNameCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAdminRealmsRealmRolesRoleNameCompositesRequestWithBody(server, realm, roleName, "application/json", bodyReader)
}

// NewDeleteAdminRealmsRealmRolesRoleNameCompositesRequestWithBody generates requests for DeleteAdminRealmsRealmRolesRoleNameComposites with any type of body
func NewDeleteAdminRealmsRealmRolesRoleNameCompositesRequestWithBody(server string, realm string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmRolesRoleNameCompositesRequest generates requests for GetAdminRealmsRealmRolesRoleNameComposites
func NewGetAdminRealmsRealmRolesRoleNameCompositesRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmRolesRoleNameCompositesRequest calls the generic PostAdminRealmsRealmRolesRoleNameComposites builder with application/json body
func NewPostAdminRealmsRealmRolesRoleNameCompositesRequest(server string, realm string, roleName string, body PostAdminRealmsRealmRolesRoleNameCompositesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmRolesRoleNameCompositesRequestWithBody(server, realm, roleName, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmRolesRoleNameCompositesRequestWithBody generates requests for PostAdminRealmsRealmRolesRoleNameComposites with any type of body
func NewPostAdminRealmsRealmRolesRoleNameCompositesRequestWithBody(server string, realm string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles/%s/composites", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidRequest generates requests for GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuid
func NewGetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidRequest(server string, realm string, roleName string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client-uuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles/%s/composites/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmRolesRoleNameCompositesRealmRequest generates requests for GetAdminRealmsRealmRolesRoleNameCompositesRealm
func NewGetAdminRealmsRealmRolesRoleNameCompositesRealmRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles/%s/composites/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmRolesRoleNameGroupsRequest generates requests for GetAdminRealmsRealmRolesRoleNameGroups
func NewGetAdminRealmsRealmRolesRoleNameGroupsRequest(server string, realm string, roleName string, params *GetAdminRealmsRealmRolesRoleNameGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmRolesRoleNameManagementPermissionsRequest generates requests for GetAdminRealmsRealmRolesRoleNameManagementPermissions
func NewGetAdminRealmsRealmRolesRoleNameManagementPermissionsRequest(server string, realm string, roleName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmRolesRoleNameManagementPermissionsRequest calls the generic PutAdminRealmsRealmRolesRoleNameManagementPermissions builder with application/json body
func NewPutAdminRealmsRealmRolesRoleNameManagementPermissionsRequest(server string, realm string, roleName string, body PutAdminRealmsRealmRolesRoleNameManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmRolesRoleNameManagementPermissionsRequestWithBody(server, realm, roleName, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmRolesRoleNameManagementPermissionsRequestWithBody generates requests for PutAdminRealmsRealmRolesRoleNameManagementPermissions with any type of body
func NewPutAdminRealmsRealmRolesRoleNameManagementPermissionsRequestWithBody(server string, realm string, roleName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles/%s/management/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmRolesRoleNameUsersRequest generates requests for GetAdminRealmsRealmRolesRoleNameUsers
func NewGetAdminRealmsRealmRolesRoleNameUsersRequest(server string, realm string, roleName string, params *GetAdminRealmsRealmRolesRoleNameUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "role-name", runtime.ParamLocationPath, roleName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/roles/%s/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmSessionsSessionRequest generates requests for DeleteAdminRealmsRealmSessionsSession
func NewDeleteAdminRealmsRealmSessionsSessionRequest(server string, realm string, session string, params *DeleteAdminRealmsRealmSessionsSessionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "session", runtime.ParamLocationPath, session)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/sessions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IsOffline != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isOffline", runtime.ParamLocationQuery, *params.IsOffline); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmTestSMTPConnectionRequest calls the generic PostAdminRealmsRealmTestSMTPConnection builder with application/json body
func NewPostAdminRealmsRealmTestSMTPConnectionRequest(server string, realm string, body PostAdminRealmsRealmTestSMTPConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmTestSMTPConnectionRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmTestSMTPConnectionRequestWithFormdataBody calls the generic PostAdminRealmsRealmTestSMTPConnection builder with application/x-www-form-urlencoded body
func NewPostAdminRealmsRealmTestSMTPConnectionRequestWithFormdataBody(server string, realm string, body PostAdminRealmsRealmTestSMTPConnectionFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostAdminRealmsRealmTestSMTPConnectionRequestWithBody(server, realm, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostAdminRealmsRealmTestSMTPConnectionRequestWithBody generates requests for PostAdminRealmsRealmTestSMTPConnection with any type of body
func NewPostAdminRealmsRealmTestSMTPConnectionRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/testSMTPConnection", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmUsersRequest generates requests for GetAdminRealmsRealmUsers
func NewGetAdminRealmsRealmUsersRequest(server string, realm string, params *GetAdminRealmsRealmUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailVerified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emailVerified", runtime.ParamLocationQuery, *params.EmailVerified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Exact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exact", runtime.ParamLocationQuery, *params.Exact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdpAlias != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idpAlias", runtime.ParamLocationQuery, *params.IdpAlias); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdpUserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "idpUserId", runtime.ParamLocationQuery, *params.IdpUserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmUsersRequest calls the generic PostAdminRealmsRealmUsers builder with application/json body
func NewPostAdminRealmsRealmUsersRequest(server string, realm string, body PostAdminRealmsRealmUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmUsersRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmUsersRequestWithBody generates requests for PostAdminRealmsRealmUsers with any type of body
func NewPostAdminRealmsRealmUsersRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmUsersManagementPermissionsRequest generates requests for GetAdminRealmsRealmUsersManagementPermissions
func NewGetAdminRealmsRealmUsersManagementPermissionsRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users-management-permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmUsersManagementPermissionsRequest calls the generic PutAdminRealmsRealmUsersManagementPermissions builder with application/json body
func NewPutAdminRealmsRealmUsersManagementPermissionsRequest(server string, realm string, body PutAdminRealmsRealmUsersManagementPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmUsersManagementPermissionsRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmUsersManagementPermissionsRequestWithBody generates requests for PutAdminRealmsRealmUsersManagementPermissions with any type of body
func NewPutAdminRealmsRealmUsersManagementPermissionsRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users-management-permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmUsersCountRequest generates requests for GetAdminRealmsRealmUsersCount
func NewGetAdminRealmsRealmUsersCountRequest(server string, realm string, params *GetAdminRealmsRealmUsersCountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EmailVerified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emailVerified", runtime.ParamLocationQuery, *params.EmailVerified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Enabled != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enabled", runtime.ParamLocationQuery, *params.Enabled); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Username != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersProfileRequest generates requests for GetUsersProfile
func NewGetAdminRealmsRealmUsersProfileRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmUsersProfileRequest calls the generic UpdateUsersProfile builder with application/json body
func NewPutAdminRealmsRealmUsersProfileRequest(server string, realm string, body PutAdminRealmsRealmUsersProfileJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmUsersProfileRequestWithBody(server, realm, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmUsersProfileRequestWithBody generates requests for UpdateUsersProfile with any type of body
func NewPutAdminRealmsRealmUsersProfileRequestWithBody(server string, realm string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/profile", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmUsersProfileMetadataRequest generates requests for GetAdminRealmsRealmUsersProfileMetadata
func NewGetAdminRealmsRealmUsersProfileMetadataRequest(server string, realm string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/profile/metadata", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmUsersUserIdRequest generates requests for DeleteAdminRealmsRealmUsersUserId
func NewDeleteAdminRealmsRealmUsersUserIdRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdRequest generates requests for GetAdminRealmsRealmUsersUserId
func NewGetAdminRealmsRealmUsersUserIdRequest(server string, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserProfileMetadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userProfileMetadata", runtime.ParamLocationQuery, *params.UserProfileMetadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdRequest calls the generic PutAdminRealmsRealmUsersUserId builder with application/json body
func NewPutAdminRealmsRealmUsersUserIdRequest(server string, realm string, userId string, body PutAdminRealmsRealmUsersUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmUsersUserIdRequestWithBody(server, realm, userId, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmUsersUserIdRequestWithBody generates requests for PutAdminRealmsRealmUsersUserId with any type of body
func NewPutAdminRealmsRealmUsersUserIdRequestWithBody(server string, realm string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesRequest generates requests for GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypes
func NewGetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/configured-user-storage-credential-types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdConsentsRequest generates requests for GetAdminRealmsRealmUsersUserIdConsents
func NewGetAdminRealmsRealmUsersUserIdConsentsRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/consents", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmUsersUserIdConsentsClientRequest generates requests for DeleteAdminRealmsRealmUsersUserIdConsentsClient
func NewDeleteAdminRealmsRealmUsersUserIdConsentsClientRequest(server string, realm string, userId string, client string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client", runtime.ParamLocationPath, client)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/consents/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdCredentialsRequest generates requests for GetAdminRealmsRealmUsersUserIdCredentials
func NewGetAdminRealmsRealmUsersUserIdCredentialsRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/credentials", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdRequest generates requests for DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialId
func NewDeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdRequest(server string, realm string, userId string, credentialId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/credentials/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdRequest generates requests for PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId
func NewPostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdRequest(server string, realm string, userId string, credentialId string, newPreviousCredentialId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "newPreviousCredentialId", runtime.ParamLocationPath, newPreviousCredentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/credentials/%s/moveAfter/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstRequest generates requests for PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirst
func NewPostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstRequest(server string, realm string, userId string, credentialId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/credentials/%s/moveToFirst", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelRequestWithTextBody calls the generic PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabel builder with text/plain body
func NewPutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelRequestWithTextBody(server string, realm string, userId string, credentialId string, body PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelRequestWithBody(server, realm, userId, credentialId, "text/plain", bodyReader)
}

// NewPutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelRequestWithBody generates requests for PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabel with any type of body
func NewPutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelRequestWithBody(server string, realm string, userId string, credentialId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "credentialId", runtime.ParamLocationPath, credentialId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/credentials/%s/userLabel", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequest calls the generic PutAdminRealmsRealmUsersUserIdDisableCredentialTypes builder with application/json body
func NewPutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequest(server string, realm string, userId string, body PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequestWithBody(server, realm, userId, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequestWithBody generates requests for PutAdminRealmsRealmUsersUserIdDisableCredentialTypes with any type of body
func NewPutAdminRealmsRealmUsersUserIdDisableCredentialTypesRequestWithBody(server string, realm string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/disable-credential-types", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequest calls the generic PutAdminRealmsRealmUsersUserIdExecuteActionsEmail builder with application/json body
func NewPutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequest(server string, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, body PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequestWithBody(server, realm, userId, params, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequestWithBody generates requests for PutAdminRealmsRealmUsersUserIdExecuteActionsEmail with any type of body
func NewPutAdminRealmsRealmUsersUserIdExecuteActionsEmailRequestWithBody(server string, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/execute-actions-email", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lifespan != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifespan", runtime.ParamLocationQuery, *params.Lifespan); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RedirectUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdFederatedIdentityRequest generates requests for GetAdminRealmsRealmUsersUserIdFederatedIdentity
func NewGetAdminRealmsRealmUsersUserIdFederatedIdentityRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/federated-identity", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderRequest generates requests for DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProvider
func NewDeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderRequest(server string, realm string, userId string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/federated-identity/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmUsersUserIdFederatedIdentityProviderRequest generates requests for PostAdminRealmsRealmUsersUserIdFederatedIdentityProvider
func NewPostAdminRealmsRealmUsersUserIdFederatedIdentityProviderRequest(server string, realm string, userId string, provider string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "provider", runtime.ParamLocationPath, provider)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/federated-identity/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdGroupsRequest generates requests for GetAdminRealmsRealmUsersUserIdGroups
func NewGetAdminRealmsRealmUsersUserIdGroupsRequest(server string, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.First != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first", runtime.ParamLocationQuery, *params.First); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Max != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max", runtime.ParamLocationQuery, *params.Max); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdGroupsCountRequest generates requests for GetAdminRealmsRealmUsersUserIdGroupsCount
func NewGetAdminRealmsRealmUsersUserIdGroupsCountRequest(server string, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsCountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/groups/count", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmUsersUserIdGroupsGroupIdRequest generates requests for DeleteAdminRealmsRealmUsersUserIdGroupsGroupId
func NewDeleteAdminRealmsRealmUsersUserIdGroupsGroupIdRequest(server string, realm string, userId string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdGroupsGroupIdRequest generates requests for PutAdminRealmsRealmUsersUserIdGroupsGroupId
func NewPutAdminRealmsRealmUsersUserIdGroupsGroupIdRequest(server string, realm string, userId string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmUsersUserIdImpersonationRequest generates requests for PostAdminRealmsRealmUsersUserIdImpersonation
func NewPostAdminRealmsRealmUsersUserIdImpersonationRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/impersonation", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmUsersUserIdLogoutRequest generates requests for PostAdminRealmsRealmUsersUserIdLogout
func NewPostAdminRealmsRealmUsersUserIdLogoutRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/logout", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidRequest generates requests for GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuid
func NewGetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidRequest(server string, realm string, userId string, clientUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "clientUuid", runtime.ParamLocationPath, clientUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/offline-sessions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdResetPasswordRequest calls the generic PutAdminRealmsRealmUsersUserIdResetPassword builder with application/json body
func NewPutAdminRealmsRealmUsersUserIdResetPasswordRequest(server string, realm string, userId string, body PutAdminRealmsRealmUsersUserIdResetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAdminRealmsRealmUsersUserIdResetPasswordRequestWithBody(server, realm, userId, "application/json", bodyReader)
}

// NewPutAdminRealmsRealmUsersUserIdResetPasswordRequestWithBody generates requests for PutAdminRealmsRealmUsersUserIdResetPassword with any type of body
func NewPutAdminRealmsRealmUsersUserIdResetPasswordRequestWithBody(server string, realm string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/reset-password", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdResetPasswordEmailRequest generates requests for PutAdminRealmsRealmUsersUserIdResetPasswordEmail
func NewPutAdminRealmsRealmUsersUserIdResetPasswordEmailRequest(server string, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/reset-password-email", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RedirectUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdRoleMappingsRequest generates requests for GetAdminRealmsRealmUsersUserIdRoleMappings
func NewGetAdminRealmsRealmUsersUserIdRoleMappingsRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/role-mappings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequest calls the generic DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId builder with application/json body
func NewDeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequest(server string, realm string, userId string, clientId string, body DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequestWithBody(server, realm, userId, clientId, "application/json", bodyReader)
}

// NewDeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequestWithBody generates requests for DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId with any type of body
func NewDeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequestWithBody(server string, realm string, userId string, clientId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client-id", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequest generates requests for GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId
func NewGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequest(server string, realm string, userId string, clientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client-id", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequest calls the generic PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId builder with application/json body
func NewPostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequest(server string, realm string, userId string, clientId string, body PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequestWithBody(server, realm, userId, clientId, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequestWithBody generates requests for PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId with any type of body
func NewPostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdRequestWithBody(server string, realm string, userId string, clientId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client-id", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/role-mappings/clients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableRequest generates requests for GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable
func NewGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableRequest(server string, realm string, userId string, clientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client-id", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/role-mappings/clients/%s/available", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeRequest generates requests for GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite
func NewGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeRequest(server string, realm string, userId string, clientId string, params *GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "client-id", runtime.ParamLocationPath, clientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/role-mappings/clients/%s/composite", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmRequest calls the generic DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealm builder with application/json body
func NewDeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmRequest(server string, realm string, userId string, body DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmRequestWithBody(server, realm, userId, "application/json", bodyReader)
}

// NewDeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmRequestWithBody generates requests for DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealm with any type of body
func NewDeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmRequestWithBody(server string, realm string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdRoleMappingsRealmRequest generates requests for GetAdminRealmsRealmUsersUserIdRoleMappingsRealm
func NewGetAdminRealmsRealmUsersUserIdRoleMappingsRealmRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAdminRealmsRealmUsersUserIdRoleMappingsRealmRequest calls the generic PostAdminRealmsRealmUsersUserIdRoleMappingsRealm builder with application/json body
func NewPostAdminRealmsRealmUsersUserIdRoleMappingsRealmRequest(server string, realm string, userId string, body PostAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAdminRealmsRealmUsersUserIdRoleMappingsRealmRequestWithBody(server, realm, userId, "application/json", bodyReader)
}

// NewPostAdminRealmsRealmUsersUserIdRoleMappingsRealmRequestWithBody generates requests for PostAdminRealmsRealmUsersUserIdRoleMappingsRealm with any type of body
func NewPostAdminRealmsRealmUsersUserIdRoleMappingsRealmRequestWithBody(server string, realm string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/role-mappings/realm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableRequest generates requests for GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailable
func NewGetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/role-mappings/realm/available", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeRequest generates requests for GetAdminRealmsRealmUsersUserIdRoleMappingsRealmComposite
func NewGetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeRequest(server string, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/role-mappings/realm/composite", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BriefRepresentation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "briefRepresentation", runtime.ParamLocationQuery, *params.BriefRepresentation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminRealmsRealmUsersUserIdSendVerifyEmailRequest generates requests for PutAdminRealmsRealmUsersUserIdSendVerifyEmail
func NewPutAdminRealmsRealmUsersUserIdSendVerifyEmailRequest(server string, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/send-verify-email", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ClientId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Lifespan != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lifespan", runtime.ParamLocationQuery, *params.Lifespan); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RedirectUri != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdSessionsRequest generates requests for GetAdminRealmsRealmUsersUserIdSessions
func NewGetAdminRealmsRealmUsersUserIdSessionsRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/sessions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminRealmsRealmUsersUserIdUnmanagedAttributesRequest generates requests for GetAdminRealmsRealmUsersUserIdUnmanagedAttributes
func NewGetAdminRealmsRealmUsersUserIdUnmanagedAttributesRequest(server string, realm string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "realm", runtime.ParamLocationPath, realm)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/realms/%s/users/%s/unmanagedAttributes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAdminRealmsWithResponse request
	GetAdminRealmsWithResponse(ctx context.Context, params *GetAdminRealmsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsResponse, error)

	// PostAdminRealmsWithBodyWithResponse request with any body
	PostAdminRealmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsResponse, error)

	PostAdminRealmsWithResponse(ctx context.Context, body PostAdminRealmsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsResponse, error)

	// DeleteAdminRealmsRealmWithResponse request
	DeleteAdminRealmsRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmResponse, error)

	// GetAdminRealmsRealmWithResponse request
	GetAdminRealmsRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmResponse, error)

	// PutAdminRealmsRealmWithBodyWithResponse request with any body
	PutAdminRealmsRealmWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmResponse, error)

	PutAdminRealmsRealmWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmResponse, error)

	// DeleteAdminRealmsRealmAdminEventsWithResponse request
	DeleteAdminRealmsRealmAdminEventsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAdminEventsResponse, error)

	// GetAdminRealmsRealmAdminEventsWithResponse request
	GetAdminRealmsRealmAdminEventsWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmAdminEventsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAdminEventsResponse, error)

	// DeleteAdminRealmsRealmAttackDetectionBruteForceUsersWithResponse request
	DeleteAdminRealmsRealmAttackDetectionBruteForceUsersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAttackDetectionBruteForceUsersResponse, error)

	// DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdWithResponse request
	DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse, error)

	// GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdWithResponse request
	GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse, error)

	// GetAdminRealmsRealmAuthenticationAuthenticatorProvidersWithResponse request
	GetAdminRealmsRealmAuthenticationAuthenticatorProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationAuthenticatorProvidersResponse, error)

	// GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersWithResponse request
	GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersResponse, error)

	// PostAdminRealmsRealmAuthenticationConfigWithBodyWithResponse request with any body
	PostAdminRealmsRealmAuthenticationConfigWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationConfigResponse, error)

	PostAdminRealmsRealmAuthenticationConfigWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationConfigResponse, error)

	// GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdWithResponse request
	GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdWithResponse(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdResponse, error)

	// DeleteAdminRealmsRealmAuthenticationConfigIdWithResponse request
	DeleteAdminRealmsRealmAuthenticationConfigIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAuthenticationConfigIdResponse, error)

	// GetAdminRealmsRealmAuthenticationConfigIdWithResponse request
	GetAdminRealmsRealmAuthenticationConfigIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationConfigIdResponse, error)

	// PutAdminRealmsRealmAuthenticationConfigIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmAuthenticationConfigIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationConfigIdResponse, error)

	PutAdminRealmsRealmAuthenticationConfigIdWithResponse(ctx context.Context, realm string, id string, body PutAdminRealmsRealmAuthenticationConfigIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationConfigIdResponse, error)

	// PostAdminRealmsRealmAuthenticationExecutionsWithBodyWithResponse request with any body
	PostAdminRealmsRealmAuthenticationExecutionsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationExecutionsResponse, error)

	PostAdminRealmsRealmAuthenticationExecutionsWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationExecutionsResponse, error)

	// DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdWithResponse request
	DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse, error)

	// GetAdminRealmsRealmAuthenticationExecutionsExecutionIdWithResponse request
	GetAdminRealmsRealmAuthenticationExecutionsExecutionIdWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse, error)

	// PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigWithBodyWithResponse request with any body
	PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigWithBodyWithResponse(ctx context.Context, realm string, executionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResponse, error)

	PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigWithResponse(ctx context.Context, realm string, executionId string, body PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResponse, error)

	// GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdWithResponse request
	GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdWithResponse(ctx context.Context, realm string, executionId string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdResponse, error)

	// PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityWithResponse request
	PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse, error)

	// PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityWithResponse request
	PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse, error)

	// GetAdminRealmsRealmAuthenticationFlowsWithResponse request
	GetAdminRealmsRealmAuthenticationFlowsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationFlowsResponse, error)

	// PostAdminRealmsRealmAuthenticationFlowsWithBodyWithResponse request with any body
	PostAdminRealmsRealmAuthenticationFlowsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsResponse, error)

	PostAdminRealmsRealmAuthenticationFlowsWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsResponse, error)

	// PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyWithBodyWithResponse request with any body
	PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResponse, error)

	PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyWithResponse(ctx context.Context, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResponse, error)

	// GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithResponse request
	GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithResponse(ctx context.Context, realm string, flowAlias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse, error)

	// PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithBodyWithResponse request with any body
	PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse, error)

	PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithResponse(ctx context.Context, realm string, flowAlias string, body PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse, error)

	// PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBodyWithResponse request with any body
	PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse, error)

	PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithResponse(ctx context.Context, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse, error)

	// PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBodyWithResponse request with any body
	PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse, error)

	PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowWithResponse(ctx context.Context, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse, error)

	// DeleteAdminRealmsRealmAuthenticationFlowsIdWithResponse request
	DeleteAdminRealmsRealmAuthenticationFlowsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAuthenticationFlowsIdResponse, error)

	// GetAdminRealmsRealmAuthenticationFlowsIdWithResponse request
	GetAdminRealmsRealmAuthenticationFlowsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationFlowsIdResponse, error)

	// PutAdminRealmsRealmAuthenticationFlowsIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmAuthenticationFlowsIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationFlowsIdResponse, error)

	PutAdminRealmsRealmAuthenticationFlowsIdWithResponse(ctx context.Context, realm string, id string, body PutAdminRealmsRealmAuthenticationFlowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationFlowsIdResponse, error)

	// GetAdminRealmsRealmAuthenticationFormActionProvidersWithResponse request
	GetAdminRealmsRealmAuthenticationFormActionProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationFormActionProvidersResponse, error)

	// GetAdminRealmsRealmAuthenticationFormProvidersWithResponse request
	GetAdminRealmsRealmAuthenticationFormProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationFormProvidersResponse, error)

	// GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionWithResponse request
	GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionResponse, error)

	// PostAdminRealmsRealmAuthenticationRegisterRequiredActionWithBodyWithResponse request with any body
	PostAdminRealmsRealmAuthenticationRegisterRequiredActionWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationRegisterRequiredActionResponse, error)

	PostAdminRealmsRealmAuthenticationRegisterRequiredActionWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationRegisterRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationRegisterRequiredActionResponse, error)

	// GetAdminRealmsRealmAuthenticationRequiredActionsWithResponse request
	GetAdminRealmsRealmAuthenticationRequiredActionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationRequiredActionsResponse, error)

	// DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasWithResponse request
	DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasResponse, error)

	// GetAdminRealmsRealmAuthenticationRequiredActionsAliasWithResponse request
	GetAdminRealmsRealmAuthenticationRequiredActionsAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationRequiredActionsAliasResponse, error)

	// PutAdminRealmsRealmAuthenticationRequiredActionsAliasWithBodyWithResponse request with any body
	PutAdminRealmsRealmAuthenticationRequiredActionsAliasWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationRequiredActionsAliasResponse, error)

	PutAdminRealmsRealmAuthenticationRequiredActionsAliasWithResponse(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmAuthenticationRequiredActionsAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationRequiredActionsAliasResponse, error)

	// DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithResponse request
	DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse, error)

	// GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithResponse request
	GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse, error)

	// PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithBodyWithResponse request with any body
	PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse, error)

	PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithResponse(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse, error)

	// GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionWithResponse request
	GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionResponse, error)

	// PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityWithResponse request
	PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityResponse, error)

	// PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityWithResponse request
	PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityResponse, error)

	// GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsWithResponse request
	GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsResponse, error)

	// PostAdminRealmsRealmClientDescriptionConverterWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientDescriptionConverterWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientDescriptionConverterResponse, error)

	PostAdminRealmsRealmClientDescriptionConverterWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmClientDescriptionConverterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientDescriptionConverterResponse, error)

	PostAdminRealmsRealmClientDescriptionConverterWithTextBodyWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmClientDescriptionConverterTextRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientDescriptionConverterResponse, error)

	// GetAdminRealmsRealmClientPoliciesPoliciesWithResponse request
	GetAdminRealmsRealmClientPoliciesPoliciesWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmClientPoliciesPoliciesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientPoliciesPoliciesResponse, error)

	// PutAdminRealmsRealmClientPoliciesPoliciesWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientPoliciesPoliciesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientPoliciesPoliciesResponse, error)

	PutAdminRealmsRealmClientPoliciesPoliciesWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmClientPoliciesPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientPoliciesPoliciesResponse, error)

	// GetAdminRealmsRealmClientPoliciesProfilesWithResponse request
	GetAdminRealmsRealmClientPoliciesProfilesWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmClientPoliciesProfilesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientPoliciesProfilesResponse, error)

	// PutAdminRealmsRealmClientPoliciesProfilesWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientPoliciesProfilesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientPoliciesProfilesResponse, error)

	PutAdminRealmsRealmClientPoliciesProfilesWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmClientPoliciesProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientPoliciesProfilesResponse, error)

	// GetAdminRealmsRealmClientRegistrationPolicyProvidersWithResponse request
	GetAdminRealmsRealmClientRegistrationPolicyProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientRegistrationPolicyProvidersResponse, error)

	// GetAdminRealmsRealmClientScopesWithResponse request
	GetAdminRealmsRealmClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesResponse, error)

	// PostAdminRealmsRealmClientScopesWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientScopesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesResponse, error)

	PostAdminRealmsRealmClientScopesWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmClientScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesResponse, error)

	// DeleteAdminRealmsRealmClientScopesClientScopeIdWithResponse request
	DeleteAdminRealmsRealmClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientScopesClientScopeIdResponse, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdWithResponse request
	GetAdminRealmsRealmClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdResponse, error)

	// PutAdminRealmsRealmClientScopesClientScopeIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientScopesClientScopeIdWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientScopesClientScopeIdResponse, error)

	PutAdminRealmsRealmClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, body PutAdminRealmsRealmClientScopesClientScopeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientScopesClientScopeIdResponse, error)

	// PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResponse, error)

	PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResponse, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithResponse request
	GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse, error)

	// PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse, error)

	PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse, error)

	// DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithResponse request
	DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithResponse request
	GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse, error)

	// PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse, error)

	PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientScopeId string, id string, body PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolWithResponse request
	GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolWithResponse(ctx context.Context, realm string, clientScopeId string, protocol string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolResponse, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsWithResponse request
	GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsResponse, error)

	// DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse request with any body
	DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse, error)

	DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientScopeId string, client string, body DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithResponse request
	GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse, error)

	// PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse, error)

	PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientScopeId string, client string, body PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableWithResponse request
	GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableWithResponse(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableResponse, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeWithResponse request
	GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeWithResponse(ctx context.Context, realm string, clientScopeId string, client string, params *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeResponse, error)

	// DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBodyWithResponse request with any body
	DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse, error)

	DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientScopeId string, body DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithResponse request
	GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse, error)

	// PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse, error)

	PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableWithResponse request
	GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableResponse, error)

	// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeWithResponse request
	GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, clientScopeId string, params *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeResponse, error)

	// GetAdminRealmsRealmClientSessionStatsWithResponse request
	GetAdminRealmsRealmClientSessionStatsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientSessionStatsResponse, error)

	// GetAdminRealmsRealmClientTemplatesWithResponse request
	GetAdminRealmsRealmClientTemplatesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesResponse, error)

	// PostAdminRealmsRealmClientTemplatesWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientTemplatesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesResponse, error)

	PostAdminRealmsRealmClientTemplatesWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmClientTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesResponse, error)

	// DeleteAdminRealmsRealmClientTemplatesClientScopeIdWithResponse request
	DeleteAdminRealmsRealmClientTemplatesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdResponse, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdWithResponse request
	GetAdminRealmsRealmClientTemplatesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdResponse, error)

	// PutAdminRealmsRealmClientTemplatesClientScopeIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientTemplatesClientScopeIdWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientTemplatesClientScopeIdResponse, error)

	PutAdminRealmsRealmClientTemplatesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, body PutAdminRealmsRealmClientTemplatesClientScopeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientTemplatesClientScopeIdResponse, error)

	// PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResponse, error)

	PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResponse, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithResponse request
	GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse, error)

	// PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse, error)

	PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse, error)

	// DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithResponse request
	DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithResponse request
	GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse, error)

	// PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse, error)

	PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientScopeId string, id string, body PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolWithResponse request
	GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolWithResponse(ctx context.Context, realm string, clientScopeId string, protocol string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolResponse, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsWithResponse request
	GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsResponse, error)

	// DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse request with any body
	DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse, error)

	DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientScopeId string, client string, body DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithResponse request
	GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse, error)

	// PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse, error)

	PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientScopeId string, client string, body PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableWithResponse request
	GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableWithResponse(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableResponse, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeWithResponse request
	GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeWithResponse(ctx context.Context, realm string, clientScopeId string, client string, params *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeResponse, error)

	// DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBodyWithResponse request with any body
	DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse, error)

	DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientScopeId string, body DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithResponse request
	GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse, error)

	// PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse, error)

	PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableWithResponse request
	GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableResponse, error)

	// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeWithResponse request
	GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, clientScopeId string, params *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeResponse, error)

	// GetAdminRealmsRealmClientTypesWithResponse request
	GetAdminRealmsRealmClientTypesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTypesResponse, error)

	// PutAdminRealmsRealmClientTypesWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientTypesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientTypesResponse, error)

	PutAdminRealmsRealmClientTypesWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmClientTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientTypesResponse, error)

	// GetAdminRealmsRealmClientsWithResponse request
	GetAdminRealmsRealmClientsWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmClientsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsResponse, error)

	// PostAdminRealmsRealmClientsWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsResponse, error)

	PostAdminRealmsRealmClientsWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsResponse, error)

	// GetAdminRealmsRealmClientsInitialAccessWithResponse request
	GetAdminRealmsRealmClientsInitialAccessWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsInitialAccessResponse, error)

	// PostAdminRealmsRealmClientsInitialAccessWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsInitialAccessWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsInitialAccessResponse, error)

	PostAdminRealmsRealmClientsInitialAccessWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmClientsInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsInitialAccessResponse, error)

	// DeleteAdminRealmsRealmClientsInitialAccessIdWithResponse request
	DeleteAdminRealmsRealmClientsInitialAccessIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsInitialAccessIdResponse, error)

	// DeleteAdminRealmsRealmClientsClientUuidWithResponse request
	DeleteAdminRealmsRealmClientsClientUuidWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidResponse, error)

	// GetAdminRealmsRealmClientsClientUuidWithResponse request
	GetAdminRealmsRealmClientsClientUuidWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidResponse, error)

	// PutAdminRealmsRealmClientsClientUuidWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientsClientUuidWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidResponse, error)

	PutAdminRealmsRealmClientsClientUuidWithResponse(ctx context.Context, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse, error)

	// PutAdminRealmsRealmClientsClientUuidAuthzResourceServerWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientsClientUuidAuthzResourceServerWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse, error)

	PutAdminRealmsRealmClientsClientUuidAuthzResourceServerWithResponse(ctx context.Context, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse, error)

	// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportResponse, error)

	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse, error)

	// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse, error)

	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse, error)

	// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateResponse, error)

	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse, error)

	// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse, error)

	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse, error)

	// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateResponse, error)

	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse, error)

	// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, params *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse, error)

	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithResponse(ctx context.Context, realm string, clientUuid string, params *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchResponse, error)

	// DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithResponse request
	DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithResponse(ctx context.Context, realm string, clientUuid string, resourceId string, params *DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithResponse(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse, error)

	// PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, resourceId string, params *PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse, error)

	PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithResponse(ctx context.Context, realm string, clientUuid string, resourceId string, params *PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesWithResponse(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsWithResponse(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesWithResponse(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse, error)

	// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse, error)

	PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchResponse, error)

	// DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithResponse request
	DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithResponse(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithResponse(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse, error)

	// PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, scopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse, error)

	PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithResponse(ctx context.Context, realm string, clientUuid string, scopeId string, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsWithResponse(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesWithResponse(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesResponse, error)

	// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsWithResponse request
	GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsResponse, error)

	// GetAdminRealmsRealmClientsClientUuidCertificatesAttrWithResponse request
	GetAdminRealmsRealmClientsClientUuidCertificatesAttrWithResponse(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidCertificatesAttrResponse, error)

	// PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadResponse, error)

	PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadWithResponse(ctx context.Context, realm string, clientUuid string, attr string, body PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadResponse, error)

	// PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateWithResponse request
	PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateWithResponse(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateResponse, error)

	// PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadResponse, error)

	PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadWithResponse(ctx context.Context, realm string, clientUuid string, attr string, body PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadResponse, error)

	// PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadWithResponse request
	PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadWithResponse(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadResponse, error)

	// PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateWithResponse request
	PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateWithResponse(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateResponse, error)

	// GetAdminRealmsRealmClientsClientUuidClientSecretWithResponse request
	GetAdminRealmsRealmClientsClientUuidClientSecretWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidClientSecretResponse, error)

	// PostAdminRealmsRealmClientsClientUuidClientSecretWithResponse request
	PostAdminRealmsRealmClientsClientUuidClientSecretWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidClientSecretResponse, error)

	// DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedWithResponse request
	DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse, error)

	// GetAdminRealmsRealmClientsClientUuidClientSecretRotatedWithResponse request
	GetAdminRealmsRealmClientsClientUuidClientSecretRotatedWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse, error)

	// GetAdminRealmsRealmClientsClientUuidDefaultClientScopesWithResponse request
	GetAdminRealmsRealmClientsClientUuidDefaultClientScopesWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidDefaultClientScopesResponse, error)

	// DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdWithResponse request
	DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse, error)

	// PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdWithResponse request
	PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse, error)

	// GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenWithResponse request
	GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenResponse, error)

	// GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenWithResponse request
	GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenResponse, error)

	// GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoWithResponse request
	GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoResponse, error)

	// GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersWithResponse request
	GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersResponse, error)

	// GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedWithResponse request
	GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedWithResponse(ctx context.Context, realm string, clientUuid string, roleContainerId string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse, error)

	// GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedWithResponse request
	GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedWithResponse(ctx context.Context, realm string, clientUuid string, roleContainerId string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse, error)

	// GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdWithResponse request
	GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdWithResponse(ctx context.Context, realm string, clientUuid string, providerId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdResponse, error)

	// GetAdminRealmsRealmClientsClientUuidManagementPermissionsWithResponse request
	GetAdminRealmsRealmClientsClientUuidManagementPermissionsWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidManagementPermissionsResponse, error)

	// PutAdminRealmsRealmClientsClientUuidManagementPermissionsWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientsClientUuidManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidManagementPermissionsResponse, error)

	PutAdminRealmsRealmClientsClientUuidManagementPermissionsWithResponse(ctx context.Context, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidManagementPermissionsResponse, error)

	// PostAdminRealmsRealmClientsClientUuidNodesWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidNodesWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidNodesResponse, error)

	PostAdminRealmsRealmClientsClientUuidNodesWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidNodesResponse, error)

	// DeleteAdminRealmsRealmClientsClientUuidNodesNodeWithResponse request
	DeleteAdminRealmsRealmClientsClientUuidNodesNodeWithResponse(ctx context.Context, realm string, clientUuid string, node string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidNodesNodeResponse, error)

	// GetAdminRealmsRealmClientsClientUuidOfflineSessionCountWithResponse request
	GetAdminRealmsRealmClientsClientUuidOfflineSessionCountWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidOfflineSessionCountResponse, error)

	// GetAdminRealmsRealmClientsClientUuidOfflineSessionsWithResponse request
	GetAdminRealmsRealmClientsClientUuidOfflineSessionsWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidOfflineSessionsResponse, error)

	// GetAdminRealmsRealmClientsClientUuidOptionalClientScopesWithResponse request
	GetAdminRealmsRealmClientsClientUuidOptionalClientScopesWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidOptionalClientScopesResponse, error)

	// DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdWithResponse request
	DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse, error)

	// PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdWithResponse request
	PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse, error)

	// PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResponse, error)

	PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResponse, error)

	// GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithResponse request
	GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse, error)

	// PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse, error)

	PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse, error)

	// DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithResponse request
	DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientUuid string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse, error)

	// GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithResponse request
	GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientUuid string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse, error)

	// PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse, error)

	PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientUuid string, id string, body PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse, error)

	// GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolWithResponse request
	GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolWithResponse(ctx context.Context, realm string, clientUuid string, protocol string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolResponse, error)

	// PostAdminRealmsRealmClientsClientUuidPushRevocationWithResponse request
	PostAdminRealmsRealmClientsClientUuidPushRevocationWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidPushRevocationResponse, error)

	// PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenWithResponse request
	PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenResponse, error)

	// GetAdminRealmsRealmClientsClientUuidRolesWithResponse request
	GetAdminRealmsRealmClientsClientUuidRolesWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidRolesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesResponse, error)

	// PostAdminRealmsRealmClientsClientUuidRolesWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidRolesWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidRolesResponse, error)

	PostAdminRealmsRealmClientsClientUuidRolesWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidRolesResponse, error)

	// DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameWithResponse request
	DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameResponse, error)

	// GetAdminRealmsRealmClientsClientUuidRolesRoleNameWithResponse request
	GetAdminRealmsRealmClientsClientUuidRolesRoleNameWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameResponse, error)

	// PutAdminRealmsRealmClientsClientUuidRolesRoleNameWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientsClientUuidRolesRoleNameWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidRolesRoleNameResponse, error)

	PutAdminRealmsRealmClientsClientUuidRolesRoleNameWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, body PutAdminRealmsRealmClientsClientUuidRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidRolesRoleNameResponse, error)

	// DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBodyWithResponse request with any body
	DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse, error)

	DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, body DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse, error)

	// GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithResponse request
	GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse, error)

	// PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse, error)

	PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, body PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse, error)

	// GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidWithResponse request
	GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, client2Uuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidResponse, error)

	// GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmWithResponse request
	GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmResponse, error)

	// GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsWithResponse request
	GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, params *GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsResponse, error)

	// GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithResponse request
	GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse, error)

	// PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithBodyWithResponse request with any body
	PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse, error)

	PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, body PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse, error)

	// GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersWithResponse request
	GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, params *GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersResponse, error)

	// GetAdminRealmsRealmClientsClientUuidScopeMappingsWithResponse request
	GetAdminRealmsRealmClientsClientUuidScopeMappingsWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsResponse, error)

	// DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBodyWithResponse request with any body
	DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse, error)

	DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientUuid string, client string, body DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse, error)

	// GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithResponse request
	GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientUuid string, client string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse, error)

	// PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse, error)

	PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientUuid string, client string, body PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse, error)

	// GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableWithResponse request
	GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableWithResponse(ctx context.Context, realm string, clientUuid string, client string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableResponse, error)

	// GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeWithResponse request
	GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeWithResponse(ctx context.Context, realm string, clientUuid string, client string, params *GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeResponse, error)

	// DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBodyWithResponse request with any body
	DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse, error)

	DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientUuid string, body DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse, error)

	// GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithResponse request
	GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse, error)

	// PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBodyWithResponse request with any body
	PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse, error)

	PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse, error)

	// GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableWithResponse request
	GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableResponse, error)

	// GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeWithResponse request
	GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeResponse, error)

	// GetAdminRealmsRealmClientsClientUuidServiceAccountUserWithResponse request
	GetAdminRealmsRealmClientsClientUuidServiceAccountUserWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidServiceAccountUserResponse, error)

	// GetAdminRealmsRealmClientsClientUuidSessionCountWithResponse request
	GetAdminRealmsRealmClientsClientUuidSessionCountWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidSessionCountResponse, error)

	// GetAdminRealmsRealmClientsClientUuidTestNodesAvailableWithResponse request
	GetAdminRealmsRealmClientsClientUuidTestNodesAvailableWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidTestNodesAvailableResponse, error)

	// GetAdminRealmsRealmClientsClientUuidUserSessionsWithResponse request
	GetAdminRealmsRealmClientsClientUuidUserSessionsWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidUserSessionsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidUserSessionsResponse, error)

	// GetAdminRealmsRealmComponentsWithResponse request
	GetAdminRealmsRealmComponentsWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmComponentsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmComponentsResponse, error)

	// PostAdminRealmsRealmComponentsWithBodyWithResponse request with any body
	PostAdminRealmsRealmComponentsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmComponentsResponse, error)

	PostAdminRealmsRealmComponentsWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmComponentsResponse, error)

	// DeleteAdminRealmsRealmComponentsIdWithResponse request
	DeleteAdminRealmsRealmComponentsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmComponentsIdResponse, error)

	// GetAdminRealmsRealmComponentsIdWithResponse request
	GetAdminRealmsRealmComponentsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmComponentsIdResponse, error)

	// PutAdminRealmsRealmComponentsIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmComponentsIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmComponentsIdResponse, error)

	PutAdminRealmsRealmComponentsIdWithResponse(ctx context.Context, realm string, id string, body PutAdminRealmsRealmComponentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmComponentsIdResponse, error)

	// GetAdminRealmsRealmComponentsIdSubComponentTypesWithResponse request
	GetAdminRealmsRealmComponentsIdSubComponentTypesWithResponse(ctx context.Context, realm string, id string, params *GetAdminRealmsRealmComponentsIdSubComponentTypesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmComponentsIdSubComponentTypesResponse, error)

	// GetAdminRealmsRealmCredentialRegistratorsWithResponse request
	GetAdminRealmsRealmCredentialRegistratorsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmCredentialRegistratorsResponse, error)

	// GetAdminRealmsRealmDefaultDefaultClientScopesWithResponse request
	GetAdminRealmsRealmDefaultDefaultClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmDefaultDefaultClientScopesResponse, error)

	// DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdWithResponse request
	DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse, error)

	// PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdWithResponse request
	PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse, error)

	// GetAdminRealmsRealmDefaultGroupsWithResponse request
	GetAdminRealmsRealmDefaultGroupsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmDefaultGroupsResponse, error)

	// DeleteAdminRealmsRealmDefaultGroupsGroupIdWithResponse request
	DeleteAdminRealmsRealmDefaultGroupsGroupIdWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmDefaultGroupsGroupIdResponse, error)

	// PutAdminRealmsRealmDefaultGroupsGroupIdWithResponse request
	PutAdminRealmsRealmDefaultGroupsGroupIdWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmDefaultGroupsGroupIdResponse, error)

	// GetAdminRealmsRealmDefaultOptionalClientScopesWithResponse request
	GetAdminRealmsRealmDefaultOptionalClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmDefaultOptionalClientScopesResponse, error)

	// DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdWithResponse request
	DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse, error)

	// PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdWithResponse request
	PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse, error)

	// DeleteAdminRealmsRealmEventsWithResponse request
	DeleteAdminRealmsRealmEventsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmEventsResponse, error)

	// GetAdminRealmsRealmEventsWithResponse request
	GetAdminRealmsRealmEventsWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmEventsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmEventsResponse, error)

	// GetAdminRealmsRealmEventsConfigWithResponse request
	GetAdminRealmsRealmEventsConfigWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmEventsConfigResponse, error)

	// PutAdminRealmsRealmEventsConfigWithBodyWithResponse request with any body
	PutAdminRealmsRealmEventsConfigWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmEventsConfigResponse, error)

	PutAdminRealmsRealmEventsConfigWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmEventsConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmEventsConfigResponse, error)

	// GetAdminRealmsRealmGroupByPathPathWithResponse request
	GetAdminRealmsRealmGroupByPathPathWithResponse(ctx context.Context, realm string, path string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupByPathPathResponse, error)

	// GetAdminRealmsRealmGroupsWithResponse request
	GetAdminRealmsRealmGroupsWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmGroupsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsResponse, error)

	// PostAdminRealmsRealmGroupsWithBodyWithResponse request with any body
	PostAdminRealmsRealmGroupsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsResponse, error)

	PostAdminRealmsRealmGroupsWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsResponse, error)

	// GetAdminRealmsRealmGroupsCountWithResponse request
	GetAdminRealmsRealmGroupsCountWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmGroupsCountParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsCountResponse, error)

	// DeleteAdminRealmsRealmGroupsGroupIdWithResponse request
	DeleteAdminRealmsRealmGroupsGroupIdWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmGroupsGroupIdResponse, error)

	// GetAdminRealmsRealmGroupsGroupIdWithResponse request
	GetAdminRealmsRealmGroupsGroupIdWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdResponse, error)

	// PutAdminRealmsRealmGroupsGroupIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmGroupsGroupIdWithBodyWithResponse(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmGroupsGroupIdResponse, error)

	PutAdminRealmsRealmGroupsGroupIdWithResponse(ctx context.Context, realm string, groupId string, body PutAdminRealmsRealmGroupsGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmGroupsGroupIdResponse, error)

	// GetAdminRealmsRealmGroupsGroupIdChildrenWithResponse request
	GetAdminRealmsRealmGroupsGroupIdChildrenWithResponse(ctx context.Context, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdChildrenParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdChildrenResponse, error)

	// PostAdminRealmsRealmGroupsGroupIdChildrenWithBodyWithResponse request with any body
	PostAdminRealmsRealmGroupsGroupIdChildrenWithBodyWithResponse(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsGroupIdChildrenResponse, error)

	PostAdminRealmsRealmGroupsGroupIdChildrenWithResponse(ctx context.Context, realm string, groupId string, body PostAdminRealmsRealmGroupsGroupIdChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsGroupIdChildrenResponse, error)

	// GetAdminRealmsRealmGroupsGroupIdManagementPermissionsWithResponse request
	GetAdminRealmsRealmGroupsGroupIdManagementPermissionsWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse, error)

	// PutAdminRealmsRealmGroupsGroupIdManagementPermissionsWithBodyWithResponse request with any body
	PutAdminRealmsRealmGroupsGroupIdManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse, error)

	PutAdminRealmsRealmGroupsGroupIdManagementPermissionsWithResponse(ctx context.Context, realm string, groupId string, body PutAdminRealmsRealmGroupsGroupIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse, error)

	// GetAdminRealmsRealmGroupsGroupIdMembersWithResponse request
	GetAdminRealmsRealmGroupsGroupIdMembersWithResponse(ctx context.Context, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdMembersParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdMembersResponse, error)

	// GetAdminRealmsRealmGroupsGroupIdRoleMappingsWithResponse request
	GetAdminRealmsRealmGroupsGroupIdRoleMappingsWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsResponse, error)

	// DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBodyWithResponse request with any body
	DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBodyWithResponse(ctx context.Context, realm string, groupId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse, error)

	DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithResponse(ctx context.Context, realm string, groupId string, clientId string, body DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse, error)

	// GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithResponse request
	GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithResponse(ctx context.Context, realm string, groupId string, clientId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse, error)

	// PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBodyWithResponse request with any body
	PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBodyWithResponse(ctx context.Context, realm string, groupId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse, error)

	PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithResponse(ctx context.Context, realm string, groupId string, clientId string, body PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse, error)

	// GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableWithResponse request
	GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableWithResponse(ctx context.Context, realm string, groupId string, clientId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableResponse, error)

	// GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeWithResponse request
	GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeWithResponse(ctx context.Context, realm string, groupId string, clientId string, params *GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeResponse, error)

	// DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBodyWithResponse request with any body
	DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse, error)

	DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, groupId string, body DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse, error)

	// GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithResponse request
	GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse, error)

	// PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBodyWithResponse request with any body
	PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse, error)

	PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, groupId string, body PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse, error)

	// GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableWithResponse request
	GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableResponse, error)

	// GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeWithResponse request
	GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeWithResponse(ctx context.Context, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeResponse, error)

	// PostAdminRealmsRealmIdentityProviderImportConfigWithBodyWithResponse request with any body
	PostAdminRealmsRealmIdentityProviderImportConfigWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmIdentityProviderImportConfigResponse, error)

	PostAdminRealmsRealmIdentityProviderImportConfigWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmIdentityProviderImportConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmIdentityProviderImportConfigResponse, error)

	// GetAdminRealmsRealmIdentityProviderInstancesWithResponse request
	GetAdminRealmsRealmIdentityProviderInstancesWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmIdentityProviderInstancesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesResponse, error)

	// PostAdminRealmsRealmIdentityProviderInstancesWithBodyWithResponse request with any body
	PostAdminRealmsRealmIdentityProviderInstancesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmIdentityProviderInstancesResponse, error)

	PostAdminRealmsRealmIdentityProviderInstancesWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmIdentityProviderInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmIdentityProviderInstancesResponse, error)

	// DeleteAdminRealmsRealmIdentityProviderInstancesAliasWithResponse request
	DeleteAdminRealmsRealmIdentityProviderInstancesAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmIdentityProviderInstancesAliasResponse, error)

	// GetAdminRealmsRealmIdentityProviderInstancesAliasWithResponse request
	GetAdminRealmsRealmIdentityProviderInstancesAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesAliasResponse, error)

	// PutAdminRealmsRealmIdentityProviderInstancesAliasWithBodyWithResponse request with any body
	PutAdminRealmsRealmIdentityProviderInstancesAliasWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmIdentityProviderInstancesAliasResponse, error)

	PutAdminRealmsRealmIdentityProviderInstancesAliasWithResponse(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmIdentityProviderInstancesAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmIdentityProviderInstancesAliasResponse, error)

	// GetAdminRealmsRealmIdentityProviderInstancesAliasExportWithResponse request
	GetAdminRealmsRealmIdentityProviderInstancesAliasExportWithResponse(ctx context.Context, realm string, alias string, params *GetAdminRealmsRealmIdentityProviderInstancesAliasExportParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesAliasExportResponse, error)

	// GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse request
	GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error)

	// PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithBodyWithResponse request with any body
	PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error)

	PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error)

	// GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesWithResponse request
	GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesResponse, error)

	// GetAdminRealmsRealmIdentityProviderInstancesAliasMappersWithResponse request
	GetAdminRealmsRealmIdentityProviderInstancesAliasMappersWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse, error)

	// PostAdminRealmsRealmIdentityProviderInstancesAliasMappersWithBodyWithResponse request with any body
	PostAdminRealmsRealmIdentityProviderInstancesAliasMappersWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse, error)

	PostAdminRealmsRealmIdentityProviderInstancesAliasMappersWithResponse(ctx context.Context, realm string, alias string, body PostAdminRealmsRealmIdentityProviderInstancesAliasMappersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse, error)

	// DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithResponse request
	DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithResponse(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse, error)

	// GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithResponse request
	GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithResponse(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse, error)

	// PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithBodyWithResponse(ctx context.Context, realm string, alias string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse, error)

	PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithResponse(ctx context.Context, realm string, alias string, id string, body PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse, error)

	// GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysWithResponse request
	GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysResponse, error)

	// GetAdminRealmsRealmIdentityProviderProvidersProviderIdWithResponse request
	GetAdminRealmsRealmIdentityProviderProvidersProviderIdWithResponse(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderProvidersProviderIdResponse, error)

	// GetAdminRealmsRealmKeysWithResponse request
	GetAdminRealmsRealmKeysWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmKeysResponse, error)

	// GetAdminRealmsRealmLocalizationWithResponse request
	GetAdminRealmsRealmLocalizationWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmLocalizationResponse, error)

	// DeleteAdminRealmsRealmLocalizationLocaleWithResponse request
	DeleteAdminRealmsRealmLocalizationLocaleWithResponse(ctx context.Context, realm string, locale string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmLocalizationLocaleResponse, error)

	// GetAdminRealmsRealmLocalizationLocaleWithResponse request
	GetAdminRealmsRealmLocalizationLocaleWithResponse(ctx context.Context, realm string, locale string, params *GetAdminRealmsRealmLocalizationLocaleParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmLocalizationLocaleResponse, error)

	// PostAdminRealmsRealmLocalizationLocaleWithBodyWithResponse request with any body
	PostAdminRealmsRealmLocalizationLocaleWithBodyWithResponse(ctx context.Context, realm string, locale string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmLocalizationLocaleResponse, error)

	PostAdminRealmsRealmLocalizationLocaleWithResponse(ctx context.Context, realm string, locale string, body PostAdminRealmsRealmLocalizationLocaleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmLocalizationLocaleResponse, error)

	// DeleteAdminRealmsRealmLocalizationLocaleKeyWithResponse request
	DeleteAdminRealmsRealmLocalizationLocaleKeyWithResponse(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmLocalizationLocaleKeyResponse, error)

	// GetAdminRealmsRealmLocalizationLocaleKeyWithResponse request
	GetAdminRealmsRealmLocalizationLocaleKeyWithResponse(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmLocalizationLocaleKeyResponse, error)

	// PutAdminRealmsRealmLocalizationLocaleKeyWithBodyWithResponse request with any body
	PutAdminRealmsRealmLocalizationLocaleKeyWithBodyWithResponse(ctx context.Context, realm string, locale string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmLocalizationLocaleKeyResponse, error)

	PutAdminRealmsRealmLocalizationLocaleKeyWithTextBodyWithResponse(ctx context.Context, realm string, locale string, key string, body PutAdminRealmsRealmLocalizationLocaleKeyTextRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmLocalizationLocaleKeyResponse, error)

	// PostAdminRealmsRealmLogoutAllWithResponse request
	PostAdminRealmsRealmLogoutAllWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmLogoutAllResponse, error)

	// GetAdminRealmsRealmOrganizationsWithResponse request
	GetAdminRealmsRealmOrganizationsWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmOrganizationsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsResponse, error)

	// PostAdminRealmsRealmOrganizationsWithBodyWithResponse request with any body
	PostAdminRealmsRealmOrganizationsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsResponse, error)

	PostAdminRealmsRealmOrganizationsWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsResponse, error)

	// GetAdminRealmsRealmOrganizationsMembersIdOrganizationsWithResponse request
	GetAdminRealmsRealmOrganizationsMembersIdOrganizationsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsMembersIdOrganizationsResponse, error)

	// DeleteAdminRealmsRealmOrganizationsIdWithResponse request
	DeleteAdminRealmsRealmOrganizationsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmOrganizationsIdResponse, error)

	// GetAdminRealmsRealmOrganizationsIdWithResponse request
	GetAdminRealmsRealmOrganizationsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsIdResponse, error)

	// PutAdminRealmsRealmOrganizationsIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmOrganizationsIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmOrganizationsIdResponse, error)

	PutAdminRealmsRealmOrganizationsIdWithResponse(ctx context.Context, realm string, id string, body PutAdminRealmsRealmOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmOrganizationsIdResponse, error)

	// GetAdminRealmsRealmOrganizationsIdIdentityProvidersWithResponse request
	GetAdminRealmsRealmOrganizationsIdIdentityProvidersWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsIdIdentityProvidersResponse, error)

	// PostAdminRealmsRealmOrganizationsIdIdentityProvidersWithBodyWithResponse request with any body
	PostAdminRealmsRealmOrganizationsIdIdentityProvidersWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdIdentityProvidersResponse, error)

	PostAdminRealmsRealmOrganizationsIdIdentityProvidersWithResponse(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdIdentityProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdIdentityProvidersResponse, error)

	// DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasWithResponse request
	DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasWithResponse(ctx context.Context, realm string, id string, alias string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse, error)

	// GetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasWithResponse request
	GetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasWithResponse(ctx context.Context, realm string, id string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse, error)

	// GetAdminRealmsRealmOrganizationsIdMembersWithResponse request
	GetAdminRealmsRealmOrganizationsIdMembersWithResponse(ctx context.Context, realm string, id string, params *GetAdminRealmsRealmOrganizationsIdMembersParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsIdMembersResponse, error)

	// PostAdminRealmsRealmOrganizationsIdMembersWithBodyWithResponse request with any body
	PostAdminRealmsRealmOrganizationsIdMembersWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdMembersResponse, error)

	PostAdminRealmsRealmOrganizationsIdMembersWithResponse(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdMembersResponse, error)

	// GetAdminRealmsRealmOrganizationsIdMembersCountWithResponse request
	GetAdminRealmsRealmOrganizationsIdMembersCountWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsIdMembersCountResponse, error)

	// PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserWithBodyWithResponse request with any body
	PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserResponse, error)

	PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserWithFormdataBodyWithResponse(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserResponse, error)

	// PostAdminRealmsRealmOrganizationsIdMembersInviteUserWithBodyWithResponse request with any body
	PostAdminRealmsRealmOrganizationsIdMembersInviteUserWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdMembersInviteUserResponse, error)

	PostAdminRealmsRealmOrganizationsIdMembersInviteUserWithFormdataBodyWithResponse(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersInviteUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdMembersInviteUserResponse, error)

	// DeleteAdminRealmsRealmOrganizationsIdMembersMemberIdWithResponse request
	DeleteAdminRealmsRealmOrganizationsIdMembersMemberIdWithResponse(ctx context.Context, realm string, id string, memberId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmOrganizationsIdMembersMemberIdResponse, error)

	// GetAdminRealmsRealmOrganizationsIdMembersMemberIdWithResponse request
	GetAdminRealmsRealmOrganizationsIdMembersMemberIdWithResponse(ctx context.Context, realm string, id string, memberId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsIdMembersMemberIdResponse, error)

	// GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsWithResponse request
	GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsWithResponse(ctx context.Context, realm string, id string, memberId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsResponse, error)

	// PostAdminRealmsRealmPartialExportWithResponse request
	PostAdminRealmsRealmPartialExportWithResponse(ctx context.Context, realm string, params *PostAdminRealmsRealmPartialExportParams, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmPartialExportResponse, error)

	// PostAdminRealmsRealmPartialImportWithBodyWithResponse request with any body
	PostAdminRealmsRealmPartialImportWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmPartialImportResponse, error)

	PostAdminRealmsRealmPartialImportWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmPartialImportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmPartialImportResponse, error)

	// PostAdminRealmsRealmPushRevocationWithResponse request
	PostAdminRealmsRealmPushRevocationWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmPushRevocationResponse, error)

	// GetAdminRealmsRealmRolesWithResponse request
	GetAdminRealmsRealmRolesWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmRolesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesResponse, error)

	// PostAdminRealmsRealmRolesWithBodyWithResponse request with any body
	PostAdminRealmsRealmRolesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmRolesResponse, error)

	PostAdminRealmsRealmRolesWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmRolesResponse, error)

	// DeleteAdminRealmsRealmRolesByIdRoleIdWithResponse request
	DeleteAdminRealmsRealmRolesByIdRoleIdWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmRolesByIdRoleIdResponse, error)

	// GetAdminRealmsRealmRolesByIdRoleIdWithResponse request
	GetAdminRealmsRealmRolesByIdRoleIdWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesByIdRoleIdResponse, error)

	// PutAdminRealmsRealmRolesByIdRoleIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmRolesByIdRoleIdWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesByIdRoleIdResponse, error)

	PutAdminRealmsRealmRolesByIdRoleIdWithResponse(ctx context.Context, realm string, roleId string, body PutAdminRealmsRealmRolesByIdRoleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesByIdRoleIdResponse, error)

	// DeleteAdminRealmsRealmRolesByIdRoleIdCompositesWithBodyWithResponse request with any body
	DeleteAdminRealmsRealmRolesByIdRoleIdCompositesWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmRolesByIdRoleIdCompositesResponse, error)

	DeleteAdminRealmsRealmRolesByIdRoleIdCompositesWithResponse(ctx context.Context, realm string, roleId string, body DeleteAdminRealmsRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmRolesByIdRoleIdCompositesResponse, error)

	// GetAdminRealmsRealmRolesByIdRoleIdCompositesWithResponse request
	GetAdminRealmsRealmRolesByIdRoleIdCompositesWithResponse(ctx context.Context, realm string, roleId string, params *GetAdminRealmsRealmRolesByIdRoleIdCompositesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesByIdRoleIdCompositesResponse, error)

	// PostAdminRealmsRealmRolesByIdRoleIdCompositesWithBodyWithResponse request with any body
	PostAdminRealmsRealmRolesByIdRoleIdCompositesWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmRolesByIdRoleIdCompositesResponse, error)

	PostAdminRealmsRealmRolesByIdRoleIdCompositesWithResponse(ctx context.Context, realm string, roleId string, body PostAdminRealmsRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmRolesByIdRoleIdCompositesResponse, error)

	// GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidWithResponse request
	GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidWithResponse(ctx context.Context, realm string, roleId string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidResponse, error)

	// GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmWithResponse request
	GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmResponse, error)

	// GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithResponse request
	GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse, error)

	// PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithBodyWithResponse request with any body
	PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse, error)

	PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithResponse(ctx context.Context, realm string, roleId string, body PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse, error)

	// DeleteAdminRealmsRealmRolesRoleNameWithResponse request
	DeleteAdminRealmsRealmRolesRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmRolesRoleNameResponse, error)

	// GetAdminRealmsRealmRolesRoleNameWithResponse request
	GetAdminRealmsRealmRolesRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesRoleNameResponse, error)

	// PutAdminRealmsRealmRolesRoleNameWithBodyWithResponse request with any body
	PutAdminRealmsRealmRolesRoleNameWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesRoleNameResponse, error)

	PutAdminRealmsRealmRolesRoleNameWithResponse(ctx context.Context, realm string, roleName string, body PutAdminRealmsRealmRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesRoleNameResponse, error)

	// DeleteAdminRealmsRealmRolesRoleNameCompositesWithBodyWithResponse request with any body
	DeleteAdminRealmsRealmRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmRolesRoleNameCompositesResponse, error)

	DeleteAdminRealmsRealmRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, roleName string, body DeleteAdminRealmsRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmRolesRoleNameCompositesResponse, error)

	// GetAdminRealmsRealmRolesRoleNameCompositesWithResponse request
	GetAdminRealmsRealmRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesRoleNameCompositesResponse, error)

	// PostAdminRealmsRealmRolesRoleNameCompositesWithBodyWithResponse request with any body
	PostAdminRealmsRealmRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmRolesRoleNameCompositesResponse, error)

	PostAdminRealmsRealmRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, roleName string, body PostAdminRealmsRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmRolesRoleNameCompositesResponse, error)

	// GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidWithResponse request
	GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidWithResponse(ctx context.Context, realm string, roleName string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidResponse, error)

	// GetAdminRealmsRealmRolesRoleNameCompositesRealmWithResponse request
	GetAdminRealmsRealmRolesRoleNameCompositesRealmWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesRoleNameCompositesRealmResponse, error)

	// GetAdminRealmsRealmRolesRoleNameGroupsWithResponse request
	GetAdminRealmsRealmRolesRoleNameGroupsWithResponse(ctx context.Context, realm string, roleName string, params *GetAdminRealmsRealmRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesRoleNameGroupsResponse, error)

	// GetAdminRealmsRealmRolesRoleNameManagementPermissionsWithResponse request
	GetAdminRealmsRealmRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesRoleNameManagementPermissionsResponse, error)

	// PutAdminRealmsRealmRolesRoleNameManagementPermissionsWithBodyWithResponse request with any body
	PutAdminRealmsRealmRolesRoleNameManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesRoleNameManagementPermissionsResponse, error)

	PutAdminRealmsRealmRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, roleName string, body PutAdminRealmsRealmRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesRoleNameManagementPermissionsResponse, error)

	// GetAdminRealmsRealmRolesRoleNameUsersWithResponse request
	GetAdminRealmsRealmRolesRoleNameUsersWithResponse(ctx context.Context, realm string, roleName string, params *GetAdminRealmsRealmRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesRoleNameUsersResponse, error)

	// DeleteAdminRealmsRealmSessionsSessionWithResponse request
	DeleteAdminRealmsRealmSessionsSessionWithResponse(ctx context.Context, realm string, session string, params *DeleteAdminRealmsRealmSessionsSessionParams, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmSessionsSessionResponse, error)

	// PostAdminRealmsRealmTestSMTPConnectionWithBodyWithResponse request with any body
	PostAdminRealmsRealmTestSMTPConnectionWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmTestSMTPConnectionResponse, error)

	PostAdminRealmsRealmTestSMTPConnectionWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmTestSMTPConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmTestSMTPConnectionResponse, error)

	PostAdminRealmsRealmTestSMTPConnectionWithFormdataBodyWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmTestSMTPConnectionFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmTestSMTPConnectionResponse, error)

	// GetAdminRealmsRealmUsersWithResponse request
	GetAdminRealmsRealmUsersWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersResponse, error)

	// PostAdminRealmsRealmUsersWithBodyWithResponse request with any body
	PostAdminRealmsRealmUsersWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersResponse, error)

	PostAdminRealmsRealmUsersWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersResponse, error)

	// GetAdminRealmsRealmUsersManagementPermissionsWithResponse request
	GetAdminRealmsRealmUsersManagementPermissionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersManagementPermissionsResponse, error)

	// PutAdminRealmsRealmUsersManagementPermissionsWithBodyWithResponse request with any body
	PutAdminRealmsRealmUsersManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersManagementPermissionsResponse, error)

	PutAdminRealmsRealmUsersManagementPermissionsWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmUsersManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersManagementPermissionsResponse, error)

	// GetAdminRealmsRealmUsersCountWithResponse request
	GetAdminRealmsRealmUsersCountWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersCountParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersCountResponse, error)

	// GetAdminRealmsRealmUsersProfileWithResponse request
	GetAdminRealmsRealmUsersProfileWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersProfileResponse, error)

	// PutAdminRealmsRealmUsersProfileWithBodyWithResponse request with any body
	PutAdminRealmsRealmUsersProfileWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersProfileResponse, error)

	PutAdminRealmsRealmUsersProfileWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmUsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersProfileResponse, error)

	// GetAdminRealmsRealmUsersProfileMetadataWithResponse request
	GetAdminRealmsRealmUsersProfileMetadataWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersProfileMetadataResponse, error)

	// DeleteAdminRealmsRealmUsersUserIdWithResponse request
	DeleteAdminRealmsRealmUsersUserIdWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdResponse, error)

	// GetAdminRealmsRealmUsersUserIdWithResponse request
	GetAdminRealmsRealmUsersUserIdWithResponse(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdResponse, error)

	// PutAdminRealmsRealmUsersUserIdWithBodyWithResponse request with any body
	PutAdminRealmsRealmUsersUserIdWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResponse, error)

	PutAdminRealmsRealmUsersUserIdWithResponse(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResponse, error)

	// GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesWithResponse request
	GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse, error)

	// GetAdminRealmsRealmUsersUserIdConsentsWithResponse request
	GetAdminRealmsRealmUsersUserIdConsentsWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdConsentsResponse, error)

	// DeleteAdminRealmsRealmUsersUserIdConsentsClientWithResponse request
	DeleteAdminRealmsRealmUsersUserIdConsentsClientWithResponse(ctx context.Context, realm string, userId string, client string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse, error)

	// GetAdminRealmsRealmUsersUserIdCredentialsWithResponse request
	GetAdminRealmsRealmUsersUserIdCredentialsWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdCredentialsResponse, error)

	// DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdWithResponse request
	DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdWithResponse(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse, error)

	// PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse request
	PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse(ctx context.Context, realm string, userId string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse, error)

	// PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstWithResponse request
	PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstWithResponse(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse, error)

	// PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBodyWithResponse request with any body
	PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBodyWithResponse(ctx context.Context, realm string, userId string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse, error)

	PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithTextBodyWithResponse(ctx context.Context, realm string, userId string, credentialId string, body PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse, error)

	// PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBodyWithResponse request with any body
	PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse, error)

	PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithResponse(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse, error)

	// PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBodyWithResponse request with any body
	PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBodyWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse, error)

	PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, body PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse, error)

	// GetAdminRealmsRealmUsersUserIdFederatedIdentityWithResponse request
	GetAdminRealmsRealmUsersUserIdFederatedIdentityWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse, error)

	// DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse request
	DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse, error)

	// PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse request
	PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse, error)

	// GetAdminRealmsRealmUsersUserIdGroupsWithResponse request
	GetAdminRealmsRealmUsersUserIdGroupsWithResponse(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdGroupsResponse, error)

	// GetAdminRealmsRealmUsersUserIdGroupsCountWithResponse request
	GetAdminRealmsRealmUsersUserIdGroupsCountWithResponse(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsCountParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdGroupsCountResponse, error)

	// DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse request
	DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse, error)

	// PutAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse request
	PutAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse, error)

	// PostAdminRealmsRealmUsersUserIdImpersonationWithResponse request
	PostAdminRealmsRealmUsersUserIdImpersonationWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdImpersonationResponse, error)

	// PostAdminRealmsRealmUsersUserIdLogoutWithResponse request
	PostAdminRealmsRealmUsersUserIdLogoutWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdLogoutResponse, error)

	// GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidWithResponse request
	GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidWithResponse(ctx context.Context, realm string, userId string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse, error)

	// PutAdminRealmsRealmUsersUserIdResetPasswordWithBodyWithResponse request with any body
	PutAdminRealmsRealmUsersUserIdResetPasswordWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResetPasswordResponse, error)

	PutAdminRealmsRealmUsersUserIdResetPasswordWithResponse(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResetPasswordResponse, error)

	// PutAdminRealmsRealmUsersUserIdResetPasswordEmailWithResponse request
	PutAdminRealmsRealmUsersUserIdResetPasswordEmailWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse, error)

	// GetAdminRealmsRealmUsersUserIdRoleMappingsWithResponse request
	GetAdminRealmsRealmUsersUserIdRoleMappingsWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdRoleMappingsResponse, error)

	// DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBodyWithResponse request with any body
	DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBodyWithResponse(ctx context.Context, realm string, userId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse, error)

	DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithResponse(ctx context.Context, realm string, userId string, clientId string, body DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse, error)

	// GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithResponse request
	GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithResponse(ctx context.Context, realm string, userId string, clientId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse, error)

	// PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBodyWithResponse request with any body
	PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBodyWithResponse(ctx context.Context, realm string, userId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse, error)

	PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithResponse(ctx context.Context, realm string, userId string, clientId string, body PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse, error)

	// GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableWithResponse request
	GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableWithResponse(ctx context.Context, realm string, userId string, clientId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableResponse, error)

	// GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeWithResponse request
	GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeWithResponse(ctx context.Context, realm string, userId string, clientId string, params *GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeResponse, error)

	// DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBodyWithResponse request with any body
	DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse, error)

	DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, userId string, body DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse, error)

	// GetAdminRealmsRealmUsersUserIdRoleMappingsRealmWithResponse request
	GetAdminRealmsRealmUsersUserIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse, error)

	// PostAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBodyWithResponse request with any body
	PostAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse, error)

	PostAdminRealmsRealmUsersUserIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, userId string, body PostAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse, error)

	// GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableWithResponse request
	GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableResponse, error)

	// GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeWithResponse request
	GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeWithResponse(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeResponse, error)

	// PutAdminRealmsRealmUsersUserIdSendVerifyEmailWithResponse request
	PutAdminRealmsRealmUsersUserIdSendVerifyEmailWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse, error)

	// GetAdminRealmsRealmUsersUserIdSessionsWithResponse request
	GetAdminRealmsRealmUsersUserIdSessionsWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdSessionsResponse, error)

	// GetAdminRealmsRealmUsersUserIdUnmanagedAttributesWithResponse request
	GetAdminRealmsRealmUsersUserIdUnmanagedAttributesWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse, error)
}

type GetAdminRealmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RealmRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RealmRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmAdminEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmAdminEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmAdminEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAdminEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AdminEventRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAdminEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAdminEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmAttackDetectionBruteForceUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmAttackDetectionBruteForceUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmAttackDetectionBruteForceUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationAuthenticatorProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationAuthenticatorProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationAuthenticatorProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmAuthenticationConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmAuthenticationConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmAuthenticationConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticatorConfigInfoRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmAuthenticationConfigIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmAuthenticationConfigIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmAuthenticationConfigIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationConfigIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticatorConfigRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationConfigIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationConfigIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmAuthenticationConfigIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmAuthenticationConfigIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmAuthenticationConfigIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmAuthenticationExecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmAuthenticationExecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmAuthenticationExecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticationExecutionRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticatorConfigRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthenticationFlowRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmAuthenticationFlowsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmAuthenticationFlowsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmAuthenticationFlowsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthenticationExecutionInfoRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmAuthenticationFlowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmAuthenticationFlowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmAuthenticationFlowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationFlowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthenticationFlowRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationFlowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationFlowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmAuthenticationFlowsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmAuthenticationFlowsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmAuthenticationFlowsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationFormActionProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationFormActionProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationFormActionProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationFormProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationFormProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationFormProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string][]ConfigPropertyRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmAuthenticationRegisterRequiredActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmAuthenticationRegisterRequiredActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmAuthenticationRegisterRequiredActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationRequiredActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RequiredActionProviderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationRequiredActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationRequiredActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationRequiredActionsAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequiredActionProviderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationRequiredActionsAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationRequiredActionsAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmAuthenticationRequiredActionsAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmAuthenticationRequiredActionsAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmAuthenticationRequiredActionsAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequiredActionConfigRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RequiredActionConfigInfoRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]string
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientDescriptionConverterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientRepresentation
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientDescriptionConverterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientDescriptionConverterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientPoliciesPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientPoliciesRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientPoliciesPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientPoliciesPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientPoliciesPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientPoliciesPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientPoliciesPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientPoliciesProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientProfilesRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientPoliciesProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientPoliciesProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientPoliciesProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientPoliciesProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientPoliciesProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientRegistrationPolicyProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ComponentTypeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientRegistrationPolicyProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientRegistrationPolicyProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MappingsRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientSessionStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]string
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientSessionStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientSessionStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientTemplatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientTemplatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientTemplatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientTemplatesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientTemplatesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientTemplatesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientTemplatesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientTemplatesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientTemplatesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientTemplatesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MappingsRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientTypesRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClientRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsInitialAccessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClientInitialAccessPresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsInitialAccessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsInitialAccessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsInitialAccessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ClientInitialAccessCreatePresentation
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsInitialAccessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsInitialAccessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientsInitialAccessIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientsInitialAccessIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientsInitialAccessIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientsClientUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientsClientUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientsClientUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientsClientUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientsClientUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientsClientUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceServerRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AbstractPolicyRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyEvaluationResponse
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PolicyProviderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AbstractPolicyRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AbstractPolicyRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PolicyEvaluationResponse
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PolicyProviderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AbstractPolicyRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ResourceRepresentation
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PolicyRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PolicyRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ResourceRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResourceServerRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidCertificatesAttrResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidCertificatesAttrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidCertificatesAttrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateRepresentation
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateRepresentation
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CertificateRepresentation
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidClientSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidClientSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidClientSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidClientSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialRepresentation
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidClientSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidClientSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidDefaultClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidDefaultClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidDefaultClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessToken
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IDToken
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProtocolMapperEvaluationRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientsClientUuidManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientsClientUuidManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientsClientUuidManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientsClientUuidNodesNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientsClientUuidNodesNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientsClientUuidNodesNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidOfflineSessionCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]int64
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidOfflineSessionCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidOfflineSessionCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidOfflineSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserSessionRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidOfflineSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidOfflineSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidOptionalClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidOptionalClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidOptionalClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProtocolMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidPushRevocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRequestResult
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidPushRevocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidPushRevocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientRepresentation
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidRolesRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidRolesRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidRolesRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientsClientUuidRolesRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientsClientUuidRolesRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientsClientUuidRolesRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidScopeMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MappingsRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidScopeMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidScopeMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidServiceAccountUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidServiceAccountUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidServiceAccountUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidSessionCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]int64
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidSessionCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidSessionCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidTestNodesAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRequestResult
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidTestNodesAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidTestNodesAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmClientsClientUuidUserSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserSessionRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmClientsClientUuidUserSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmClientsClientUuidUserSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ComponentRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmComponentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmComponentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmComponentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmComponentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ComponentRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmComponentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmComponentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmComponentsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmComponentsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmComponentsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmComponentsIdSubComponentTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ComponentTypeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmComponentsIdSubComponentTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmComponentsIdSubComponentTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmCredentialRegistratorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmCredentialRegistratorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmCredentialRegistratorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmDefaultDefaultClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmDefaultDefaultClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmDefaultDefaultClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmDefaultGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmDefaultGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmDefaultGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmDefaultGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmDefaultGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmDefaultGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmDefaultGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmDefaultGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmDefaultGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmDefaultOptionalClientScopesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClientScopeRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmDefaultOptionalClientScopesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmDefaultOptionalClientScopesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EventRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmEventsConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RealmEventsConfigRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmEventsConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmEventsConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmEventsConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmEventsConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmEventsConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmGroupByPathPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmGroupByPathPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmGroupByPathPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmGroupsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]int64
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmGroupsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmGroupsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmGroupsGroupIdChildrenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmGroupsGroupIdChildrenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmGroupsGroupIdChildrenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmGroupsGroupIdChildrenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmGroupsGroupIdChildrenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmGroupsGroupIdChildrenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmGroupsGroupIdMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmGroupsGroupIdMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmGroupsGroupIdMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmGroupsGroupIdRoleMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MappingsRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmGroupsGroupIdRoleMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmGroupsGroupIdRoleMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmIdentityProviderImportConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmIdentityProviderImportConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmIdentityProviderImportConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmIdentityProviderInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IdentityProviderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmIdentityProviderInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmIdentityProviderInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmIdentityProviderInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmIdentityProviderInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmIdentityProviderInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmIdentityProviderInstancesAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmIdentityProviderInstancesAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmIdentityProviderInstancesAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmIdentityProviderInstancesAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProviderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmIdentityProviderInstancesAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmIdentityProviderInstancesAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmIdentityProviderInstancesAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmIdentityProviderInstancesAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmIdentityProviderInstancesAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmIdentityProviderInstancesAliasExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmIdentityProviderInstancesAliasExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmIdentityProviderInstancesAliasExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IdentityProviderMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProviderMapperRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *bool
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmIdentityProviderProvidersProviderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmIdentityProviderProvidersProviderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmIdentityProviderProvidersProviderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *KeysMetadataRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmLocalizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmLocalizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmLocalizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmLocalizationLocaleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmLocalizationLocaleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmLocalizationLocaleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmLocalizationLocaleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]string
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmLocalizationLocaleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmLocalizationLocaleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmLocalizationLocaleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmLocalizationLocaleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmLocalizationLocaleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmLocalizationLocaleKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmLocalizationLocaleKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmLocalizationLocaleKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmLocalizationLocaleKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmLocalizationLocaleKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmLocalizationLocaleKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmLocalizationLocaleKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmLocalizationLocaleKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmLocalizationLocaleKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmLogoutAllResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRequestResult
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmLogoutAllResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmLogoutAllResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrganizationRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmOrganizationsMembersIdOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrganizationRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmOrganizationsMembersIdOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmOrganizationsMembersIdOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmOrganizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmOrganizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmOrganizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmOrganizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmOrganizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmOrganizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmOrganizationsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmOrganizationsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmOrganizationsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmOrganizationsIdIdentityProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]IdentityProviderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmOrganizationsIdIdentityProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmOrganizationsIdIdentityProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmOrganizationsIdIdentityProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmOrganizationsIdIdentityProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmOrganizationsIdIdentityProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityProviderRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmOrganizationsIdMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MemberRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmOrganizationsIdMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmOrganizationsIdMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmOrganizationsIdMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmOrganizationsIdMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmOrganizationsIdMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmOrganizationsIdMembersCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int64
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmOrganizationsIdMembersCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmOrganizationsIdMembersCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmOrganizationsIdMembersInviteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmOrganizationsIdMembersInviteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmOrganizationsIdMembersInviteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmOrganizationsIdMembersMemberIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmOrganizationsIdMembersMemberIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmOrganizationsIdMembersMemberIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmOrganizationsIdMembersMemberIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MemberRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmOrganizationsIdMembersMemberIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmOrganizationsIdMembersMemberIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrganizationRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmPartialExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmPartialExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmPartialExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmPartialImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmPartialImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmPartialImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmPushRevocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GlobalRequestResult
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmPushRevocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmPushRevocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmRolesByIdRoleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmRolesByIdRoleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmRolesByIdRoleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmRolesByIdRoleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmRolesByIdRoleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmRolesByIdRoleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmRolesByIdRoleIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmRolesByIdRoleIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmRolesByIdRoleIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmRolesByIdRoleIdCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmRolesByIdRoleIdCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmRolesByIdRoleIdCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmRolesByIdRoleIdCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmRolesByIdRoleIdCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmRolesByIdRoleIdCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmRolesByIdRoleIdCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmRolesByIdRoleIdCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmRolesByIdRoleIdCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmRolesRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmRolesRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmRolesRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmRolesRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmRolesRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmRolesRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmRolesRoleNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmRolesRoleNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmRolesRoleNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmRolesRoleNameCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmRolesRoleNameCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmRolesRoleNameCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmRolesRoleNameCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmRolesRoleNameCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmRolesRoleNameCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmRolesRoleNameCompositesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmRolesRoleNameCompositesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmRolesRoleNameCompositesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmRolesRoleNameCompositesRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmRolesRoleNameCompositesRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmRolesRoleNameCompositesRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmRolesRoleNameGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmRolesRoleNameGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmRolesRoleNameGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmRolesRoleNameManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmRolesRoleNameManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmRolesRoleNameManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmRolesRoleNameManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmRolesRoleNameManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmRolesRoleNameManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmRolesRoleNameUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmRolesRoleNameUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmRolesRoleNameUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmSessionsSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmSessionsSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmSessionsSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmTestSMTPConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmTestSMTPConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmTestSMTPConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersManagementPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ManagementPermissionReference
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersManagementPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersManagementPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int32
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UPConfig
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UPConfig
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersProfileMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserProfileMetadata
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersProfileMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersProfileMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdConsentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdConsentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdConsentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CredentialRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FederatedIdentityRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GroupRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdGroupsCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]int64
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdGroupsCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdGroupsCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmUsersUserIdImpersonationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmUsersUserIdImpersonationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmUsersUserIdImpersonationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmUsersUserIdLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmUsersUserIdLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmUsersUserIdLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserSessionRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdRoleMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MappingsRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdRoleMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdRoleMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoleRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdSessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserSessionRepresentation
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdSessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdSessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string][]string
}

// Status returns HTTPResponse.Status
func (r GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAdminRealmsWithResponse request returning *GetAdminRealmsResponse
func (c *ClientWithResponses) GetAdminRealmsWithResponse(ctx context.Context, params *GetAdminRealmsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsResponse, error) {
	rsp, err := c.GetAdminRealms(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsResponse(rsp)
}

// PostAdminRealmsWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsResponse
func (c *ClientWithResponses) PostAdminRealmsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsResponse, error) {
	rsp, err := c.PostAdminRealmsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsWithResponse(ctx context.Context, body PostAdminRealmsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsResponse, error) {
	rsp, err := c.PostAdminRealms(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsResponse(rsp)
}

// DeleteAdminRealmsRealmWithResponse request returning *DeleteAdminRealmsRealmResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealm(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmResponse(rsp)
}

// GetAdminRealmsRealmWithResponse request returning *GetAdminRealmsRealmResponse
func (c *ClientWithResponses) GetAdminRealmsRealmWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmResponse, error) {
	rsp, err := c.GetAdminRealmsRealm(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmResponse(rsp)
}

// PutAdminRealmsRealmWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmResponse
func (c *ClientWithResponses) PutAdminRealmsRealmWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmResponse, error) {
	rsp, err := c.PutAdminRealmsRealmWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmResponse, error) {
	rsp, err := c.PutAdminRealmsRealm(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmResponse(rsp)
}

// DeleteAdminRealmsRealmAdminEventsWithResponse request returning *DeleteAdminRealmsRealmAdminEventsResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmAdminEventsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAdminEventsResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmAdminEvents(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmAdminEventsResponse(rsp)
}

// GetAdminRealmsRealmAdminEventsWithResponse request returning *GetAdminRealmsRealmAdminEventsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAdminEventsWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmAdminEventsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAdminEventsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAdminEvents(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAdminEventsResponse(rsp)
}

// DeleteAdminRealmsRealmAttackDetectionBruteForceUsersWithResponse request returning *DeleteAdminRealmsRealmAttackDetectionBruteForceUsersResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmAttackDetectionBruteForceUsersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAttackDetectionBruteForceUsersResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmAttackDetectionBruteForceUsers(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmAttackDetectionBruteForceUsersResponse(rsp)
}

// DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdWithResponse request returning *DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserId(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse(rsp)
}

// GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdWithResponse request returning *GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAttackDetectionBruteForceUsersUserId(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationAuthenticatorProvidersWithResponse request returning *GetAdminRealmsRealmAuthenticationAuthenticatorProvidersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationAuthenticatorProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationAuthenticatorProvidersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationAuthenticatorProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationAuthenticatorProvidersResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersWithResponse request returning *GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationClientAuthenticatorProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersResponse(rsp)
}

// PostAdminRealmsRealmAuthenticationConfigWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmAuthenticationConfigResponse
func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationConfigWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationConfigResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationConfigWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationConfigResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationConfigWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationConfigResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationConfig(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationConfigResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdWithResponse request returning *GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdWithResponse(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationConfigDescriptionProviderId(ctx, realm, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdResponse(rsp)
}

// DeleteAdminRealmsRealmAuthenticationConfigIdWithResponse request returning *DeleteAdminRealmsRealmAuthenticationConfigIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmAuthenticationConfigIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAuthenticationConfigIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmAuthenticationConfigId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmAuthenticationConfigIdResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationConfigIdWithResponse request returning *GetAdminRealmsRealmAuthenticationConfigIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationConfigIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationConfigIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationConfigId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationConfigIdResponse(rsp)
}

// PutAdminRealmsRealmAuthenticationConfigIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmAuthenticationConfigIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmAuthenticationConfigIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationConfigIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmAuthenticationConfigIdWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmAuthenticationConfigIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmAuthenticationConfigIdWithResponse(ctx context.Context, realm string, id string, body PutAdminRealmsRealmAuthenticationConfigIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationConfigIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmAuthenticationConfigId(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmAuthenticationConfigIdResponse(rsp)
}

// PostAdminRealmsRealmAuthenticationExecutionsWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmAuthenticationExecutionsResponse
func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationExecutionsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationExecutionsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationExecutionsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationExecutionsResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationExecutionsWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationExecutionsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationExecutions(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationExecutionsResponse(rsp)
}

// DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdWithResponse request returning *DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmAuthenticationExecutionsExecutionId(ctx, realm, executionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationExecutionsExecutionIdWithResponse request returning *GetAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationExecutionsExecutionIdWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationExecutionsExecutionId(ctx, realm, executionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse(rsp)
}

// PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResponse
func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigWithBodyWithResponse(ctx context.Context, realm string, executionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigWithBody(ctx, realm, executionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigWithResponse(ctx context.Context, realm string, executionId string, body PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfig(ctx, realm, executionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdWithResponse request returning *GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdWithResponse(ctx context.Context, realm string, executionId string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigId(ctx, realm, executionId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdResponse(rsp)
}

// PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityWithResponse request returning *PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse
func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriority(ctx, realm, executionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse(rsp)
}

// PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityWithResponse request returning *PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse
func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityWithResponse(ctx context.Context, realm string, executionId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriority(ctx, realm, executionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationFlowsWithResponse request returning *GetAdminRealmsRealmAuthenticationFlowsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationFlowsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationFlowsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationFlows(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationFlowsResponse(rsp)
}

// PostAdminRealmsRealmAuthenticationFlowsWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmAuthenticationFlowsResponse
func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationFlowsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationFlowsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationFlowsResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationFlowsWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationFlowsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationFlows(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationFlowsResponse(rsp)
}

// PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResponse
func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyWithBody(ctx, realm, flowAlias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyWithResponse(ctx context.Context, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopy(ctx, realm, flowAlias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithResponse request returning *GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithResponse(ctx context.Context, realm string, flowAlias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions(ctx, realm, flowAlias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse(rsp)
}

// PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse
func (c *ClientWithResponses) PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithBody(ctx, realm, flowAlias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithResponse(ctx context.Context, realm string, flowAlias string, body PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutions(ctx, realm, flowAlias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse(rsp)
}

// PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse
func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithBody(ctx, realm, flowAlias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithResponse(ctx context.Context, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecution(ctx, realm, flowAlias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse(rsp)
}

// PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse
func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBodyWithResponse(ctx context.Context, realm string, flowAlias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowWithBody(ctx, realm, flowAlias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowWithResponse(ctx context.Context, realm string, flowAlias string, body PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlow(ctx, realm, flowAlias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse(rsp)
}

// DeleteAdminRealmsRealmAuthenticationFlowsIdWithResponse request returning *DeleteAdminRealmsRealmAuthenticationFlowsIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmAuthenticationFlowsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAuthenticationFlowsIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmAuthenticationFlowsId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmAuthenticationFlowsIdResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationFlowsIdWithResponse request returning *GetAdminRealmsRealmAuthenticationFlowsIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationFlowsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationFlowsIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationFlowsId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationFlowsIdResponse(rsp)
}

// PutAdminRealmsRealmAuthenticationFlowsIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmAuthenticationFlowsIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmAuthenticationFlowsIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationFlowsIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmAuthenticationFlowsIdWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmAuthenticationFlowsIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmAuthenticationFlowsIdWithResponse(ctx context.Context, realm string, id string, body PutAdminRealmsRealmAuthenticationFlowsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationFlowsIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmAuthenticationFlowsId(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmAuthenticationFlowsIdResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationFormActionProvidersWithResponse request returning *GetAdminRealmsRealmAuthenticationFormActionProvidersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationFormActionProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationFormActionProvidersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationFormActionProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationFormActionProvidersResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationFormProvidersWithResponse request returning *GetAdminRealmsRealmAuthenticationFormProvidersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationFormProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationFormProvidersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationFormProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationFormProvidersResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionWithResponse request returning *GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationPerClientConfigDescription(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationPerClientConfigDescriptionResponse(rsp)
}

// PostAdminRealmsRealmAuthenticationRegisterRequiredActionWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmAuthenticationRegisterRequiredActionResponse
func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationRegisterRequiredActionWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationRegisterRequiredActionResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationRegisterRequiredActionWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationRegisterRequiredActionResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationRegisterRequiredActionWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmAuthenticationRegisterRequiredActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationRegisterRequiredActionResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationRegisterRequiredAction(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationRegisterRequiredActionResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationRequiredActionsWithResponse request returning *GetAdminRealmsRealmAuthenticationRequiredActionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationRequiredActionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationRequiredActionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationRequiredActions(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationRequiredActionsResponse(rsp)
}

// DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasWithResponse request returning *DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmAuthenticationRequiredActionsAlias(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmAuthenticationRequiredActionsAliasResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationRequiredActionsAliasWithResponse request returning *GetAdminRealmsRealmAuthenticationRequiredActionsAliasResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationRequiredActionsAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationRequiredActionsAliasResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationRequiredActionsAlias(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationRequiredActionsAliasResponse(rsp)
}

// PutAdminRealmsRealmAuthenticationRequiredActionsAliasWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmAuthenticationRequiredActionsAliasResponse
func (c *ClientWithResponses) PutAdminRealmsRealmAuthenticationRequiredActionsAliasWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationRequiredActionsAliasResponse, error) {
	rsp, err := c.PutAdminRealmsRealmAuthenticationRequiredActionsAliasWithBody(ctx, realm, alias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmAuthenticationRequiredActionsAliasResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmAuthenticationRequiredActionsAliasWithResponse(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmAuthenticationRequiredActionsAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationRequiredActionsAliasResponse, error) {
	rsp, err := c.PutAdminRealmsRealmAuthenticationRequiredActionsAlias(ctx, realm, alias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmAuthenticationRequiredActionsAliasResponse(rsp)
}

// DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithResponse request returning *DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfig(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithResponse request returning *GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfig(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse(rsp)
}

// PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse
func (c *ClientWithResponses) PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse, error) {
	rsp, err := c.PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithBody(ctx, realm, alias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithResponse(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse, error) {
	rsp, err := c.PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfig(ctx, realm, alias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionWithResponse request returning *GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescription(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionResponse(rsp)
}

// PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityWithResponse request returning *PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityResponse
func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriority(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityResponse(rsp)
}

// PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityWithResponse request returning *PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityResponse
func (c *ClientWithResponses) PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityResponse, error) {
	rsp, err := c.PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriority(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityResponse(rsp)
}

// GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsWithResponse request returning *GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmAuthenticationUnregisteredRequiredActions(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsResponse(rsp)
}

// PostAdminRealmsRealmClientDescriptionConverterWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientDescriptionConverterResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientDescriptionConverterWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientDescriptionConverterResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientDescriptionConverterWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientDescriptionConverterResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientDescriptionConverterWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmClientDescriptionConverterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientDescriptionConverterResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientDescriptionConverter(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientDescriptionConverterResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientDescriptionConverterWithTextBodyWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmClientDescriptionConverterTextRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientDescriptionConverterResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientDescriptionConverterWithTextBody(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientDescriptionConverterResponse(rsp)
}

// GetAdminRealmsRealmClientPoliciesPoliciesWithResponse request returning *GetAdminRealmsRealmClientPoliciesPoliciesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientPoliciesPoliciesWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmClientPoliciesPoliciesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientPoliciesPoliciesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientPoliciesPolicies(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientPoliciesPoliciesResponse(rsp)
}

// PutAdminRealmsRealmClientPoliciesPoliciesWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientPoliciesPoliciesResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientPoliciesPoliciesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientPoliciesPoliciesResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientPoliciesPoliciesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientPoliciesPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientPoliciesPoliciesWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmClientPoliciesPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientPoliciesPoliciesResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientPoliciesPolicies(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientPoliciesPoliciesResponse(rsp)
}

// GetAdminRealmsRealmClientPoliciesProfilesWithResponse request returning *GetAdminRealmsRealmClientPoliciesProfilesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientPoliciesProfilesWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmClientPoliciesProfilesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientPoliciesProfilesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientPoliciesProfiles(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientPoliciesProfilesResponse(rsp)
}

// PutAdminRealmsRealmClientPoliciesProfilesWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientPoliciesProfilesResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientPoliciesProfilesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientPoliciesProfilesResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientPoliciesProfilesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientPoliciesProfilesResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientPoliciesProfilesWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmClientPoliciesProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientPoliciesProfilesResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientPoliciesProfiles(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientPoliciesProfilesResponse(rsp)
}

// GetAdminRealmsRealmClientRegistrationPolicyProvidersWithResponse request returning *GetAdminRealmsRealmClientRegistrationPolicyProvidersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientRegistrationPolicyProvidersWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientRegistrationPolicyProvidersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientRegistrationPolicyProviders(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientRegistrationPolicyProvidersResponse(rsp)
}

// GetAdminRealmsRealmClientScopesWithResponse request returning *GetAdminRealmsRealmClientScopesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientScopes(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientScopesResponse(rsp)
}

// PostAdminRealmsRealmClientScopesWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientScopesResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientScopesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientScopesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientScopesResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientScopesWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmClientScopesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientScopes(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientScopesResponse(rsp)
}

// DeleteAdminRealmsRealmClientScopesClientScopeIdWithResponse request returning *DeleteAdminRealmsRealmClientScopesClientScopeIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientScopesClientScopeIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientScopesClientScopeId(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientScopesClientScopeIdResponse(rsp)
}

// GetAdminRealmsRealmClientScopesClientScopeIdWithResponse request returning *GetAdminRealmsRealmClientScopesClientScopeIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientScopesClientScopeId(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientScopesClientScopeIdResponse(rsp)
}

// PutAdminRealmsRealmClientScopesClientScopeIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientScopesClientScopeIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientScopesClientScopeIdWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientScopesClientScopeIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientScopesClientScopeIdWithBody(ctx, realm, clientScopeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientScopesClientScopeIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, body PutAdminRealmsRealmClientScopesClientScopeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientScopesClientScopeIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientScopesClientScopeId(ctx, realm, clientScopeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientScopesClientScopeIdResponse(rsp)
}

// PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsWithBody(ctx, realm, clientScopeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModels(ctx, realm, clientScopeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResponse(rsp)
}

// GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithResponse request returning *GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse(rsp)
}

// PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithBody(ctx, realm, clientScopeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModels(ctx, realm, clientScopeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse(rsp)
}

// DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithResponse request returning *DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId(ctx, realm, clientScopeId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse(rsp)
}

// GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithResponse request returning *GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId(ctx, realm, clientScopeId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse(rsp)
}

// PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithBody(ctx, realm, clientScopeId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientScopeId string, id string, body PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsId(ctx, realm, clientScopeId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse(rsp)
}

// GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolWithResponse request returning *GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolWithResponse(ctx context.Context, realm string, clientScopeId string, protocol string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocol(ctx, realm, clientScopeId, protocol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolResponse(rsp)
}

// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsWithResponse request returning *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientScopesClientScopeIdScopeMappings(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsResponse(rsp)
}

// DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse request with arbitrary body returning *DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBody(ctx, realm, clientScopeId, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse(rsp)
}

func (c *ClientWithResponses) DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientScopeId string, client string, body DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient(ctx, realm, clientScopeId, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse(rsp)
}

// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithResponse request returning *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient(ctx, realm, clientScopeId, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse(rsp)
}

// PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithBody(ctx, realm, clientScopeId, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientScopeId string, client string, body PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClient(ctx, realm, clientScopeId, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse(rsp)
}

// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableWithResponse request returning *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableWithResponse(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailable(ctx, realm, clientScopeId, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableResponse(rsp)
}

// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeWithResponse request returning *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeWithResponse(ctx context.Context, realm string, clientScopeId string, client string, params *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientComposite(ctx, realm, clientScopeId, client, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeResponse(rsp)
}

// DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBody(ctx, realm, clientScopeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientScopeId string, body DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm(ctx, realm, clientScopeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse(rsp)
}

// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithResponse request returning *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse(rsp)
}

// PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithBody(ctx, realm, clientScopeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealm(ctx, realm, clientScopeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse(rsp)
}

// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableWithResponse request returning *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailable(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableResponse(rsp)
}

// GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeWithResponse request returning *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, clientScopeId string, params *GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmComposite(ctx, realm, clientScopeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeResponse(rsp)
}

// GetAdminRealmsRealmClientSessionStatsWithResponse request returning *GetAdminRealmsRealmClientSessionStatsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientSessionStatsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientSessionStatsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientSessionStats(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientSessionStatsResponse(rsp)
}

// GetAdminRealmsRealmClientTemplatesWithResponse request returning *GetAdminRealmsRealmClientTemplatesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientTemplatesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientTemplates(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientTemplatesResponse(rsp)
}

// PostAdminRealmsRealmClientTemplatesWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientTemplatesResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientTemplatesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientTemplatesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientTemplatesResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientTemplatesWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmClientTemplatesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientTemplates(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientTemplatesResponse(rsp)
}

// DeleteAdminRealmsRealmClientTemplatesClientScopeIdWithResponse request returning *DeleteAdminRealmsRealmClientTemplatesClientScopeIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientTemplatesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientTemplatesClientScopeId(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientTemplatesClientScopeIdResponse(rsp)
}

// GetAdminRealmsRealmClientTemplatesClientScopeIdWithResponse request returning *GetAdminRealmsRealmClientTemplatesClientScopeIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientTemplatesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientTemplatesClientScopeId(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientTemplatesClientScopeIdResponse(rsp)
}

// PutAdminRealmsRealmClientTemplatesClientScopeIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientTemplatesClientScopeIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientTemplatesClientScopeIdWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientTemplatesClientScopeIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientTemplatesClientScopeIdWithBody(ctx, realm, clientScopeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientTemplatesClientScopeIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientTemplatesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, body PutAdminRealmsRealmClientTemplatesClientScopeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientTemplatesClientScopeIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientTemplatesClientScopeId(ctx, realm, clientScopeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientTemplatesClientScopeIdResponse(rsp)
}

// PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsWithBody(ctx, realm, clientScopeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModels(ctx, realm, clientScopeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResponse(rsp)
}

// GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithResponse request returning *GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse(rsp)
}

// PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithBody(ctx, realm, clientScopeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithResponse(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModels(ctx, realm, clientScopeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse(rsp)
}

// DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithResponse request returning *DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId(ctx, realm, clientScopeId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse(rsp)
}

// GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithResponse request returning *GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientScopeId string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId(ctx, realm, clientScopeId, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse(rsp)
}

// PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithBody(ctx, realm, clientScopeId, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientScopeId string, id string, body PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsId(ctx, realm, clientScopeId, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse(rsp)
}

// GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolWithResponse request returning *GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolWithResponse(ctx context.Context, realm string, clientScopeId string, protocol string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocol(ctx, realm, clientScopeId, protocol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolResponse(rsp)
}

// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsWithResponse request returning *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappings(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsResponse(rsp)
}

// DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse request with arbitrary body returning *DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBody(ctx, realm, clientScopeId, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse(rsp)
}

func (c *ClientWithResponses) DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientScopeId string, client string, body DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient(ctx, realm, clientScopeId, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse(rsp)
}

// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithResponse request returning *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient(ctx, realm, clientScopeId, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse(rsp)
}

// PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithBody(ctx, realm, clientScopeId, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientScopeId string, client string, body PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClient(ctx, realm, clientScopeId, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse(rsp)
}

// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableWithResponse request returning *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableWithResponse(ctx context.Context, realm string, clientScopeId string, client string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailable(ctx, realm, clientScopeId, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableResponse(rsp)
}

// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeWithResponse request returning *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeWithResponse(ctx context.Context, realm string, clientScopeId string, client string, params *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientComposite(ctx, realm, clientScopeId, client, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeResponse(rsp)
}

// DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBody(ctx, realm, clientScopeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientScopeId string, body DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm(ctx, realm, clientScopeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse(rsp)
}

// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithResponse request returning *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse(rsp)
}

// PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, clientScopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithBody(ctx, realm, clientScopeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientScopeId string, body PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealm(ctx, realm, clientScopeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse(rsp)
}

// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableWithResponse request returning *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailable(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableResponse(rsp)
}

// GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeWithResponse request returning *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, clientScopeId string, params *GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmComposite(ctx, realm, clientScopeId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeResponse(rsp)
}

// GetAdminRealmsRealmClientTypesWithResponse request returning *GetAdminRealmsRealmClientTypesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientTypesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientTypesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientTypes(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientTypesResponse(rsp)
}

// PutAdminRealmsRealmClientTypesWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientTypesResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientTypesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientTypesResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientTypesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientTypesResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientTypesWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmClientTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientTypesResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientTypes(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientTypesResponse(rsp)
}

// GetAdminRealmsRealmClientsWithResponse request returning *GetAdminRealmsRealmClientsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmClientsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClients(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsResponse(rsp)
}

// PostAdminRealmsRealmClientsWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClients(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsResponse(rsp)
}

// GetAdminRealmsRealmClientsInitialAccessWithResponse request returning *GetAdminRealmsRealmClientsInitialAccessResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsInitialAccessWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsInitialAccessResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsInitialAccess(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsInitialAccessResponse(rsp)
}

// PostAdminRealmsRealmClientsInitialAccessWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsInitialAccessResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsInitialAccessWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsInitialAccessResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsInitialAccessWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsInitialAccessResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsInitialAccessWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmClientsInitialAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsInitialAccessResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsInitialAccess(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsInitialAccessResponse(rsp)
}

// DeleteAdminRealmsRealmClientsInitialAccessIdWithResponse request returning *DeleteAdminRealmsRealmClientsInitialAccessIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsInitialAccessIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsInitialAccessIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsInitialAccessId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsInitialAccessIdResponse(rsp)
}

// DeleteAdminRealmsRealmClientsClientUuidWithResponse request returning *DeleteAdminRealmsRealmClientsClientUuidResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuid(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidWithResponse request returning *GetAdminRealmsRealmClientsClientUuidResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuid(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidResponse(rsp)
}

// PutAdminRealmsRealmClientsClientUuidWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientsClientUuidResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidWithResponse(ctx context.Context, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuid(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServer(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse(rsp)
}

// PutAdminRealmsRealmClientsClientUuidAuthzResourceServerWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidAuthzResourceServerWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidAuthzResourceServerWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidAuthzResourceServerWithResponse(ctx context.Context, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidAuthzResourceServer(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImport(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermission(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluate(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProviders(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearch(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicy(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluate(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProviders(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearch(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResource(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, params *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithBody(ctx, realm, clientUuid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithResponse(ctx context.Context, realm string, clientUuid string, params *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceParams, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResource(ctx, realm, clientUuid, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearch(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchResponse(rsp)
}

// DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithResponse request returning *DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithResponse(ctx context.Context, realm string, clientUuid string, resourceId string, params *DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId(ctx, realm, clientUuid, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithResponse(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId(ctx, realm, clientUuid, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse(rsp)
}

// PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, resourceId string, params *PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithBody(ctx, realm, clientUuid, resourceId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithResponse(ctx context.Context, realm string, clientUuid string, resourceId string, params *PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdParams, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceId(ctx, realm, clientUuid, resourceId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesWithResponse(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributes(ctx, realm, clientUuid, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsWithResponse(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissions(ctx, realm, clientUuid, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesWithResponse(ctx context.Context, realm string, clientUuid string, resourceId string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopes(ctx, realm, clientUuid, resourceId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScope(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScope(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearch(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchResponse(rsp)
}

// DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithResponse request returning *DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithResponse(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId(ctx, realm, clientUuid, scopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithResponse(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId(ctx, realm, clientUuid, scopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse(rsp)
}

// PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, scopeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithBody(ctx, realm, clientUuid, scopeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithResponse(ctx context.Context, realm string, clientUuid string, scopeId string, body PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeId(ctx, realm, clientUuid, scopeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsWithResponse(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissions(ctx, realm, clientUuid, scopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesWithResponse(ctx context.Context, realm string, clientUuid string, scopeId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResources(ctx, realm, clientUuid, scopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsWithResponse request returning *GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettings(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidCertificatesAttrWithResponse request returning *GetAdminRealmsRealmClientsClientUuidCertificatesAttrResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidCertificatesAttrWithResponse(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidCertificatesAttrResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidCertificatesAttr(ctx, realm, clientUuid, attr, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidCertificatesAttrResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadWithBody(ctx, realm, clientUuid, attr, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadWithResponse(ctx context.Context, realm string, clientUuid string, attr string, body PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownload(ctx, realm, clientUuid, attr, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateWithResponse request returning *PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateWithResponse(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerate(ctx, realm, clientUuid, attr, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, attr string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadWithBody(ctx, realm, clientUuid, attr, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadWithResponse(ctx context.Context, realm string, clientUuid string, attr string, body PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownload(ctx, realm, clientUuid, attr, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadWithResponse request returning *PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadWithResponse(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidCertificatesAttrUpload(ctx, realm, clientUuid, attr, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateWithResponse request returning *PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateWithResponse(ctx context.Context, realm string, clientUuid string, attr string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificate(ctx, realm, clientUuid, attr, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidClientSecretWithResponse request returning *GetAdminRealmsRealmClientsClientUuidClientSecretResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidClientSecretWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidClientSecretResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidClientSecret(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidClientSecretResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidClientSecretWithResponse request returning *PostAdminRealmsRealmClientsClientUuidClientSecretResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidClientSecretWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidClientSecretResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidClientSecret(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidClientSecretResponse(rsp)
}

// DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedWithResponse request returning *DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuidClientSecretRotated(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidClientSecretRotatedWithResponse request returning *GetAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidClientSecretRotatedWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidClientSecretRotated(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidDefaultClientScopesWithResponse request returning *GetAdminRealmsRealmClientsClientUuidDefaultClientScopesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidDefaultClientScopesWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidDefaultClientScopesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidDefaultClientScopes(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidDefaultClientScopesResponse(rsp)
}

// DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdWithResponse request returning *DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId(ctx, realm, clientUuid, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse(rsp)
}

// PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdWithResponse request returning *PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeId(ctx, realm, clientUuid, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenWithResponse request returning *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessToken(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenWithResponse request returning *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdToken(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoWithResponse request returning *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfo(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersWithResponse request returning *GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappers(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedWithResponse request returning *GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedWithResponse(ctx context.Context, realm string, clientUuid string, roleContainerId string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGranted(ctx, realm, clientUuid, roleContainerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedWithResponse request returning *GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedWithResponse(ctx context.Context, realm string, clientUuid string, roleContainerId string, params *GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGranted(ctx, realm, clientUuid, roleContainerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdWithResponse request returning *GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdWithResponse(ctx context.Context, realm string, clientUuid string, providerId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderId(ctx, realm, clientUuid, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidManagementPermissionsWithResponse request returning *GetAdminRealmsRealmClientsClientUuidManagementPermissionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidManagementPermissionsWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidManagementPermissionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidManagementPermissions(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidManagementPermissionsResponse(rsp)
}

// PutAdminRealmsRealmClientsClientUuidManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientsClientUuidManagementPermissionsResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidManagementPermissionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidManagementPermissionsWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidManagementPermissionsWithResponse(ctx context.Context, realm string, clientUuid string, body PutAdminRealmsRealmClientsClientUuidManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidManagementPermissionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidManagementPermissions(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidManagementPermissionsResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidNodesWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidNodesResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidNodesWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidNodesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidNodesWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidNodesResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidNodesWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidNodesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidNodesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidNodes(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidNodesResponse(rsp)
}

// DeleteAdminRealmsRealmClientsClientUuidNodesNodeWithResponse request returning *DeleteAdminRealmsRealmClientsClientUuidNodesNodeResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidNodesNodeWithResponse(ctx context.Context, realm string, clientUuid string, node string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidNodesNodeResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuidNodesNode(ctx, realm, clientUuid, node, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidNodesNodeResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidOfflineSessionCountWithResponse request returning *GetAdminRealmsRealmClientsClientUuidOfflineSessionCountResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidOfflineSessionCountWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidOfflineSessionCountResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidOfflineSessionCount(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidOfflineSessionCountResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidOfflineSessionsWithResponse request returning *GetAdminRealmsRealmClientsClientUuidOfflineSessionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidOfflineSessionsWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidOfflineSessionsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidOfflineSessionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidOfflineSessions(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidOfflineSessionsResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidOptionalClientScopesWithResponse request returning *GetAdminRealmsRealmClientsClientUuidOptionalClientScopesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidOptionalClientScopesWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidOptionalClientScopesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidOptionalClientScopes(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidOptionalClientScopesResponse(rsp)
}

// DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdWithResponse request returning *DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId(ctx, realm, clientUuid, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse(rsp)
}

// PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdWithResponse request returning *PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientUuid string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeId(ctx, realm, clientUuid, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModels(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithResponse request returning *GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidProtocolMappersModels(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidProtocolMappersModels(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse(rsp)
}

// DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithResponse request returning *DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientUuid string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsId(ctx, realm, clientUuid, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithResponse request returning *GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientUuid string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsId(ctx, realm, clientUuid, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse(rsp)
}

// PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithBody(ctx, realm, clientUuid, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithResponse(ctx context.Context, realm string, clientUuid string, id string, body PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsId(ctx, realm, clientUuid, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolWithResponse request returning *GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolWithResponse(ctx context.Context, realm string, clientUuid string, protocol string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocol(ctx, realm, clientUuid, protocol, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidPushRevocationWithResponse request returning *PostAdminRealmsRealmClientsClientUuidPushRevocationResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidPushRevocationWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidPushRevocationResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidPushRevocation(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidPushRevocationResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenWithResponse request returning *PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidRegistrationAccessToken(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidRolesWithResponse request returning *GetAdminRealmsRealmClientsClientUuidRolesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidRolesWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidRolesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidRoles(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidRolesResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidRolesWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidRolesResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidRolesWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidRolesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidRolesWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidRolesResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidRolesWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidRolesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidRoles(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidRolesResponse(rsp)
}

// DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameWithResponse request returning *DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuidRolesRoleName(ctx, realm, clientUuid, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidRolesRoleNameWithResponse request returning *GetAdminRealmsRealmClientsClientUuidRolesRoleNameResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidRolesRoleNameWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidRolesRoleName(ctx, realm, clientUuid, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameResponse(rsp)
}

// PutAdminRealmsRealmClientsClientUuidRolesRoleNameWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientsClientUuidRolesRoleNameResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidRolesRoleNameWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidRolesRoleNameResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidRolesRoleNameWithBody(ctx, realm, clientUuid, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidRolesRoleNameResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidRolesRoleNameWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, body PutAdminRealmsRealmClientsClientUuidRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidRolesRoleNameResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidRolesRoleName(ctx, realm, clientUuid, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidRolesRoleNameResponse(rsp)
}

// DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBodyWithResponse request with arbitrary body returning *DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBody(ctx, realm, clientUuid, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse(rsp)
}

func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, body DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameComposites(ctx, realm, clientUuid, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithResponse request returning *GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidRolesRoleNameComposites(ctx, realm, clientUuid, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithBody(ctx, realm, clientUuid, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, body PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidRolesRoleNameComposites(ctx, realm, clientUuid, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidWithResponse request returning *GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, client2Uuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2Uuid(ctx, realm, clientUuid, roleName, client2Uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmWithResponse request returning *GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealm(ctx, realm, clientUuid, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsWithResponse request returning *GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, params *GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroups(ctx, realm, clientUuid, roleName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithResponse request returning *GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions(ctx, realm, clientUuid, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse(rsp)
}

// PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse
func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithBody(ctx, realm, clientUuid, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, body PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissions(ctx, realm, clientUuid, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersWithResponse request returning *GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersWithResponse(ctx context.Context, realm string, clientUuid string, roleName string, params *GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsers(ctx, realm, clientUuid, roleName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidScopeMappingsWithResponse request returning *GetAdminRealmsRealmClientsClientUuidScopeMappingsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidScopeMappingsWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidScopeMappings(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsResponse(rsp)
}

// DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBodyWithResponse request with arbitrary body returning *DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBody(ctx, realm, clientUuid, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse(rsp)
}

func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientUuid string, client string, body DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient(ctx, realm, clientUuid, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithResponse request returning *GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientUuid string, client string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient(ctx, realm, clientUuid, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, client string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithBody(ctx, realm, clientUuid, client, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithResponse(ctx context.Context, realm string, clientUuid string, client string, body PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClient(ctx, realm, clientUuid, client, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableWithResponse request returning *GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableWithResponse(ctx context.Context, realm string, clientUuid string, client string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailable(ctx, realm, clientUuid, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeWithResponse request returning *GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeWithResponse(ctx context.Context, realm string, clientUuid string, client string, params *GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientComposite(ctx, realm, clientUuid, client, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeResponse(rsp)
}

// DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientUuid string, body DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealm(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithResponse request returning *GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidScopeMappingsRealm(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse(rsp)
}

// PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse
func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, clientUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithBody(ctx, realm, clientUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithResponse(ctx context.Context, realm string, clientUuid string, body PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse, error) {
	rsp, err := c.PostAdminRealmsRealmClientsClientUuidScopeMappingsRealm(ctx, realm, clientUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableWithResponse request returning *GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailable(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeWithResponse request returning *GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmComposite(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidServiceAccountUserWithResponse request returning *GetAdminRealmsRealmClientsClientUuidServiceAccountUserResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidServiceAccountUserWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidServiceAccountUserResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidServiceAccountUser(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidServiceAccountUserResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidSessionCountWithResponse request returning *GetAdminRealmsRealmClientsClientUuidSessionCountResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidSessionCountWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidSessionCountResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidSessionCount(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidSessionCountResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidTestNodesAvailableWithResponse request returning *GetAdminRealmsRealmClientsClientUuidTestNodesAvailableResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidTestNodesAvailableWithResponse(ctx context.Context, realm string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidTestNodesAvailableResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidTestNodesAvailable(ctx, realm, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidTestNodesAvailableResponse(rsp)
}

// GetAdminRealmsRealmClientsClientUuidUserSessionsWithResponse request returning *GetAdminRealmsRealmClientsClientUuidUserSessionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmClientsClientUuidUserSessionsWithResponse(ctx context.Context, realm string, clientUuid string, params *GetAdminRealmsRealmClientsClientUuidUserSessionsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmClientsClientUuidUserSessionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmClientsClientUuidUserSessions(ctx, realm, clientUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmClientsClientUuidUserSessionsResponse(rsp)
}

// GetAdminRealmsRealmComponentsWithResponse request returning *GetAdminRealmsRealmComponentsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmComponentsWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmComponentsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmComponentsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmComponents(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmComponentsResponse(rsp)
}

// PostAdminRealmsRealmComponentsWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmComponentsResponse
func (c *ClientWithResponses) PostAdminRealmsRealmComponentsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmComponentsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmComponentsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmComponentsResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmComponentsWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmComponentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmComponentsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmComponents(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmComponentsResponse(rsp)
}

// DeleteAdminRealmsRealmComponentsIdWithResponse request returning *DeleteAdminRealmsRealmComponentsIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmComponentsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmComponentsIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmComponentsId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmComponentsIdResponse(rsp)
}

// GetAdminRealmsRealmComponentsIdWithResponse request returning *GetAdminRealmsRealmComponentsIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmComponentsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmComponentsIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmComponentsId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmComponentsIdResponse(rsp)
}

// PutAdminRealmsRealmComponentsIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmComponentsIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmComponentsIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmComponentsIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmComponentsIdWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmComponentsIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmComponentsIdWithResponse(ctx context.Context, realm string, id string, body PutAdminRealmsRealmComponentsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmComponentsIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmComponentsId(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmComponentsIdResponse(rsp)
}

// GetAdminRealmsRealmComponentsIdSubComponentTypesWithResponse request returning *GetAdminRealmsRealmComponentsIdSubComponentTypesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmComponentsIdSubComponentTypesWithResponse(ctx context.Context, realm string, id string, params *GetAdminRealmsRealmComponentsIdSubComponentTypesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmComponentsIdSubComponentTypesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmComponentsIdSubComponentTypes(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmComponentsIdSubComponentTypesResponse(rsp)
}

// GetAdminRealmsRealmCredentialRegistratorsWithResponse request returning *GetAdminRealmsRealmCredentialRegistratorsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmCredentialRegistratorsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmCredentialRegistratorsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmCredentialRegistrators(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmCredentialRegistratorsResponse(rsp)
}

// GetAdminRealmsRealmDefaultDefaultClientScopesWithResponse request returning *GetAdminRealmsRealmDefaultDefaultClientScopesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmDefaultDefaultClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmDefaultDefaultClientScopesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmDefaultDefaultClientScopes(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmDefaultDefaultClientScopesResponse(rsp)
}

// DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdWithResponse request returning *DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeId(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse(rsp)
}

// PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdWithResponse request returning *PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeId(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse(rsp)
}

// GetAdminRealmsRealmDefaultGroupsWithResponse request returning *GetAdminRealmsRealmDefaultGroupsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmDefaultGroupsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmDefaultGroupsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmDefaultGroups(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmDefaultGroupsResponse(rsp)
}

// DeleteAdminRealmsRealmDefaultGroupsGroupIdWithResponse request returning *DeleteAdminRealmsRealmDefaultGroupsGroupIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmDefaultGroupsGroupIdWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmDefaultGroupsGroupIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmDefaultGroupsGroupId(ctx, realm, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmDefaultGroupsGroupIdResponse(rsp)
}

// PutAdminRealmsRealmDefaultGroupsGroupIdWithResponse request returning *PutAdminRealmsRealmDefaultGroupsGroupIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmDefaultGroupsGroupIdWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmDefaultGroupsGroupIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmDefaultGroupsGroupId(ctx, realm, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmDefaultGroupsGroupIdResponse(rsp)
}

// GetAdminRealmsRealmDefaultOptionalClientScopesWithResponse request returning *GetAdminRealmsRealmDefaultOptionalClientScopesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmDefaultOptionalClientScopesWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmDefaultOptionalClientScopesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmDefaultOptionalClientScopes(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmDefaultOptionalClientScopesResponse(rsp)
}

// DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdWithResponse request returning *DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeId(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse(rsp)
}

// PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdWithResponse request returning *PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdWithResponse(ctx context.Context, realm string, clientScopeId string, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeId(ctx, realm, clientScopeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse(rsp)
}

// DeleteAdminRealmsRealmEventsWithResponse request returning *DeleteAdminRealmsRealmEventsResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmEventsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmEventsResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmEvents(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmEventsResponse(rsp)
}

// GetAdminRealmsRealmEventsWithResponse request returning *GetAdminRealmsRealmEventsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmEventsWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmEventsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmEventsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmEvents(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmEventsResponse(rsp)
}

// GetAdminRealmsRealmEventsConfigWithResponse request returning *GetAdminRealmsRealmEventsConfigResponse
func (c *ClientWithResponses) GetAdminRealmsRealmEventsConfigWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmEventsConfigResponse, error) {
	rsp, err := c.GetAdminRealmsRealmEventsConfig(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmEventsConfigResponse(rsp)
}

// PutAdminRealmsRealmEventsConfigWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmEventsConfigResponse
func (c *ClientWithResponses) PutAdminRealmsRealmEventsConfigWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmEventsConfigResponse, error) {
	rsp, err := c.PutAdminRealmsRealmEventsConfigWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmEventsConfigResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmEventsConfigWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmEventsConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmEventsConfigResponse, error) {
	rsp, err := c.PutAdminRealmsRealmEventsConfig(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmEventsConfigResponse(rsp)
}

// GetAdminRealmsRealmGroupByPathPathWithResponse request returning *GetAdminRealmsRealmGroupByPathPathResponse
func (c *ClientWithResponses) GetAdminRealmsRealmGroupByPathPathWithResponse(ctx context.Context, realm string, path string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupByPathPathResponse, error) {
	rsp, err := c.GetAdminRealmsRealmGroupByPathPath(ctx, realm, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmGroupByPathPathResponse(rsp)
}

// GetAdminRealmsRealmGroupsWithResponse request returning *GetAdminRealmsRealmGroupsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmGroupsWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmGroupsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmGroups(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmGroupsResponse(rsp)
}

// PostAdminRealmsRealmGroupsWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmGroupsResponse
func (c *ClientWithResponses) PostAdminRealmsRealmGroupsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmGroupsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmGroupsResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmGroupsWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmGroups(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmGroupsResponse(rsp)
}

// GetAdminRealmsRealmGroupsCountWithResponse request returning *GetAdminRealmsRealmGroupsCountResponse
func (c *ClientWithResponses) GetAdminRealmsRealmGroupsCountWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmGroupsCountParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsCountResponse, error) {
	rsp, err := c.GetAdminRealmsRealmGroupsCount(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmGroupsCountResponse(rsp)
}

// DeleteAdminRealmsRealmGroupsGroupIdWithResponse request returning *DeleteAdminRealmsRealmGroupsGroupIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmGroupsGroupIdWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmGroupsGroupIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmGroupsGroupId(ctx, realm, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmGroupsGroupIdResponse(rsp)
}

// GetAdminRealmsRealmGroupsGroupIdWithResponse request returning *GetAdminRealmsRealmGroupsGroupIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmGroupsGroupIdWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmGroupsGroupId(ctx, realm, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmGroupsGroupIdResponse(rsp)
}

// PutAdminRealmsRealmGroupsGroupIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmGroupsGroupIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmGroupsGroupIdWithBodyWithResponse(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmGroupsGroupIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmGroupsGroupIdWithBody(ctx, realm, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmGroupsGroupIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmGroupsGroupIdWithResponse(ctx context.Context, realm string, groupId string, body PutAdminRealmsRealmGroupsGroupIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmGroupsGroupIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmGroupsGroupId(ctx, realm, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmGroupsGroupIdResponse(rsp)
}

// GetAdminRealmsRealmGroupsGroupIdChildrenWithResponse request returning *GetAdminRealmsRealmGroupsGroupIdChildrenResponse
func (c *ClientWithResponses) GetAdminRealmsRealmGroupsGroupIdChildrenWithResponse(ctx context.Context, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdChildrenParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdChildrenResponse, error) {
	rsp, err := c.GetAdminRealmsRealmGroupsGroupIdChildren(ctx, realm, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmGroupsGroupIdChildrenResponse(rsp)
}

// PostAdminRealmsRealmGroupsGroupIdChildrenWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmGroupsGroupIdChildrenResponse
func (c *ClientWithResponses) PostAdminRealmsRealmGroupsGroupIdChildrenWithBodyWithResponse(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsGroupIdChildrenResponse, error) {
	rsp, err := c.PostAdminRealmsRealmGroupsGroupIdChildrenWithBody(ctx, realm, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmGroupsGroupIdChildrenResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmGroupsGroupIdChildrenWithResponse(ctx context.Context, realm string, groupId string, body PostAdminRealmsRealmGroupsGroupIdChildrenJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsGroupIdChildrenResponse, error) {
	rsp, err := c.PostAdminRealmsRealmGroupsGroupIdChildren(ctx, realm, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmGroupsGroupIdChildrenResponse(rsp)
}

// GetAdminRealmsRealmGroupsGroupIdManagementPermissionsWithResponse request returning *GetAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmGroupsGroupIdManagementPermissionsWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmGroupsGroupIdManagementPermissions(ctx, realm, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse(rsp)
}

// PutAdminRealmsRealmGroupsGroupIdManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse
func (c *ClientWithResponses) PutAdminRealmsRealmGroupsGroupIdManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmGroupsGroupIdManagementPermissionsWithBody(ctx, realm, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmGroupsGroupIdManagementPermissionsWithResponse(ctx context.Context, realm string, groupId string, body PutAdminRealmsRealmGroupsGroupIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmGroupsGroupIdManagementPermissions(ctx, realm, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse(rsp)
}

// GetAdminRealmsRealmGroupsGroupIdMembersWithResponse request returning *GetAdminRealmsRealmGroupsGroupIdMembersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmGroupsGroupIdMembersWithResponse(ctx context.Context, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdMembersParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdMembersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmGroupsGroupIdMembers(ctx, realm, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmGroupsGroupIdMembersResponse(rsp)
}

// GetAdminRealmsRealmGroupsGroupIdRoleMappingsWithResponse request returning *GetAdminRealmsRealmGroupsGroupIdRoleMappingsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmGroupsGroupIdRoleMappingsWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmGroupsGroupIdRoleMappings(ctx, realm, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsResponse(rsp)
}

// DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBodyWithResponse request with arbitrary body returning *DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBodyWithResponse(ctx context.Context, realm string, groupId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBody(ctx, realm, groupId, clientId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithResponse(ctx context.Context, realm string, groupId string, clientId string, body DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId(ctx, realm, groupId, clientId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse(rsp)
}

// GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithResponse request returning *GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithResponse(ctx context.Context, realm string, groupId string, clientId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId(ctx, realm, groupId, clientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse(rsp)
}

// PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse
func (c *ClientWithResponses) PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBodyWithResponse(ctx context.Context, realm string, groupId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse, error) {
	rsp, err := c.PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithBody(ctx, realm, groupId, clientId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithResponse(ctx context.Context, realm string, groupId string, clientId string, body PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse, error) {
	rsp, err := c.PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientId(ctx, realm, groupId, clientId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse(rsp)
}

// GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableWithResponse request returning *GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableResponse
func (c *ClientWithResponses) GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableWithResponse(ctx context.Context, realm string, groupId string, clientId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableResponse, error) {
	rsp, err := c.GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailable(ctx, realm, groupId, clientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableResponse(rsp)
}

// GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeWithResponse request returning *GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeResponse
func (c *ClientWithResponses) GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeWithResponse(ctx context.Context, realm string, groupId string, clientId string, params *GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeResponse, error) {
	rsp, err := c.GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdComposite(ctx, realm, groupId, clientId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeResponse(rsp)
}

// DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBodyWithResponse request with arbitrary body returning *DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBody(ctx, realm, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, groupId string, body DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealm(ctx, realm, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse(rsp)
}

// GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithResponse request returning *GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse
func (c *ClientWithResponses) GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse, error) {
	rsp, err := c.GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealm(ctx, realm, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse(rsp)
}

// PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse
func (c *ClientWithResponses) PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse, error) {
	rsp, err := c.PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithBody(ctx, realm, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, groupId string, body PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse, error) {
	rsp, err := c.PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealm(ctx, realm, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse(rsp)
}

// GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableWithResponse request returning *GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableResponse
func (c *ClientWithResponses) GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableWithResponse(ctx context.Context, realm string, groupId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableResponse, error) {
	rsp, err := c.GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailable(ctx, realm, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableResponse(rsp)
}

// GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeWithResponse request returning *GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeResponse
func (c *ClientWithResponses) GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeWithResponse(ctx context.Context, realm string, groupId string, params *GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeResponse, error) {
	rsp, err := c.GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmComposite(ctx, realm, groupId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeResponse(rsp)
}

// PostAdminRealmsRealmIdentityProviderImportConfigWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmIdentityProviderImportConfigResponse
func (c *ClientWithResponses) PostAdminRealmsRealmIdentityProviderImportConfigWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmIdentityProviderImportConfigResponse, error) {
	rsp, err := c.PostAdminRealmsRealmIdentityProviderImportConfigWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmIdentityProviderImportConfigResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmIdentityProviderImportConfigWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmIdentityProviderImportConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmIdentityProviderImportConfigResponse, error) {
	rsp, err := c.PostAdminRealmsRealmIdentityProviderImportConfig(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmIdentityProviderImportConfigResponse(rsp)
}

// GetAdminRealmsRealmIdentityProviderInstancesWithResponse request returning *GetAdminRealmsRealmIdentityProviderInstancesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmIdentityProviderInstancesWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmIdentityProviderInstancesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmIdentityProviderInstances(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmIdentityProviderInstancesResponse(rsp)
}

// PostAdminRealmsRealmIdentityProviderInstancesWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmIdentityProviderInstancesResponse
func (c *ClientWithResponses) PostAdminRealmsRealmIdentityProviderInstancesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmIdentityProviderInstancesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmIdentityProviderInstancesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmIdentityProviderInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmIdentityProviderInstancesWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmIdentityProviderInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmIdentityProviderInstancesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmIdentityProviderInstances(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmIdentityProviderInstancesResponse(rsp)
}

// DeleteAdminRealmsRealmIdentityProviderInstancesAliasWithResponse request returning *DeleteAdminRealmsRealmIdentityProviderInstancesAliasResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmIdentityProviderInstancesAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmIdentityProviderInstancesAliasResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmIdentityProviderInstancesAlias(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmIdentityProviderInstancesAliasResponse(rsp)
}

// GetAdminRealmsRealmIdentityProviderInstancesAliasWithResponse request returning *GetAdminRealmsRealmIdentityProviderInstancesAliasResponse
func (c *ClientWithResponses) GetAdminRealmsRealmIdentityProviderInstancesAliasWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesAliasResponse, error) {
	rsp, err := c.GetAdminRealmsRealmIdentityProviderInstancesAlias(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmIdentityProviderInstancesAliasResponse(rsp)
}

// PutAdminRealmsRealmIdentityProviderInstancesAliasWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmIdentityProviderInstancesAliasResponse
func (c *ClientWithResponses) PutAdminRealmsRealmIdentityProviderInstancesAliasWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmIdentityProviderInstancesAliasResponse, error) {
	rsp, err := c.PutAdminRealmsRealmIdentityProviderInstancesAliasWithBody(ctx, realm, alias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmIdentityProviderInstancesAliasResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmIdentityProviderInstancesAliasWithResponse(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmIdentityProviderInstancesAliasJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmIdentityProviderInstancesAliasResponse, error) {
	rsp, err := c.PutAdminRealmsRealmIdentityProviderInstancesAlias(ctx, realm, alias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmIdentityProviderInstancesAliasResponse(rsp)
}

// GetAdminRealmsRealmIdentityProviderInstancesAliasExportWithResponse request returning *GetAdminRealmsRealmIdentityProviderInstancesAliasExportResponse
func (c *ClientWithResponses) GetAdminRealmsRealmIdentityProviderInstancesAliasExportWithResponse(ctx context.Context, realm string, alias string, params *GetAdminRealmsRealmIdentityProviderInstancesAliasExportParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesAliasExportResponse, error) {
	rsp, err := c.GetAdminRealmsRealmIdentityProviderInstancesAliasExport(ctx, realm, alias, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmIdentityProviderInstancesAliasExportResponse(rsp)
}

// GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse request returning *GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse(rsp)
}

// PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse
func (c *ClientWithResponses) PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithBody(ctx, realm, alias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse(ctx context.Context, realm string, alias string, body PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissions(ctx, realm, alias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse(rsp)
}

// GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesWithResponse request returning *GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypes(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesResponse(rsp)
}

// GetAdminRealmsRealmIdentityProviderInstancesAliasMappersWithResponse request returning *GetAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmIdentityProviderInstancesAliasMappersWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmIdentityProviderInstancesAliasMappers(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse(rsp)
}

// PostAdminRealmsRealmIdentityProviderInstancesAliasMappersWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse
func (c *ClientWithResponses) PostAdminRealmsRealmIdentityProviderInstancesAliasMappersWithBodyWithResponse(ctx context.Context, realm string, alias string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse, error) {
	rsp, err := c.PostAdminRealmsRealmIdentityProviderInstancesAliasMappersWithBody(ctx, realm, alias, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmIdentityProviderInstancesAliasMappersWithResponse(ctx context.Context, realm string, alias string, body PostAdminRealmsRealmIdentityProviderInstancesAliasMappersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse, error) {
	rsp, err := c.PostAdminRealmsRealmIdentityProviderInstancesAliasMappers(ctx, realm, alias, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse(rsp)
}

// DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithResponse request returning *DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithResponse(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersId(ctx, realm, alias, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse(rsp)
}

// GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithResponse request returning *GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithResponse(ctx context.Context, realm string, alias string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmIdentityProviderInstancesAliasMappersId(ctx, realm, alias, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse(rsp)
}

// PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithBodyWithResponse(ctx context.Context, realm string, alias string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithBody(ctx, realm, alias, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithResponse(ctx context.Context, realm string, alias string, id string, body PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmIdentityProviderInstancesAliasMappersId(ctx, realm, alias, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse(rsp)
}

// GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysWithResponse request returning *GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysResponse
func (c *ClientWithResponses) GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysWithResponse(ctx context.Context, realm string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysResponse, error) {
	rsp, err := c.GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeys(ctx, realm, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysResponse(rsp)
}

// GetAdminRealmsRealmIdentityProviderProvidersProviderIdWithResponse request returning *GetAdminRealmsRealmIdentityProviderProvidersProviderIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmIdentityProviderProvidersProviderIdWithResponse(ctx context.Context, realm string, providerId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmIdentityProviderProvidersProviderIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmIdentityProviderProvidersProviderId(ctx, realm, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmIdentityProviderProvidersProviderIdResponse(rsp)
}

// GetAdminRealmsRealmKeysWithResponse request returning *GetAdminRealmsRealmKeysResponse
func (c *ClientWithResponses) GetAdminRealmsRealmKeysWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmKeysResponse, error) {
	rsp, err := c.GetAdminRealmsRealmKeys(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmKeysResponse(rsp)
}

// GetAdminRealmsRealmLocalizationWithResponse request returning *GetAdminRealmsRealmLocalizationResponse
func (c *ClientWithResponses) GetAdminRealmsRealmLocalizationWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmLocalizationResponse, error) {
	rsp, err := c.GetAdminRealmsRealmLocalization(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmLocalizationResponse(rsp)
}

// DeleteAdminRealmsRealmLocalizationLocaleWithResponse request returning *DeleteAdminRealmsRealmLocalizationLocaleResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmLocalizationLocaleWithResponse(ctx context.Context, realm string, locale string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmLocalizationLocaleResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmLocalizationLocale(ctx, realm, locale, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmLocalizationLocaleResponse(rsp)
}

// GetAdminRealmsRealmLocalizationLocaleWithResponse request returning *GetAdminRealmsRealmLocalizationLocaleResponse
func (c *ClientWithResponses) GetAdminRealmsRealmLocalizationLocaleWithResponse(ctx context.Context, realm string, locale string, params *GetAdminRealmsRealmLocalizationLocaleParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmLocalizationLocaleResponse, error) {
	rsp, err := c.GetAdminRealmsRealmLocalizationLocale(ctx, realm, locale, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmLocalizationLocaleResponse(rsp)
}

// PostAdminRealmsRealmLocalizationLocaleWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmLocalizationLocaleResponse
func (c *ClientWithResponses) PostAdminRealmsRealmLocalizationLocaleWithBodyWithResponse(ctx context.Context, realm string, locale string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmLocalizationLocaleResponse, error) {
	rsp, err := c.PostAdminRealmsRealmLocalizationLocaleWithBody(ctx, realm, locale, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmLocalizationLocaleResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmLocalizationLocaleWithResponse(ctx context.Context, realm string, locale string, body PostAdminRealmsRealmLocalizationLocaleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmLocalizationLocaleResponse, error) {
	rsp, err := c.PostAdminRealmsRealmLocalizationLocale(ctx, realm, locale, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmLocalizationLocaleResponse(rsp)
}

// DeleteAdminRealmsRealmLocalizationLocaleKeyWithResponse request returning *DeleteAdminRealmsRealmLocalizationLocaleKeyResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmLocalizationLocaleKeyWithResponse(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmLocalizationLocaleKeyResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmLocalizationLocaleKey(ctx, realm, locale, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmLocalizationLocaleKeyResponse(rsp)
}

// GetAdminRealmsRealmLocalizationLocaleKeyWithResponse request returning *GetAdminRealmsRealmLocalizationLocaleKeyResponse
func (c *ClientWithResponses) GetAdminRealmsRealmLocalizationLocaleKeyWithResponse(ctx context.Context, realm string, locale string, key string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmLocalizationLocaleKeyResponse, error) {
	rsp, err := c.GetAdminRealmsRealmLocalizationLocaleKey(ctx, realm, locale, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmLocalizationLocaleKeyResponse(rsp)
}

// PutAdminRealmsRealmLocalizationLocaleKeyWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmLocalizationLocaleKeyResponse
func (c *ClientWithResponses) PutAdminRealmsRealmLocalizationLocaleKeyWithBodyWithResponse(ctx context.Context, realm string, locale string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmLocalizationLocaleKeyResponse, error) {
	rsp, err := c.PutAdminRealmsRealmLocalizationLocaleKeyWithBody(ctx, realm, locale, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmLocalizationLocaleKeyResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmLocalizationLocaleKeyWithTextBodyWithResponse(ctx context.Context, realm string, locale string, key string, body PutAdminRealmsRealmLocalizationLocaleKeyTextRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmLocalizationLocaleKeyResponse, error) {
	rsp, err := c.PutAdminRealmsRealmLocalizationLocaleKeyWithTextBody(ctx, realm, locale, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmLocalizationLocaleKeyResponse(rsp)
}

// PostAdminRealmsRealmLogoutAllWithResponse request returning *PostAdminRealmsRealmLogoutAllResponse
func (c *ClientWithResponses) PostAdminRealmsRealmLogoutAllWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmLogoutAllResponse, error) {
	rsp, err := c.PostAdminRealmsRealmLogoutAll(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmLogoutAllResponse(rsp)
}

// GetAdminRealmsRealmOrganizationsWithResponse request returning *GetAdminRealmsRealmOrganizationsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmOrganizationsWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmOrganizationsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmOrganizations(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmOrganizationsResponse(rsp)
}

// PostAdminRealmsRealmOrganizationsWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmOrganizationsResponse
func (c *ClientWithResponses) PostAdminRealmsRealmOrganizationsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmOrganizationsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmOrganizationsWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsResponse, error) {
	rsp, err := c.PostAdminRealmsRealmOrganizations(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmOrganizationsResponse(rsp)
}

// GetAdminRealmsRealmOrganizationsMembersIdOrganizationsWithResponse request returning *GetAdminRealmsRealmOrganizationsMembersIdOrganizationsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmOrganizationsMembersIdOrganizationsWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsMembersIdOrganizationsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmOrganizationsMembersIdOrganizations(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmOrganizationsMembersIdOrganizationsResponse(rsp)
}

// DeleteAdminRealmsRealmOrganizationsIdWithResponse request returning *DeleteAdminRealmsRealmOrganizationsIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmOrganizationsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmOrganizationsIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmOrganizationsId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmOrganizationsIdResponse(rsp)
}

// GetAdminRealmsRealmOrganizationsIdWithResponse request returning *GetAdminRealmsRealmOrganizationsIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmOrganizationsIdWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmOrganizationsId(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmOrganizationsIdResponse(rsp)
}

// PutAdminRealmsRealmOrganizationsIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmOrganizationsIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmOrganizationsIdWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmOrganizationsIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmOrganizationsIdWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmOrganizationsIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmOrganizationsIdWithResponse(ctx context.Context, realm string, id string, body PutAdminRealmsRealmOrganizationsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmOrganizationsIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmOrganizationsId(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmOrganizationsIdResponse(rsp)
}

// GetAdminRealmsRealmOrganizationsIdIdentityProvidersWithResponse request returning *GetAdminRealmsRealmOrganizationsIdIdentityProvidersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmOrganizationsIdIdentityProvidersWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsIdIdentityProvidersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmOrganizationsIdIdentityProviders(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmOrganizationsIdIdentityProvidersResponse(rsp)
}

// PostAdminRealmsRealmOrganizationsIdIdentityProvidersWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmOrganizationsIdIdentityProvidersResponse
func (c *ClientWithResponses) PostAdminRealmsRealmOrganizationsIdIdentityProvidersWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdIdentityProvidersResponse, error) {
	rsp, err := c.PostAdminRealmsRealmOrganizationsIdIdentityProvidersWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmOrganizationsIdIdentityProvidersResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmOrganizationsIdIdentityProvidersWithResponse(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdIdentityProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdIdentityProvidersResponse, error) {
	rsp, err := c.PostAdminRealmsRealmOrganizationsIdIdentityProviders(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmOrganizationsIdIdentityProvidersResponse(rsp)
}

// DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasWithResponse request returning *DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasWithResponse(ctx context.Context, realm string, id string, alias string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAlias(ctx, realm, id, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse(rsp)
}

// GetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasWithResponse request returning *GetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse
func (c *ClientWithResponses) GetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasWithResponse(ctx context.Context, realm string, id string, alias string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse, error) {
	rsp, err := c.GetAdminRealmsRealmOrganizationsIdIdentityProvidersAlias(ctx, realm, id, alias, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse(rsp)
}

// GetAdminRealmsRealmOrganizationsIdMembersWithResponse request returning *GetAdminRealmsRealmOrganizationsIdMembersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmOrganizationsIdMembersWithResponse(ctx context.Context, realm string, id string, params *GetAdminRealmsRealmOrganizationsIdMembersParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsIdMembersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmOrganizationsIdMembers(ctx, realm, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmOrganizationsIdMembersResponse(rsp)
}

// PostAdminRealmsRealmOrganizationsIdMembersWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmOrganizationsIdMembersResponse
func (c *ClientWithResponses) PostAdminRealmsRealmOrganizationsIdMembersWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdMembersResponse, error) {
	rsp, err := c.PostAdminRealmsRealmOrganizationsIdMembersWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmOrganizationsIdMembersResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmOrganizationsIdMembersWithResponse(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdMembersResponse, error) {
	rsp, err := c.PostAdminRealmsRealmOrganizationsIdMembers(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmOrganizationsIdMembersResponse(rsp)
}

// GetAdminRealmsRealmOrganizationsIdMembersCountWithResponse request returning *GetAdminRealmsRealmOrganizationsIdMembersCountResponse
func (c *ClientWithResponses) GetAdminRealmsRealmOrganizationsIdMembersCountWithResponse(ctx context.Context, realm string, id string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsIdMembersCountResponse, error) {
	rsp, err := c.GetAdminRealmsRealmOrganizationsIdMembersCount(ctx, realm, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmOrganizationsIdMembersCountResponse(rsp)
}

// PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserResponse
func (c *ClientWithResponses) PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserResponse, error) {
	rsp, err := c.PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserWithFormdataBodyWithResponse(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserResponse, error) {
	rsp, err := c.PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserWithFormdataBody(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserResponse(rsp)
}

// PostAdminRealmsRealmOrganizationsIdMembersInviteUserWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmOrganizationsIdMembersInviteUserResponse
func (c *ClientWithResponses) PostAdminRealmsRealmOrganizationsIdMembersInviteUserWithBodyWithResponse(ctx context.Context, realm string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdMembersInviteUserResponse, error) {
	rsp, err := c.PostAdminRealmsRealmOrganizationsIdMembersInviteUserWithBody(ctx, realm, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmOrganizationsIdMembersInviteUserResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmOrganizationsIdMembersInviteUserWithFormdataBodyWithResponse(ctx context.Context, realm string, id string, body PostAdminRealmsRealmOrganizationsIdMembersInviteUserFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmOrganizationsIdMembersInviteUserResponse, error) {
	rsp, err := c.PostAdminRealmsRealmOrganizationsIdMembersInviteUserWithFormdataBody(ctx, realm, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmOrganizationsIdMembersInviteUserResponse(rsp)
}

// DeleteAdminRealmsRealmOrganizationsIdMembersMemberIdWithResponse request returning *DeleteAdminRealmsRealmOrganizationsIdMembersMemberIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmOrganizationsIdMembersMemberIdWithResponse(ctx context.Context, realm string, id string, memberId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmOrganizationsIdMembersMemberIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmOrganizationsIdMembersMemberId(ctx, realm, id, memberId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmOrganizationsIdMembersMemberIdResponse(rsp)
}

// GetAdminRealmsRealmOrganizationsIdMembersMemberIdWithResponse request returning *GetAdminRealmsRealmOrganizationsIdMembersMemberIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmOrganizationsIdMembersMemberIdWithResponse(ctx context.Context, realm string, id string, memberId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsIdMembersMemberIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmOrganizationsIdMembersMemberId(ctx, realm, id, memberId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmOrganizationsIdMembersMemberIdResponse(rsp)
}

// GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsWithResponse request returning *GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsWithResponse(ctx context.Context, realm string, id string, memberId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizations(ctx, realm, id, memberId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsResponse(rsp)
}

// PostAdminRealmsRealmPartialExportWithResponse request returning *PostAdminRealmsRealmPartialExportResponse
func (c *ClientWithResponses) PostAdminRealmsRealmPartialExportWithResponse(ctx context.Context, realm string, params *PostAdminRealmsRealmPartialExportParams, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmPartialExportResponse, error) {
	rsp, err := c.PostAdminRealmsRealmPartialExport(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmPartialExportResponse(rsp)
}

// PostAdminRealmsRealmPartialImportWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmPartialImportResponse
func (c *ClientWithResponses) PostAdminRealmsRealmPartialImportWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmPartialImportResponse, error) {
	rsp, err := c.PostAdminRealmsRealmPartialImportWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmPartialImportResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmPartialImportWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmPartialImportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmPartialImportResponse, error) {
	rsp, err := c.PostAdminRealmsRealmPartialImport(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmPartialImportResponse(rsp)
}

// PostAdminRealmsRealmPushRevocationWithResponse request returning *PostAdminRealmsRealmPushRevocationResponse
func (c *ClientWithResponses) PostAdminRealmsRealmPushRevocationWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmPushRevocationResponse, error) {
	rsp, err := c.PostAdminRealmsRealmPushRevocation(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmPushRevocationResponse(rsp)
}

// GetAdminRealmsRealmRolesWithResponse request returning *GetAdminRealmsRealmRolesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmRolesWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmRolesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmRoles(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmRolesResponse(rsp)
}

// PostAdminRealmsRealmRolesWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmRolesResponse
func (c *ClientWithResponses) PostAdminRealmsRealmRolesWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmRolesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmRolesWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmRolesResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmRolesWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmRolesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmRoles(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmRolesResponse(rsp)
}

// DeleteAdminRealmsRealmRolesByIdRoleIdWithResponse request returning *DeleteAdminRealmsRealmRolesByIdRoleIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmRolesByIdRoleIdWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmRolesByIdRoleIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmRolesByIdRoleId(ctx, realm, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmRolesByIdRoleIdResponse(rsp)
}

// GetAdminRealmsRealmRolesByIdRoleIdWithResponse request returning *GetAdminRealmsRealmRolesByIdRoleIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmRolesByIdRoleIdWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesByIdRoleIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmRolesByIdRoleId(ctx, realm, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmRolesByIdRoleIdResponse(rsp)
}

// PutAdminRealmsRealmRolesByIdRoleIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmRolesByIdRoleIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmRolesByIdRoleIdWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesByIdRoleIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmRolesByIdRoleIdWithBody(ctx, realm, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmRolesByIdRoleIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmRolesByIdRoleIdWithResponse(ctx context.Context, realm string, roleId string, body PutAdminRealmsRealmRolesByIdRoleIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesByIdRoleIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmRolesByIdRoleId(ctx, realm, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmRolesByIdRoleIdResponse(rsp)
}

// DeleteAdminRealmsRealmRolesByIdRoleIdCompositesWithBodyWithResponse request with arbitrary body returning *DeleteAdminRealmsRealmRolesByIdRoleIdCompositesResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmRolesByIdRoleIdCompositesWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmRolesByIdRoleIdCompositesResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmRolesByIdRoleIdCompositesWithBody(ctx, realm, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmRolesByIdRoleIdCompositesResponse(rsp)
}

func (c *ClientWithResponses) DeleteAdminRealmsRealmRolesByIdRoleIdCompositesWithResponse(ctx context.Context, realm string, roleId string, body DeleteAdminRealmsRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmRolesByIdRoleIdCompositesResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmRolesByIdRoleIdComposites(ctx, realm, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmRolesByIdRoleIdCompositesResponse(rsp)
}

// GetAdminRealmsRealmRolesByIdRoleIdCompositesWithResponse request returning *GetAdminRealmsRealmRolesByIdRoleIdCompositesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmRolesByIdRoleIdCompositesWithResponse(ctx context.Context, realm string, roleId string, params *GetAdminRealmsRealmRolesByIdRoleIdCompositesParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesByIdRoleIdCompositesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmRolesByIdRoleIdComposites(ctx, realm, roleId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmRolesByIdRoleIdCompositesResponse(rsp)
}

// PostAdminRealmsRealmRolesByIdRoleIdCompositesWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmRolesByIdRoleIdCompositesResponse
func (c *ClientWithResponses) PostAdminRealmsRealmRolesByIdRoleIdCompositesWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmRolesByIdRoleIdCompositesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmRolesByIdRoleIdCompositesWithBody(ctx, realm, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmRolesByIdRoleIdCompositesResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmRolesByIdRoleIdCompositesWithResponse(ctx context.Context, realm string, roleId string, body PostAdminRealmsRealmRolesByIdRoleIdCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmRolesByIdRoleIdCompositesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmRolesByIdRoleIdComposites(ctx, realm, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmRolesByIdRoleIdCompositesResponse(rsp)
}

// GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidWithResponse request returning *GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidResponse
func (c *ClientWithResponses) GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidWithResponse(ctx context.Context, realm string, roleId string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidResponse, error) {
	rsp, err := c.GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuid(ctx, realm, roleId, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidResponse(rsp)
}

// GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmWithResponse request returning *GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmResponse
func (c *ClientWithResponses) GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmResponse, error) {
	rsp, err := c.GetAdminRealmsRealmRolesByIdRoleIdCompositesRealm(ctx, realm, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmRolesByIdRoleIdCompositesRealmResponse(rsp)
}

// GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithResponse request returning *GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithResponse(ctx context.Context, realm string, roleId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmRolesByIdRoleIdManagementPermissions(ctx, realm, roleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse(rsp)
}

// PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse
func (c *ClientWithResponses) PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, roleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithBody(ctx, realm, roleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithResponse(ctx context.Context, realm string, roleId string, body PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmRolesByIdRoleIdManagementPermissions(ctx, realm, roleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse(rsp)
}

// DeleteAdminRealmsRealmRolesRoleNameWithResponse request returning *DeleteAdminRealmsRealmRolesRoleNameResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmRolesRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmRolesRoleNameResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmRolesRoleName(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmRolesRoleNameResponse(rsp)
}

// GetAdminRealmsRealmRolesRoleNameWithResponse request returning *GetAdminRealmsRealmRolesRoleNameResponse
func (c *ClientWithResponses) GetAdminRealmsRealmRolesRoleNameWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesRoleNameResponse, error) {
	rsp, err := c.GetAdminRealmsRealmRolesRoleName(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmRolesRoleNameResponse(rsp)
}

// PutAdminRealmsRealmRolesRoleNameWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmRolesRoleNameResponse
func (c *ClientWithResponses) PutAdminRealmsRealmRolesRoleNameWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesRoleNameResponse, error) {
	rsp, err := c.PutAdminRealmsRealmRolesRoleNameWithBody(ctx, realm, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmRolesRoleNameResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmRolesRoleNameWithResponse(ctx context.Context, realm string, roleName string, body PutAdminRealmsRealmRolesRoleNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesRoleNameResponse, error) {
	rsp, err := c.PutAdminRealmsRealmRolesRoleName(ctx, realm, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmRolesRoleNameResponse(rsp)
}

// DeleteAdminRealmsRealmRolesRoleNameCompositesWithBodyWithResponse request with arbitrary body returning *DeleteAdminRealmsRealmRolesRoleNameCompositesResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmRolesRoleNameCompositesResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmRolesRoleNameCompositesWithBody(ctx, realm, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmRolesRoleNameCompositesResponse(rsp)
}

func (c *ClientWithResponses) DeleteAdminRealmsRealmRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, roleName string, body DeleteAdminRealmsRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmRolesRoleNameCompositesResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmRolesRoleNameComposites(ctx, realm, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmRolesRoleNameCompositesResponse(rsp)
}

// GetAdminRealmsRealmRolesRoleNameCompositesWithResponse request returning *GetAdminRealmsRealmRolesRoleNameCompositesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesRoleNameCompositesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmRolesRoleNameComposites(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmRolesRoleNameCompositesResponse(rsp)
}

// PostAdminRealmsRealmRolesRoleNameCompositesWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmRolesRoleNameCompositesResponse
func (c *ClientWithResponses) PostAdminRealmsRealmRolesRoleNameCompositesWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmRolesRoleNameCompositesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmRolesRoleNameCompositesWithBody(ctx, realm, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmRolesRoleNameCompositesResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmRolesRoleNameCompositesWithResponse(ctx context.Context, realm string, roleName string, body PostAdminRealmsRealmRolesRoleNameCompositesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmRolesRoleNameCompositesResponse, error) {
	rsp, err := c.PostAdminRealmsRealmRolesRoleNameComposites(ctx, realm, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmRolesRoleNameCompositesResponse(rsp)
}

// GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidWithResponse request returning *GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidResponse
func (c *ClientWithResponses) GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidWithResponse(ctx context.Context, realm string, roleName string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidResponse, error) {
	rsp, err := c.GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuid(ctx, realm, roleName, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidResponse(rsp)
}

// GetAdminRealmsRealmRolesRoleNameCompositesRealmWithResponse request returning *GetAdminRealmsRealmRolesRoleNameCompositesRealmResponse
func (c *ClientWithResponses) GetAdminRealmsRealmRolesRoleNameCompositesRealmWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesRoleNameCompositesRealmResponse, error) {
	rsp, err := c.GetAdminRealmsRealmRolesRoleNameCompositesRealm(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmRolesRoleNameCompositesRealmResponse(rsp)
}

// GetAdminRealmsRealmRolesRoleNameGroupsWithResponse request returning *GetAdminRealmsRealmRolesRoleNameGroupsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmRolesRoleNameGroupsWithResponse(ctx context.Context, realm string, roleName string, params *GetAdminRealmsRealmRolesRoleNameGroupsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesRoleNameGroupsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmRolesRoleNameGroups(ctx, realm, roleName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmRolesRoleNameGroupsResponse(rsp)
}

// GetAdminRealmsRealmRolesRoleNameManagementPermissionsWithResponse request returning *GetAdminRealmsRealmRolesRoleNameManagementPermissionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, roleName string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesRoleNameManagementPermissionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmRolesRoleNameManagementPermissions(ctx, realm, roleName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmRolesRoleNameManagementPermissionsResponse(rsp)
}

// PutAdminRealmsRealmRolesRoleNameManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmRolesRoleNameManagementPermissionsResponse
func (c *ClientWithResponses) PutAdminRealmsRealmRolesRoleNameManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, roleName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesRoleNameManagementPermissionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmRolesRoleNameManagementPermissionsWithBody(ctx, realm, roleName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmRolesRoleNameManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmRolesRoleNameManagementPermissionsWithResponse(ctx context.Context, realm string, roleName string, body PutAdminRealmsRealmRolesRoleNameManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmRolesRoleNameManagementPermissionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmRolesRoleNameManagementPermissions(ctx, realm, roleName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmRolesRoleNameManagementPermissionsResponse(rsp)
}

// GetAdminRealmsRealmRolesRoleNameUsersWithResponse request returning *GetAdminRealmsRealmRolesRoleNameUsersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmRolesRoleNameUsersWithResponse(ctx context.Context, realm string, roleName string, params *GetAdminRealmsRealmRolesRoleNameUsersParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmRolesRoleNameUsersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmRolesRoleNameUsers(ctx, realm, roleName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmRolesRoleNameUsersResponse(rsp)
}

// DeleteAdminRealmsRealmSessionsSessionWithResponse request returning *DeleteAdminRealmsRealmSessionsSessionResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmSessionsSessionWithResponse(ctx context.Context, realm string, session string, params *DeleteAdminRealmsRealmSessionsSessionParams, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmSessionsSessionResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmSessionsSession(ctx, realm, session, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmSessionsSessionResponse(rsp)
}

// PostAdminRealmsRealmTestSMTPConnectionWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmTestSMTPConnectionResponse
func (c *ClientWithResponses) PostAdminRealmsRealmTestSMTPConnectionWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmTestSMTPConnectionResponse, error) {
	rsp, err := c.PostAdminRealmsRealmTestSMTPConnectionWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmTestSMTPConnectionResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmTestSMTPConnectionWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmTestSMTPConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmTestSMTPConnectionResponse, error) {
	rsp, err := c.PostAdminRealmsRealmTestSMTPConnection(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmTestSMTPConnectionResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmTestSMTPConnectionWithFormdataBodyWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmTestSMTPConnectionFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmTestSMTPConnectionResponse, error) {
	rsp, err := c.PostAdminRealmsRealmTestSMTPConnectionWithFormdataBody(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmTestSMTPConnectionResponse(rsp)
}

// GetAdminRealmsRealmUsersWithResponse request returning *GetAdminRealmsRealmUsersResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsers(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersResponse(rsp)
}

// PostAdminRealmsRealmUsersWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmUsersResponse
func (c *ClientWithResponses) PostAdminRealmsRealmUsersWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmUsersWithResponse(ctx context.Context, realm string, body PostAdminRealmsRealmUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsers(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersResponse(rsp)
}

// GetAdminRealmsRealmUsersManagementPermissionsWithResponse request returning *GetAdminRealmsRealmUsersManagementPermissionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersManagementPermissionsWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersManagementPermissionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersManagementPermissions(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersManagementPermissionsResponse(rsp)
}

// PutAdminRealmsRealmUsersManagementPermissionsWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmUsersManagementPermissionsResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersManagementPermissionsWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersManagementPermissionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersManagementPermissionsWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersManagementPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmUsersManagementPermissionsWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmUsersManagementPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersManagementPermissionsResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersManagementPermissions(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersManagementPermissionsResponse(rsp)
}

// GetAdminRealmsRealmUsersCountWithResponse request returning *GetAdminRealmsRealmUsersCountResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersCountWithResponse(ctx context.Context, realm string, params *GetAdminRealmsRealmUsersCountParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersCountResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersCount(ctx, realm, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersCountResponse(rsp)
}

// GetAdminRealmsRealmUsersProfileWithResponse request returning *GetAdminRealmsRealmUsersProfileResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersProfileWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersProfileResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersProfile(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersProfileResponse(rsp)
}

// PutAdminRealmsRealmUsersProfileWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmUsersProfileResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersProfileWithBodyWithResponse(ctx context.Context, realm string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersProfileResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersProfileWithBody(ctx, realm, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersProfileResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmUsersProfileWithResponse(ctx context.Context, realm string, body PutAdminRealmsRealmUsersProfileJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersProfileResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersProfile(ctx, realm, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersProfileResponse(rsp)
}

// GetAdminRealmsRealmUsersProfileMetadataWithResponse request returning *GetAdminRealmsRealmUsersProfileMetadataResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersProfileMetadataWithResponse(ctx context.Context, realm string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersProfileMetadataResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersProfileMetadata(ctx, realm, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersProfileMetadataResponse(rsp)
}

// DeleteAdminRealmsRealmUsersUserIdWithResponse request returning *DeleteAdminRealmsRealmUsersUserIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmUsersUserIdWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmUsersUserId(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmUsersUserIdResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdWithResponse request returning *GetAdminRealmsRealmUsersUserIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdWithResponse(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserId(ctx, realm, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmUsersUserIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdWithBody(ctx, realm, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdWithResponse(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserId(ctx, realm, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesWithResponse request returning *GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypes(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdConsentsWithResponse request returning *GetAdminRealmsRealmUsersUserIdConsentsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdConsentsWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdConsentsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdConsents(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdConsentsResponse(rsp)
}

// DeleteAdminRealmsRealmUsersUserIdConsentsClientWithResponse request returning *DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmUsersUserIdConsentsClientWithResponse(ctx context.Context, realm string, userId string, client string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmUsersUserIdConsentsClient(ctx, realm, userId, client, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmUsersUserIdConsentsClientResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdCredentialsWithResponse request returning *GetAdminRealmsRealmUsersUserIdCredentialsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdCredentialsWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdCredentialsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdCredentials(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdCredentialsResponse(rsp)
}

// DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdWithResponse request returning *DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdWithResponse(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialId(ctx, realm, userId, credentialId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse(rsp)
}

// PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse request returning *PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse
func (c *ClientWithResponses) PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse(ctx context.Context, realm string, userId string, credentialId string, newPreviousCredentialId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialId(ctx, realm, userId, credentialId, newPreviousCredentialId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse(rsp)
}

// PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstWithResponse request returning *PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse
func (c *ClientWithResponses) PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstWithResponse(ctx context.Context, realm string, userId string, credentialId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirst(ctx, realm, userId, credentialId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBodyWithResponse(ctx context.Context, realm string, userId string, credentialId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithBody(ctx, realm, userId, credentialId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithTextBodyWithResponse(ctx context.Context, realm string, userId string, credentialId string, body PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelTextRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithTextBody(ctx, realm, userId, credentialId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithBody(ctx, realm, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithResponse(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdDisableCredentialTypesJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdDisableCredentialTypes(ctx, realm, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBodyWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithBody(ctx, realm, userId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdExecuteActionsEmailParams, body PutAdminRealmsRealmUsersUserIdExecuteActionsEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdExecuteActionsEmail(ctx, realm, userId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdFederatedIdentityWithResponse request returning *GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdFederatedIdentityWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdFederatedIdentity(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdFederatedIdentityResponse(rsp)
}

// DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse request returning *DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProvider(ctx, realm, userId, provider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse(rsp)
}

// PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse request returning *PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse
func (c *ClientWithResponses) PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse(ctx context.Context, realm string, userId string, provider string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersUserIdFederatedIdentityProvider(ctx, realm, userId, provider, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdGroupsWithResponse request returning *GetAdminRealmsRealmUsersUserIdGroupsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdGroupsWithResponse(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdGroupsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdGroups(ctx, realm, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdGroupsResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdGroupsCountWithResponse request returning *GetAdminRealmsRealmUsersUserIdGroupsCountResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdGroupsCountWithResponse(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdGroupsCountParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdGroupsCountResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdGroupsCount(ctx, realm, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdGroupsCountResponse(rsp)
}

// DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse request returning *DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmUsersUserIdGroupsGroupId(ctx, realm, userId, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse request returning *PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse(ctx context.Context, realm string, userId string, groupId string, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdGroupsGroupId(ctx, realm, userId, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse(rsp)
}

// PostAdminRealmsRealmUsersUserIdImpersonationWithResponse request returning *PostAdminRealmsRealmUsersUserIdImpersonationResponse
func (c *ClientWithResponses) PostAdminRealmsRealmUsersUserIdImpersonationWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdImpersonationResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersUserIdImpersonation(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersUserIdImpersonationResponse(rsp)
}

// PostAdminRealmsRealmUsersUserIdLogoutWithResponse request returning *PostAdminRealmsRealmUsersUserIdLogoutResponse
func (c *ClientWithResponses) PostAdminRealmsRealmUsersUserIdLogoutWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdLogoutResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersUserIdLogout(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersUserIdLogoutResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidWithResponse request returning *GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidWithResponse(ctx context.Context, realm string, userId string, clientUuid string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuid(ctx, realm, userId, clientUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdResetPasswordWithBodyWithResponse request with arbitrary body returning *PutAdminRealmsRealmUsersUserIdResetPasswordResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdResetPasswordWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResetPasswordResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdResetPasswordWithBody(ctx, realm, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdResetPasswordWithResponse(ctx context.Context, realm string, userId string, body PutAdminRealmsRealmUsersUserIdResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResetPasswordResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdResetPassword(ctx, realm, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdResetPasswordResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdResetPasswordEmailWithResponse request returning *PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdResetPasswordEmailWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdResetPasswordEmailParams, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdResetPasswordEmail(ctx, realm, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdRoleMappingsWithResponse request returning *GetAdminRealmsRealmUsersUserIdRoleMappingsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdRoleMappingsWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdRoleMappingsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdRoleMappings(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdRoleMappingsResponse(rsp)
}

// DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBodyWithResponse request with arbitrary body returning *DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBodyWithResponse(ctx context.Context, realm string, userId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBody(ctx, realm, userId, clientId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse(rsp)
}

func (c *ClientWithResponses) DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithResponse(ctx context.Context, realm string, userId string, clientId string, body DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId(ctx, realm, userId, clientId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithResponse request returning *GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithResponse(ctx context.Context, realm string, userId string, clientId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId(ctx, realm, userId, clientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse(rsp)
}

// PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse
func (c *ClientWithResponses) PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBodyWithResponse(ctx context.Context, realm string, userId string, clientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithBody(ctx, realm, userId, clientId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithResponse(ctx context.Context, realm string, userId string, clientId string, body PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientId(ctx, realm, userId, clientId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableWithResponse request returning *GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableWithResponse(ctx context.Context, realm string, userId string, clientId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailable(ctx, realm, userId, clientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeWithResponse request returning *GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeWithResponse(ctx context.Context, realm string, userId string, clientId string, params *GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdComposite(ctx, realm, userId, clientId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeResponse(rsp)
}

// DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBodyWithResponse request with arbitrary body returning *DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse
func (c *ClientWithResponses) DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBody(ctx, realm, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, userId string, body DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse, error) {
	rsp, err := c.DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealm(ctx, realm, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdRoleMappingsRealmWithResponse request returning *GetAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdRoleMappingsRealm(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse(rsp)
}

// PostAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBodyWithResponse request with arbitrary body returning *PostAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse
func (c *ClientWithResponses) PostAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBodyWithResponse(ctx context.Context, realm string, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersUserIdRoleMappingsRealmWithBody(ctx, realm, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse(rsp)
}

func (c *ClientWithResponses) PostAdminRealmsRealmUsersUserIdRoleMappingsRealmWithResponse(ctx context.Context, realm string, userId string, body PostAdminRealmsRealmUsersUserIdRoleMappingsRealmJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse, error) {
	rsp, err := c.PostAdminRealmsRealmUsersUserIdRoleMappingsRealm(ctx, realm, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableWithResponse request returning *GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailable(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeWithResponse request returning *GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeWithResponse(ctx context.Context, realm string, userId string, params *GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeParams, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdRoleMappingsRealmComposite(ctx, realm, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeResponse(rsp)
}

// PutAdminRealmsRealmUsersUserIdSendVerifyEmailWithResponse request returning *PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse
func (c *ClientWithResponses) PutAdminRealmsRealmUsersUserIdSendVerifyEmailWithResponse(ctx context.Context, realm string, userId string, params *PutAdminRealmsRealmUsersUserIdSendVerifyEmailParams, reqEditors ...RequestEditorFn) (*PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse, error) {
	rsp, err := c.PutAdminRealmsRealmUsersUserIdSendVerifyEmail(ctx, realm, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdSessionsWithResponse request returning *GetAdminRealmsRealmUsersUserIdSessionsResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdSessionsWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdSessionsResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdSessions(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdSessionsResponse(rsp)
}

// GetAdminRealmsRealmUsersUserIdUnmanagedAttributesWithResponse request returning *GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse
func (c *ClientWithResponses) GetAdminRealmsRealmUsersUserIdUnmanagedAttributesWithResponse(ctx context.Context, realm string, userId string, reqEditors ...RequestEditorFn) (*GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse, error) {
	rsp, err := c.GetAdminRealmsRealmUsersUserIdUnmanagedAttributes(ctx, realm, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse(rsp)
}

// ParseGetAdminRealmsResponse parses an HTTP response from a GetAdminRealmsWithResponse call
func ParseGetAdminRealmsResponse(rsp *http.Response) (*GetAdminRealmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RealmRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsResponse parses an HTTP response from a PostAdminRealmsWithResponse call
func ParsePostAdminRealmsResponse(rsp *http.Response) (*PostAdminRealmsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmResponse parses an HTTP response from a DeleteAdminRealmsRealmWithResponse call
func ParseDeleteAdminRealmsRealmResponse(rsp *http.Response) (*DeleteAdminRealmsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmResponse parses an HTTP response from a GetAdminRealmsRealmWithResponse call
func ParseGetAdminRealmsRealmResponse(rsp *http.Response) (*GetAdminRealmsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RealmRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmResponse parses an HTTP response from a PutAdminRealmsRealmWithResponse call
func ParsePutAdminRealmsRealmResponse(rsp *http.Response) (*PutAdminRealmsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmAdminEventsResponse parses an HTTP response from a DeleteAdminRealmsRealmAdminEventsWithResponse call
func ParseDeleteAdminRealmsRealmAdminEventsResponse(rsp *http.Response) (*DeleteAdminRealmsRealmAdminEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmAdminEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAdminEventsResponse parses an HTTP response from a GetAdminRealmsRealmAdminEventsWithResponse call
func ParseGetAdminRealmsRealmAdminEventsResponse(rsp *http.Response) (*GetAdminRealmsRealmAdminEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAdminEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AdminEventRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmAttackDetectionBruteForceUsersResponse parses an HTTP response from a DeleteAdminRealmsRealmAttackDetectionBruteForceUsersWithResponse call
func ParseDeleteAdminRealmsRealmAttackDetectionBruteForceUsersResponse(rsp *http.Response) (*DeleteAdminRealmsRealmAttackDetectionBruteForceUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmAttackDetectionBruteForceUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse parses an HTTP response from a DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdWithResponse call
func ParseDeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse parses an HTTP response from a GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdWithResponse call
func ParseGetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse(rsp *http.Response) (*GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAttackDetectionBruteForceUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationAuthenticatorProvidersResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationAuthenticatorProvidersWithResponse call
func ParseGetAdminRealmsRealmAuthenticationAuthenticatorProvidersResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationAuthenticatorProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationAuthenticatorProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersWithResponse call
func ParseGetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationClientAuthenticatorProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmAuthenticationConfigResponse parses an HTTP response from a PostAdminRealmsRealmAuthenticationConfigWithResponse call
func ParsePostAdminRealmsRealmAuthenticationConfigResponse(rsp *http.Response) (*PostAdminRealmsRealmAuthenticationConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmAuthenticationConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdWithResponse call
func ParseGetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationConfigDescriptionProviderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticatorConfigInfoRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmAuthenticationConfigIdResponse parses an HTTP response from a DeleteAdminRealmsRealmAuthenticationConfigIdWithResponse call
func ParseDeleteAdminRealmsRealmAuthenticationConfigIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmAuthenticationConfigIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmAuthenticationConfigIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationConfigIdResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationConfigIdWithResponse call
func ParseGetAdminRealmsRealmAuthenticationConfigIdResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationConfigIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationConfigIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticatorConfigRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmAuthenticationConfigIdResponse parses an HTTP response from a PutAdminRealmsRealmAuthenticationConfigIdWithResponse call
func ParsePutAdminRealmsRealmAuthenticationConfigIdResponse(rsp *http.Response) (*PutAdminRealmsRealmAuthenticationConfigIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmAuthenticationConfigIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmAuthenticationExecutionsResponse parses an HTTP response from a PostAdminRealmsRealmAuthenticationExecutionsWithResponse call
func ParsePostAdminRealmsRealmAuthenticationExecutionsResponse(rsp *http.Response) (*PostAdminRealmsRealmAuthenticationExecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmAuthenticationExecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse parses an HTTP response from a DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdWithResponse call
func ParseDeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationExecutionsExecutionIdWithResponse call
func ParseGetAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationExecutionsExecutionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationExecutionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResponse parses an HTTP response from a PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigWithResponse call
func ParsePostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResponse(rsp *http.Response) (*PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdWithResponse call
func ParseGetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationExecutionsExecutionIdConfigIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticatorConfigRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse parses an HTTP response from a PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityWithResponse call
func ParsePostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse(rsp *http.Response) (*PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmAuthenticationExecutionsExecutionIdLowerPriorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse parses an HTTP response from a PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityWithResponse call
func ParsePostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse(rsp *http.Response) (*PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmAuthenticationExecutionsExecutionIdRaisePriorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationFlowsResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationFlowsWithResponse call
func ParseGetAdminRealmsRealmAuthenticationFlowsResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthenticationFlowRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmAuthenticationFlowsResponse parses an HTTP response from a PostAdminRealmsRealmAuthenticationFlowsWithResponse call
func ParsePostAdminRealmsRealmAuthenticationFlowsResponse(rsp *http.Response) (*PostAdminRealmsRealmAuthenticationFlowsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmAuthenticationFlowsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResponse parses an HTTP response from a PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyWithResponse call
func ParsePostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResponse(rsp *http.Response) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmAuthenticationFlowsFlowAliasCopyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithResponse call
func ParseGetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthenticationExecutionInfoRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse parses an HTTP response from a PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsWithResponse call
func ParsePutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse(rsp *http.Response) (*PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse parses an HTTP response from a PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionWithResponse call
func ParsePostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse(rsp *http.Response) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsExecutionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse parses an HTTP response from a PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowWithResponse call
func ParsePostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse(rsp *http.Response) (*PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmAuthenticationFlowsFlowAliasExecutionsFlowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmAuthenticationFlowsIdResponse parses an HTTP response from a DeleteAdminRealmsRealmAuthenticationFlowsIdWithResponse call
func ParseDeleteAdminRealmsRealmAuthenticationFlowsIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmAuthenticationFlowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmAuthenticationFlowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationFlowsIdResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationFlowsIdWithResponse call
func ParseGetAdminRealmsRealmAuthenticationFlowsIdResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationFlowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationFlowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthenticationFlowRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmAuthenticationFlowsIdResponse parses an HTTP response from a PutAdminRealmsRealmAuthenticationFlowsIdWithResponse call
func ParsePutAdminRealmsRealmAuthenticationFlowsIdResponse(rsp *http.Response) (*PutAdminRealmsRealmAuthenticationFlowsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmAuthenticationFlowsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationFormActionProvidersResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationFormActionProvidersWithResponse call
func ParseGetAdminRealmsRealmAuthenticationFormActionProvidersResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationFormActionProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationFormActionProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationFormProvidersResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationFormProvidersWithResponse call
func ParseGetAdminRealmsRealmAuthenticationFormProvidersResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationFormProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationFormProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationPerClientConfigDescriptionResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionWithResponse call
func ParseGetAdminRealmsRealmAuthenticationPerClientConfigDescriptionResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationPerClientConfigDescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string][]ConfigPropertyRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmAuthenticationRegisterRequiredActionResponse parses an HTTP response from a PostAdminRealmsRealmAuthenticationRegisterRequiredActionWithResponse call
func ParsePostAdminRealmsRealmAuthenticationRegisterRequiredActionResponse(rsp *http.Response) (*PostAdminRealmsRealmAuthenticationRegisterRequiredActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmAuthenticationRegisterRequiredActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationRequiredActionsResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationRequiredActionsWithResponse call
func ParseGetAdminRealmsRealmAuthenticationRequiredActionsResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationRequiredActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationRequiredActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RequiredActionProviderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmAuthenticationRequiredActionsAliasResponse parses an HTTP response from a DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasWithResponse call
func ParseDeleteAdminRealmsRealmAuthenticationRequiredActionsAliasResponse(rsp *http.Response) (*DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationRequiredActionsAliasResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationRequiredActionsAliasWithResponse call
func ParseGetAdminRealmsRealmAuthenticationRequiredActionsAliasResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationRequiredActionsAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationRequiredActionsAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequiredActionProviderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmAuthenticationRequiredActionsAliasResponse parses an HTTP response from a PutAdminRealmsRealmAuthenticationRequiredActionsAliasWithResponse call
func ParsePutAdminRealmsRealmAuthenticationRequiredActionsAliasResponse(rsp *http.Response) (*PutAdminRealmsRealmAuthenticationRequiredActionsAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmAuthenticationRequiredActionsAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse parses an HTTP response from a DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithResponse call
func ParseDeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse(rsp *http.Response) (*DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithResponse call
func ParseGetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequiredActionConfigRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse parses an HTTP response from a PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigWithResponse call
func ParsePutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse(rsp *http.Response) (*PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmAuthenticationRequiredActionsAliasConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionWithResponse call
func ParseGetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationRequiredActionsAliasConfigDescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RequiredActionConfigInfoRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityResponse parses an HTTP response from a PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityWithResponse call
func ParsePostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityResponse(rsp *http.Response) (*PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmAuthenticationRequiredActionsAliasLowerPriorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityResponse parses an HTTP response from a PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityWithResponse call
func ParsePostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityResponse(rsp *http.Response) (*PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmAuthenticationRequiredActionsAliasRaisePriorityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsResponse parses an HTTP response from a GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsWithResponse call
func ParseGetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsResponse(rsp *http.Response) (*GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmAuthenticationUnregisteredRequiredActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientDescriptionConverterResponse parses an HTTP response from a PostAdminRealmsRealmClientDescriptionConverterWithResponse call
func ParsePostAdminRealmsRealmClientDescriptionConverterResponse(rsp *http.Response) (*PostAdminRealmsRealmClientDescriptionConverterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientDescriptionConverterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientPoliciesPoliciesResponse parses an HTTP response from a GetAdminRealmsRealmClientPoliciesPoliciesWithResponse call
func ParseGetAdminRealmsRealmClientPoliciesPoliciesResponse(rsp *http.Response) (*GetAdminRealmsRealmClientPoliciesPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientPoliciesPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientPoliciesRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientPoliciesPoliciesResponse parses an HTTP response from a PutAdminRealmsRealmClientPoliciesPoliciesWithResponse call
func ParsePutAdminRealmsRealmClientPoliciesPoliciesResponse(rsp *http.Response) (*PutAdminRealmsRealmClientPoliciesPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientPoliciesPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientPoliciesProfilesResponse parses an HTTP response from a GetAdminRealmsRealmClientPoliciesProfilesWithResponse call
func ParseGetAdminRealmsRealmClientPoliciesProfilesResponse(rsp *http.Response) (*GetAdminRealmsRealmClientPoliciesProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientPoliciesProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientProfilesRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientPoliciesProfilesResponse parses an HTTP response from a PutAdminRealmsRealmClientPoliciesProfilesWithResponse call
func ParsePutAdminRealmsRealmClientPoliciesProfilesResponse(rsp *http.Response) (*PutAdminRealmsRealmClientPoliciesProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientPoliciesProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientRegistrationPolicyProvidersResponse parses an HTTP response from a GetAdminRealmsRealmClientRegistrationPolicyProvidersWithResponse call
func ParseGetAdminRealmsRealmClientRegistrationPolicyProvidersResponse(rsp *http.Response) (*GetAdminRealmsRealmClientRegistrationPolicyProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientRegistrationPolicyProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ComponentTypeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientScopesResponse parses an HTTP response from a GetAdminRealmsRealmClientScopesWithResponse call
func ParseGetAdminRealmsRealmClientScopesResponse(rsp *http.Response) (*GetAdminRealmsRealmClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientScopesResponse parses an HTTP response from a PostAdminRealmsRealmClientScopesWithResponse call
func ParsePostAdminRealmsRealmClientScopesResponse(rsp *http.Response) (*PostAdminRealmsRealmClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientScopesClientScopeIdResponse parses an HTTP response from a DeleteAdminRealmsRealmClientScopesClientScopeIdWithResponse call
func ParseDeleteAdminRealmsRealmClientScopesClientScopeIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientScopesClientScopeIdResponse parses an HTTP response from a GetAdminRealmsRealmClientScopesClientScopeIdWithResponse call
func ParseGetAdminRealmsRealmClientScopesClientScopeIdResponse(rsp *http.Response) (*GetAdminRealmsRealmClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientScopesClientScopeIdResponse parses an HTTP response from a PutAdminRealmsRealmClientScopesClientScopeIdWithResponse call
func ParsePutAdminRealmsRealmClientScopesClientScopeIdResponse(rsp *http.Response) (*PutAdminRealmsRealmClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResponse parses an HTTP response from a PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsWithResponse call
func ParsePostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResponse(rsp *http.Response) (*PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersAddModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse parses an HTTP response from a GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithResponse call
func ParseGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse parses an HTTP response from a PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsWithResponse call
func ParsePostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse(rsp *http.Response) (*PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse parses an HTTP response from a DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithResponse call
func ParseDeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse parses an HTTP response from a GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithResponse call
func ParseGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse(rsp *http.Response) (*GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse parses an HTTP response from a PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdWithResponse call
func ParsePutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse(rsp *http.Response) (*PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientScopesClientScopeIdProtocolMappersModelsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolResponse parses an HTTP response from a GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolWithResponse call
func ParseGetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolResponse(rsp *http.Response) (*GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientScopesClientScopeIdProtocolMappersProtocolProtocolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsResponse parses an HTTP response from a GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsWithResponse call
func ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MappingsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse parses an HTTP response from a DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithResponse call
func ParseDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse parses an HTTP response from a GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithResponse call
func ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse(rsp *http.Response) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse parses an HTTP response from a PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientWithResponse call
func ParsePostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse(rsp *http.Response) (*PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableResponse parses an HTTP response from a GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableWithResponse call
func ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableResponse(rsp *http.Response) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeResponse parses an HTTP response from a GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeWithResponse call
func ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeResponse(rsp *http.Response) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsClientsClientCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse parses an HTTP response from a DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithResponse call
func ParseDeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse parses an HTTP response from a GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithResponse call
func ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse(rsp *http.Response) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse parses an HTTP response from a PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmWithResponse call
func ParsePostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse(rsp *http.Response) (*PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableResponse parses an HTTP response from a GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableWithResponse call
func ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableResponse(rsp *http.Response) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeResponse parses an HTTP response from a GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeWithResponse call
func ParseGetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeResponse(rsp *http.Response) (*GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientScopesClientScopeIdScopeMappingsRealmCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientSessionStatsResponse parses an HTTP response from a GetAdminRealmsRealmClientSessionStatsWithResponse call
func ParseGetAdminRealmsRealmClientSessionStatsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientSessionStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientSessionStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientTemplatesResponse parses an HTTP response from a GetAdminRealmsRealmClientTemplatesWithResponse call
func ParseGetAdminRealmsRealmClientTemplatesResponse(rsp *http.Response) (*GetAdminRealmsRealmClientTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientTemplatesResponse parses an HTTP response from a PostAdminRealmsRealmClientTemplatesWithResponse call
func ParsePostAdminRealmsRealmClientTemplatesResponse(rsp *http.Response) (*PostAdminRealmsRealmClientTemplatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientTemplatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientTemplatesClientScopeIdResponse parses an HTTP response from a DeleteAdminRealmsRealmClientTemplatesClientScopeIdWithResponse call
func ParseDeleteAdminRealmsRealmClientTemplatesClientScopeIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientTemplatesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientTemplatesClientScopeIdResponse parses an HTTP response from a GetAdminRealmsRealmClientTemplatesClientScopeIdWithResponse call
func ParseGetAdminRealmsRealmClientTemplatesClientScopeIdResponse(rsp *http.Response) (*GetAdminRealmsRealmClientTemplatesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientTemplatesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientTemplatesClientScopeIdResponse parses an HTTP response from a PutAdminRealmsRealmClientTemplatesClientScopeIdWithResponse call
func ParsePutAdminRealmsRealmClientTemplatesClientScopeIdResponse(rsp *http.Response) (*PutAdminRealmsRealmClientTemplatesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientTemplatesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResponse parses an HTTP response from a PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsWithResponse call
func ParsePostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResponse(rsp *http.Response) (*PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersAddModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse parses an HTTP response from a GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithResponse call
func ParseGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse parses an HTTP response from a PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsWithResponse call
func ParsePostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse(rsp *http.Response) (*PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse parses an HTTP response from a DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithResponse call
func ParseDeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse parses an HTTP response from a GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithResponse call
func ParseGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse(rsp *http.Response) (*GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse parses an HTTP response from a PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdWithResponse call
func ParsePutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse(rsp *http.Response) (*PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersModelsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolResponse parses an HTTP response from a GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolWithResponse call
func ParseGetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolResponse(rsp *http.Response) (*GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientTemplatesClientScopeIdProtocolMappersProtocolProtocolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsResponse parses an HTTP response from a GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsWithResponse call
func ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MappingsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse parses an HTTP response from a DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithResponse call
func ParseDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse parses an HTTP response from a GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithResponse call
func ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse(rsp *http.Response) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse parses an HTTP response from a PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientWithResponse call
func ParsePostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse(rsp *http.Response) (*PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableResponse parses an HTTP response from a GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableWithResponse call
func ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableResponse(rsp *http.Response) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeResponse parses an HTTP response from a GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeWithResponse call
func ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeResponse(rsp *http.Response) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsClientsClientCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse parses an HTTP response from a DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithResponse call
func ParseDeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse parses an HTTP response from a GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithResponse call
func ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse(rsp *http.Response) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse parses an HTTP response from a PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmWithResponse call
func ParsePostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse(rsp *http.Response) (*PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableResponse parses an HTTP response from a GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableWithResponse call
func ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableResponse(rsp *http.Response) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeResponse parses an HTTP response from a GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeWithResponse call
func ParseGetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeResponse(rsp *http.Response) (*GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientTemplatesClientScopeIdScopeMappingsRealmCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientTypesResponse parses an HTTP response from a GetAdminRealmsRealmClientTypesWithResponse call
func ParseGetAdminRealmsRealmClientTypesResponse(rsp *http.Response) (*GetAdminRealmsRealmClientTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientTypesRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientTypesResponse parses an HTTP response from a PutAdminRealmsRealmClientTypesWithResponse call
func ParsePutAdminRealmsRealmClientTypesResponse(rsp *http.Response) (*PutAdminRealmsRealmClientTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsResponse parses an HTTP response from a GetAdminRealmsRealmClientsWithResponse call
func ParseGetAdminRealmsRealmClientsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClientRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsResponse parses an HTTP response from a PostAdminRealmsRealmClientsWithResponse call
func ParsePostAdminRealmsRealmClientsResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsInitialAccessResponse parses an HTTP response from a GetAdminRealmsRealmClientsInitialAccessWithResponse call
func ParseGetAdminRealmsRealmClientsInitialAccessResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsInitialAccessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsInitialAccessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClientInitialAccessPresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsInitialAccessResponse parses an HTTP response from a PostAdminRealmsRealmClientsInitialAccessWithResponse call
func ParsePostAdminRealmsRealmClientsInitialAccessResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsInitialAccessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsInitialAccessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ClientInitialAccessCreatePresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientsInitialAccessIdResponse parses an HTTP response from a DeleteAdminRealmsRealmClientsInitialAccessIdWithResponse call
func ParseDeleteAdminRealmsRealmClientsInitialAccessIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientsInitialAccessIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientsInitialAccessIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientsClientUuidResponse parses an HTTP response from a DeleteAdminRealmsRealmClientsClientUuidWithResponse call
func ParseDeleteAdminRealmsRealmClientsClientUuidResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientsClientUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientsClientUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientsClientUuidResponse parses an HTTP response from a PutAdminRealmsRealmClientsClientUuidWithResponse call
func ParsePutAdminRealmsRealmClientsClientUuidResponse(rsp *http.Response) (*PutAdminRealmsRealmClientsClientUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientsClientUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceServerRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse parses an HTTP response from a PutAdminRealmsRealmClientsClientUuidAuthzResourceServerWithResponse call
func ParsePutAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse(rsp *http.Response) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidAuthzResourceServerImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AbstractPolicyRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionEvaluateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyEvaluationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PolicyProviderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPermissionSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AbstractPolicyRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AbstractPolicyRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyEvaluateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PolicyEvaluationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicyProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PolicyProviderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerPolicySearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AbstractPolicyRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ResourceRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse parses an HTTP response from a DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithResponse call
func ParseDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse parses an HTTP response from a PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdWithResponse call
func ParsePutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse(rsp *http.Response) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PolicyRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerResourceResourceIdScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse parses an HTTP response from a DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithResponse call
func ParseDeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse parses an HTTP response from a PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdWithResponse call
func ParsePutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse(rsp *http.Response) (*PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PolicyRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerScopeScopeIdResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ResourceRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidAuthzResourceServerSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResourceServerRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidCertificatesAttrResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidCertificatesAttrWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidCertificatesAttrResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidCertificatesAttrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidCertificatesAttrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidCertificatesAttrDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidCertificatesAttrGenerateAndDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidCertificatesAttrUploadCertificateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CertificateRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidClientSecretResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidClientSecretWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidClientSecretResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidClientSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidClientSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidClientSecretResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidClientSecretWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidClientSecretResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidClientSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidClientSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse parses an HTTP response from a DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedWithResponse call
func ParseDeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidClientSecretRotatedWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidClientSecretRotatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidDefaultClientScopesResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidDefaultClientScopesWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidDefaultClientScopesResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidDefaultClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidDefaultClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse parses an HTTP response from a DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdWithResponse call
func ParseDeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse parses an HTTP response from a PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdWithResponse call
func ParsePutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse(rsp *http.Response) (*PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientsClientUuidDefaultClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleIdTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IDToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidEvaluateScopesGenerateExampleUserinfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidEvaluateScopesProtocolMappersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProtocolMapperEvaluationRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdGrantedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidEvaluateScopesScopeMappingsRoleContainerIdNotGrantedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidInstallationProvidersProviderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidManagementPermissionsResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidManagementPermissionsWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidManagementPermissionsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientsClientUuidManagementPermissionsResponse parses an HTTP response from a PutAdminRealmsRealmClientsClientUuidManagementPermissionsWithResponse call
func ParsePutAdminRealmsRealmClientsClientUuidManagementPermissionsResponse(rsp *http.Response) (*PutAdminRealmsRealmClientsClientUuidManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientsClientUuidManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidNodesResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidNodesWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidNodesResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidNodesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientsClientUuidNodesNodeResponse parses an HTTP response from a DeleteAdminRealmsRealmClientsClientUuidNodesNodeWithResponse call
func ParseDeleteAdminRealmsRealmClientsClientUuidNodesNodeResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientsClientUuidNodesNodeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientsClientUuidNodesNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidOfflineSessionCountResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidOfflineSessionCountWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidOfflineSessionCountResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidOfflineSessionCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidOfflineSessionCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidOfflineSessionsResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidOfflineSessionsWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidOfflineSessionsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidOfflineSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidOfflineSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserSessionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidOptionalClientScopesResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidOptionalClientScopesWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidOptionalClientScopesResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidOptionalClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidOptionalClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse parses an HTTP response from a DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdWithResponse call
func ParseDeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse parses an HTTP response from a PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdWithResponse call
func ParsePutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse(rsp *http.Response) (*PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientsClientUuidOptionalClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidProtocolMappersAddModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidProtocolMappersModelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse parses an HTTP response from a DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithResponse call
func ParseDeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse parses an HTTP response from a PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdWithResponse call
func ParsePutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse(rsp *http.Response) (*PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientsClientUuidProtocolMappersModelsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidProtocolMappersProtocolProtocolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProtocolMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidPushRevocationResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidPushRevocationWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidPushRevocationResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidPushRevocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidPushRevocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRequestResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidRegistrationAccessTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidRolesResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidRolesWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidRolesResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidRolesResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidRolesWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidRolesResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameResponse parses an HTTP response from a DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameWithResponse call
func ParseDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidRolesRoleNameWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidRolesRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientsClientUuidRolesRoleNameResponse parses an HTTP response from a PutAdminRealmsRealmClientsClientUuidRolesRoleNameWithResponse call
func ParsePutAdminRealmsRealmClientsClientUuidRolesRoleNameResponse(rsp *http.Response) (*PutAdminRealmsRealmClientsClientUuidRolesRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientsClientUuidRolesRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse parses an HTTP response from a DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithResponse call
func ParseDeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesClientsClient2UuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidRolesRoleNameCompositesRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidRolesRoleNameGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse parses an HTTP response from a PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsWithResponse call
func ParsePutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse(rsp *http.Response) (*PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmClientsClientUuidRolesRoleNameManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidRolesRoleNameUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidScopeMappingsWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidScopeMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MappingsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse parses an HTTP response from a DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithResponse call
func ParseDeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidScopeMappingsClientsClientCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse parses an HTTP response from a DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithResponse call
func ParseDeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse(rsp *http.Response) (*DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse parses an HTTP response from a PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmWithResponse call
func ParsePostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse(rsp *http.Response) (*PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmClientsClientUuidScopeMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidScopeMappingsRealmCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidServiceAccountUserResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidServiceAccountUserWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidServiceAccountUserResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidServiceAccountUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidServiceAccountUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidSessionCountResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidSessionCountWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidSessionCountResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidSessionCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidSessionCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidTestNodesAvailableResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidTestNodesAvailableWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidTestNodesAvailableResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidTestNodesAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidTestNodesAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRequestResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmClientsClientUuidUserSessionsResponse parses an HTTP response from a GetAdminRealmsRealmClientsClientUuidUserSessionsWithResponse call
func ParseGetAdminRealmsRealmClientsClientUuidUserSessionsResponse(rsp *http.Response) (*GetAdminRealmsRealmClientsClientUuidUserSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmClientsClientUuidUserSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserSessionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmComponentsResponse parses an HTTP response from a GetAdminRealmsRealmComponentsWithResponse call
func ParseGetAdminRealmsRealmComponentsResponse(rsp *http.Response) (*GetAdminRealmsRealmComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ComponentRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmComponentsResponse parses an HTTP response from a PostAdminRealmsRealmComponentsWithResponse call
func ParsePostAdminRealmsRealmComponentsResponse(rsp *http.Response) (*PostAdminRealmsRealmComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmComponentsIdResponse parses an HTTP response from a DeleteAdminRealmsRealmComponentsIdWithResponse call
func ParseDeleteAdminRealmsRealmComponentsIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmComponentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmComponentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmComponentsIdResponse parses an HTTP response from a GetAdminRealmsRealmComponentsIdWithResponse call
func ParseGetAdminRealmsRealmComponentsIdResponse(rsp *http.Response) (*GetAdminRealmsRealmComponentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmComponentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ComponentRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmComponentsIdResponse parses an HTTP response from a PutAdminRealmsRealmComponentsIdWithResponse call
func ParsePutAdminRealmsRealmComponentsIdResponse(rsp *http.Response) (*PutAdminRealmsRealmComponentsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmComponentsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmComponentsIdSubComponentTypesResponse parses an HTTP response from a GetAdminRealmsRealmComponentsIdSubComponentTypesWithResponse call
func ParseGetAdminRealmsRealmComponentsIdSubComponentTypesResponse(rsp *http.Response) (*GetAdminRealmsRealmComponentsIdSubComponentTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmComponentsIdSubComponentTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ComponentTypeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmCredentialRegistratorsResponse parses an HTTP response from a GetAdminRealmsRealmCredentialRegistratorsWithResponse call
func ParseGetAdminRealmsRealmCredentialRegistratorsResponse(rsp *http.Response) (*GetAdminRealmsRealmCredentialRegistratorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmCredentialRegistratorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmDefaultDefaultClientScopesResponse parses an HTTP response from a GetAdminRealmsRealmDefaultDefaultClientScopesWithResponse call
func ParseGetAdminRealmsRealmDefaultDefaultClientScopesResponse(rsp *http.Response) (*GetAdminRealmsRealmDefaultDefaultClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmDefaultDefaultClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse parses an HTTP response from a DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdWithResponse call
func ParseDeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse parses an HTTP response from a PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdWithResponse call
func ParsePutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse(rsp *http.Response) (*PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmDefaultDefaultClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmDefaultGroupsResponse parses an HTTP response from a GetAdminRealmsRealmDefaultGroupsWithResponse call
func ParseGetAdminRealmsRealmDefaultGroupsResponse(rsp *http.Response) (*GetAdminRealmsRealmDefaultGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmDefaultGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmDefaultGroupsGroupIdResponse parses an HTTP response from a DeleteAdminRealmsRealmDefaultGroupsGroupIdWithResponse call
func ParseDeleteAdminRealmsRealmDefaultGroupsGroupIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmDefaultGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmDefaultGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmDefaultGroupsGroupIdResponse parses an HTTP response from a PutAdminRealmsRealmDefaultGroupsGroupIdWithResponse call
func ParsePutAdminRealmsRealmDefaultGroupsGroupIdResponse(rsp *http.Response) (*PutAdminRealmsRealmDefaultGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmDefaultGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmDefaultOptionalClientScopesResponse parses an HTTP response from a GetAdminRealmsRealmDefaultOptionalClientScopesWithResponse call
func ParseGetAdminRealmsRealmDefaultOptionalClientScopesResponse(rsp *http.Response) (*GetAdminRealmsRealmDefaultOptionalClientScopesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmDefaultOptionalClientScopesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClientScopeRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse parses an HTTP response from a DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdWithResponse call
func ParseDeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse parses an HTTP response from a PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdWithResponse call
func ParsePutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse(rsp *http.Response) (*PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmDefaultOptionalClientScopesClientScopeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmEventsResponse parses an HTTP response from a DeleteAdminRealmsRealmEventsWithResponse call
func ParseDeleteAdminRealmsRealmEventsResponse(rsp *http.Response) (*DeleteAdminRealmsRealmEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmEventsResponse parses an HTTP response from a GetAdminRealmsRealmEventsWithResponse call
func ParseGetAdminRealmsRealmEventsResponse(rsp *http.Response) (*GetAdminRealmsRealmEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EventRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmEventsConfigResponse parses an HTTP response from a GetAdminRealmsRealmEventsConfigWithResponse call
func ParseGetAdminRealmsRealmEventsConfigResponse(rsp *http.Response) (*GetAdminRealmsRealmEventsConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmEventsConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RealmEventsConfigRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmEventsConfigResponse parses an HTTP response from a PutAdminRealmsRealmEventsConfigWithResponse call
func ParsePutAdminRealmsRealmEventsConfigResponse(rsp *http.Response) (*PutAdminRealmsRealmEventsConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmEventsConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmGroupByPathPathResponse parses an HTTP response from a GetAdminRealmsRealmGroupByPathPathWithResponse call
func ParseGetAdminRealmsRealmGroupByPathPathResponse(rsp *http.Response) (*GetAdminRealmsRealmGroupByPathPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmGroupByPathPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmGroupsResponse parses an HTTP response from a GetAdminRealmsRealmGroupsWithResponse call
func ParseGetAdminRealmsRealmGroupsResponse(rsp *http.Response) (*GetAdminRealmsRealmGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmGroupsResponse parses an HTTP response from a PostAdminRealmsRealmGroupsWithResponse call
func ParsePostAdminRealmsRealmGroupsResponse(rsp *http.Response) (*PostAdminRealmsRealmGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmGroupsCountResponse parses an HTTP response from a GetAdminRealmsRealmGroupsCountWithResponse call
func ParseGetAdminRealmsRealmGroupsCountResponse(rsp *http.Response) (*GetAdminRealmsRealmGroupsCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmGroupsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmGroupsGroupIdResponse parses an HTTP response from a DeleteAdminRealmsRealmGroupsGroupIdWithResponse call
func ParseDeleteAdminRealmsRealmGroupsGroupIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmGroupsGroupIdResponse parses an HTTP response from a GetAdminRealmsRealmGroupsGroupIdWithResponse call
func ParseGetAdminRealmsRealmGroupsGroupIdResponse(rsp *http.Response) (*GetAdminRealmsRealmGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmGroupsGroupIdResponse parses an HTTP response from a PutAdminRealmsRealmGroupsGroupIdWithResponse call
func ParsePutAdminRealmsRealmGroupsGroupIdResponse(rsp *http.Response) (*PutAdminRealmsRealmGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmGroupsGroupIdChildrenResponse parses an HTTP response from a GetAdminRealmsRealmGroupsGroupIdChildrenWithResponse call
func ParseGetAdminRealmsRealmGroupsGroupIdChildrenResponse(rsp *http.Response) (*GetAdminRealmsRealmGroupsGroupIdChildrenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmGroupsGroupIdChildrenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmGroupsGroupIdChildrenResponse parses an HTTP response from a PostAdminRealmsRealmGroupsGroupIdChildrenWithResponse call
func ParsePostAdminRealmsRealmGroupsGroupIdChildrenResponse(rsp *http.Response) (*PostAdminRealmsRealmGroupsGroupIdChildrenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmGroupsGroupIdChildrenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse parses an HTTP response from a GetAdminRealmsRealmGroupsGroupIdManagementPermissionsWithResponse call
func ParseGetAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse(rsp *http.Response) (*GetAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse parses an HTTP response from a PutAdminRealmsRealmGroupsGroupIdManagementPermissionsWithResponse call
func ParsePutAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse(rsp *http.Response) (*PutAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmGroupsGroupIdManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmGroupsGroupIdMembersResponse parses an HTTP response from a GetAdminRealmsRealmGroupsGroupIdMembersWithResponse call
func ParseGetAdminRealmsRealmGroupsGroupIdMembersResponse(rsp *http.Response) (*GetAdminRealmsRealmGroupsGroupIdMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmGroupsGroupIdMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsResponse parses an HTTP response from a GetAdminRealmsRealmGroupsGroupIdRoleMappingsWithResponse call
func ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsResponse(rsp *http.Response) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmGroupsGroupIdRoleMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MappingsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse parses an HTTP response from a DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithResponse call
func ParseDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse parses an HTTP response from a GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithResponse call
func ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse(rsp *http.Response) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse parses an HTTP response from a PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdWithResponse call
func ParsePostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse(rsp *http.Response) (*PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableResponse parses an HTTP response from a GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableWithResponse call
func ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableResponse(rsp *http.Response) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeResponse parses an HTTP response from a GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeWithResponse call
func ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeResponse(rsp *http.Response) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmGroupsGroupIdRoleMappingsClientsClientIdCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse parses an HTTP response from a DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithResponse call
func ParseDeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse(rsp *http.Response) (*DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse parses an HTTP response from a GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithResponse call
func ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse(rsp *http.Response) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse parses an HTTP response from a PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmWithResponse call
func ParsePostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse(rsp *http.Response) (*PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmGroupsGroupIdRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableResponse parses an HTTP response from a GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableWithResponse call
func ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableResponse(rsp *http.Response) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeResponse parses an HTTP response from a GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeWithResponse call
func ParseGetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeResponse(rsp *http.Response) (*GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmGroupsGroupIdRoleMappingsRealmCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmIdentityProviderImportConfigResponse parses an HTTP response from a PostAdminRealmsRealmIdentityProviderImportConfigWithResponse call
func ParsePostAdminRealmsRealmIdentityProviderImportConfigResponse(rsp *http.Response) (*PostAdminRealmsRealmIdentityProviderImportConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmIdentityProviderImportConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmIdentityProviderInstancesResponse parses an HTTP response from a GetAdminRealmsRealmIdentityProviderInstancesWithResponse call
func ParseGetAdminRealmsRealmIdentityProviderInstancesResponse(rsp *http.Response) (*GetAdminRealmsRealmIdentityProviderInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmIdentityProviderInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IdentityProviderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmIdentityProviderInstancesResponse parses an HTTP response from a PostAdminRealmsRealmIdentityProviderInstancesWithResponse call
func ParsePostAdminRealmsRealmIdentityProviderInstancesResponse(rsp *http.Response) (*PostAdminRealmsRealmIdentityProviderInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmIdentityProviderInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmIdentityProviderInstancesAliasResponse parses an HTTP response from a DeleteAdminRealmsRealmIdentityProviderInstancesAliasWithResponse call
func ParseDeleteAdminRealmsRealmIdentityProviderInstancesAliasResponse(rsp *http.Response) (*DeleteAdminRealmsRealmIdentityProviderInstancesAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmIdentityProviderInstancesAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmIdentityProviderInstancesAliasResponse parses an HTTP response from a GetAdminRealmsRealmIdentityProviderInstancesAliasWithResponse call
func ParseGetAdminRealmsRealmIdentityProviderInstancesAliasResponse(rsp *http.Response) (*GetAdminRealmsRealmIdentityProviderInstancesAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmIdentityProviderInstancesAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProviderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmIdentityProviderInstancesAliasResponse parses an HTTP response from a PutAdminRealmsRealmIdentityProviderInstancesAliasWithResponse call
func ParsePutAdminRealmsRealmIdentityProviderInstancesAliasResponse(rsp *http.Response) (*PutAdminRealmsRealmIdentityProviderInstancesAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmIdentityProviderInstancesAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmIdentityProviderInstancesAliasExportResponse parses an HTTP response from a GetAdminRealmsRealmIdentityProviderInstancesAliasExportWithResponse call
func ParseGetAdminRealmsRealmIdentityProviderInstancesAliasExportResponse(rsp *http.Response) (*GetAdminRealmsRealmIdentityProviderInstancesAliasExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmIdentityProviderInstancesAliasExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse parses an HTTP response from a GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse call
func ParseGetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse(rsp *http.Response) (*GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse parses an HTTP response from a PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsWithResponse call
func ParsePutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse(rsp *http.Response) (*PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmIdentityProviderInstancesAliasManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesResponse parses an HTTP response from a GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesWithResponse call
func ParseGetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesResponse(rsp *http.Response) (*GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmIdentityProviderInstancesAliasMapperTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse parses an HTTP response from a GetAdminRealmsRealmIdentityProviderInstancesAliasMappersWithResponse call
func ParseGetAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse(rsp *http.Response) (*GetAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IdentityProviderMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse parses an HTTP response from a PostAdminRealmsRealmIdentityProviderInstancesAliasMappersWithResponse call
func ParsePostAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse(rsp *http.Response) (*PostAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmIdentityProviderInstancesAliasMappersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse parses an HTTP response from a DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithResponse call
func ParseDeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse parses an HTTP response from a GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithResponse call
func ParseGetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse(rsp *http.Response) (*GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProviderMapperRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse parses an HTTP response from a PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdWithResponse call
func ParsePutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse(rsp *http.Response) (*PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmIdentityProviderInstancesAliasMappersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysResponse parses an HTTP response from a GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysWithResponse call
func ParseGetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysResponse(rsp *http.Response) (*GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmIdentityProviderInstancesAliasReloadKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest bool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmIdentityProviderProvidersProviderIdResponse parses an HTTP response from a GetAdminRealmsRealmIdentityProviderProvidersProviderIdWithResponse call
func ParseGetAdminRealmsRealmIdentityProviderProvidersProviderIdResponse(rsp *http.Response) (*GetAdminRealmsRealmIdentityProviderProvidersProviderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmIdentityProviderProvidersProviderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmKeysResponse parses an HTTP response from a GetAdminRealmsRealmKeysWithResponse call
func ParseGetAdminRealmsRealmKeysResponse(rsp *http.Response) (*GetAdminRealmsRealmKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest KeysMetadataRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmLocalizationResponse parses an HTTP response from a GetAdminRealmsRealmLocalizationWithResponse call
func ParseGetAdminRealmsRealmLocalizationResponse(rsp *http.Response) (*GetAdminRealmsRealmLocalizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmLocalizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmLocalizationLocaleResponse parses an HTTP response from a DeleteAdminRealmsRealmLocalizationLocaleWithResponse call
func ParseDeleteAdminRealmsRealmLocalizationLocaleResponse(rsp *http.Response) (*DeleteAdminRealmsRealmLocalizationLocaleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmLocalizationLocaleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmLocalizationLocaleResponse parses an HTTP response from a GetAdminRealmsRealmLocalizationLocaleWithResponse call
func ParseGetAdminRealmsRealmLocalizationLocaleResponse(rsp *http.Response) (*GetAdminRealmsRealmLocalizationLocaleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmLocalizationLocaleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmLocalizationLocaleResponse parses an HTTP response from a PostAdminRealmsRealmLocalizationLocaleWithResponse call
func ParsePostAdminRealmsRealmLocalizationLocaleResponse(rsp *http.Response) (*PostAdminRealmsRealmLocalizationLocaleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmLocalizationLocaleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmLocalizationLocaleKeyResponse parses an HTTP response from a DeleteAdminRealmsRealmLocalizationLocaleKeyWithResponse call
func ParseDeleteAdminRealmsRealmLocalizationLocaleKeyResponse(rsp *http.Response) (*DeleteAdminRealmsRealmLocalizationLocaleKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmLocalizationLocaleKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmLocalizationLocaleKeyResponse parses an HTTP response from a GetAdminRealmsRealmLocalizationLocaleKeyWithResponse call
func ParseGetAdminRealmsRealmLocalizationLocaleKeyResponse(rsp *http.Response) (*GetAdminRealmsRealmLocalizationLocaleKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmLocalizationLocaleKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmLocalizationLocaleKeyResponse parses an HTTP response from a PutAdminRealmsRealmLocalizationLocaleKeyWithResponse call
func ParsePutAdminRealmsRealmLocalizationLocaleKeyResponse(rsp *http.Response) (*PutAdminRealmsRealmLocalizationLocaleKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmLocalizationLocaleKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmLogoutAllResponse parses an HTTP response from a PostAdminRealmsRealmLogoutAllWithResponse call
func ParsePostAdminRealmsRealmLogoutAllResponse(rsp *http.Response) (*PostAdminRealmsRealmLogoutAllResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmLogoutAllResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRequestResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmOrganizationsResponse parses an HTTP response from a GetAdminRealmsRealmOrganizationsWithResponse call
func ParseGetAdminRealmsRealmOrganizationsResponse(rsp *http.Response) (*GetAdminRealmsRealmOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrganizationRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmOrganizationsResponse parses an HTTP response from a PostAdminRealmsRealmOrganizationsWithResponse call
func ParsePostAdminRealmsRealmOrganizationsResponse(rsp *http.Response) (*PostAdminRealmsRealmOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmOrganizationsMembersIdOrganizationsResponse parses an HTTP response from a GetAdminRealmsRealmOrganizationsMembersIdOrganizationsWithResponse call
func ParseGetAdminRealmsRealmOrganizationsMembersIdOrganizationsResponse(rsp *http.Response) (*GetAdminRealmsRealmOrganizationsMembersIdOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmOrganizationsMembersIdOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrganizationRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmOrganizationsIdResponse parses an HTTP response from a DeleteAdminRealmsRealmOrganizationsIdWithResponse call
func ParseDeleteAdminRealmsRealmOrganizationsIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmOrganizationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmOrganizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmOrganizationsIdResponse parses an HTTP response from a GetAdminRealmsRealmOrganizationsIdWithResponse call
func ParseGetAdminRealmsRealmOrganizationsIdResponse(rsp *http.Response) (*GetAdminRealmsRealmOrganizationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmOrganizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmOrganizationsIdResponse parses an HTTP response from a PutAdminRealmsRealmOrganizationsIdWithResponse call
func ParsePutAdminRealmsRealmOrganizationsIdResponse(rsp *http.Response) (*PutAdminRealmsRealmOrganizationsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmOrganizationsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmOrganizationsIdIdentityProvidersResponse parses an HTTP response from a GetAdminRealmsRealmOrganizationsIdIdentityProvidersWithResponse call
func ParseGetAdminRealmsRealmOrganizationsIdIdentityProvidersResponse(rsp *http.Response) (*GetAdminRealmsRealmOrganizationsIdIdentityProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmOrganizationsIdIdentityProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []IdentityProviderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmOrganizationsIdIdentityProvidersResponse parses an HTTP response from a PostAdminRealmsRealmOrganizationsIdIdentityProvidersWithResponse call
func ParsePostAdminRealmsRealmOrganizationsIdIdentityProvidersResponse(rsp *http.Response) (*PostAdminRealmsRealmOrganizationsIdIdentityProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmOrganizationsIdIdentityProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse parses an HTTP response from a DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasWithResponse call
func ParseDeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse(rsp *http.Response) (*DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse parses an HTTP response from a GetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasWithResponse call
func ParseGetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse(rsp *http.Response) (*GetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmOrganizationsIdIdentityProvidersAliasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityProviderRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmOrganizationsIdMembersResponse parses an HTTP response from a GetAdminRealmsRealmOrganizationsIdMembersWithResponse call
func ParseGetAdminRealmsRealmOrganizationsIdMembersResponse(rsp *http.Response) (*GetAdminRealmsRealmOrganizationsIdMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmOrganizationsIdMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MemberRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmOrganizationsIdMembersResponse parses an HTTP response from a PostAdminRealmsRealmOrganizationsIdMembersWithResponse call
func ParsePostAdminRealmsRealmOrganizationsIdMembersResponse(rsp *http.Response) (*PostAdminRealmsRealmOrganizationsIdMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmOrganizationsIdMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmOrganizationsIdMembersCountResponse parses an HTTP response from a GetAdminRealmsRealmOrganizationsIdMembersCountWithResponse call
func ParseGetAdminRealmsRealmOrganizationsIdMembersCountResponse(rsp *http.Response) (*GetAdminRealmsRealmOrganizationsIdMembersCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmOrganizationsIdMembersCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserResponse parses an HTTP response from a PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserWithResponse call
func ParsePostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserResponse(rsp *http.Response) (*PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmOrganizationsIdMembersInviteExistingUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmOrganizationsIdMembersInviteUserResponse parses an HTTP response from a PostAdminRealmsRealmOrganizationsIdMembersInviteUserWithResponse call
func ParsePostAdminRealmsRealmOrganizationsIdMembersInviteUserResponse(rsp *http.Response) (*PostAdminRealmsRealmOrganizationsIdMembersInviteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmOrganizationsIdMembersInviteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmOrganizationsIdMembersMemberIdResponse parses an HTTP response from a DeleteAdminRealmsRealmOrganizationsIdMembersMemberIdWithResponse call
func ParseDeleteAdminRealmsRealmOrganizationsIdMembersMemberIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmOrganizationsIdMembersMemberIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmOrganizationsIdMembersMemberIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmOrganizationsIdMembersMemberIdResponse parses an HTTP response from a GetAdminRealmsRealmOrganizationsIdMembersMemberIdWithResponse call
func ParseGetAdminRealmsRealmOrganizationsIdMembersMemberIdResponse(rsp *http.Response) (*GetAdminRealmsRealmOrganizationsIdMembersMemberIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmOrganizationsIdMembersMemberIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MemberRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsResponse parses an HTTP response from a GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsWithResponse call
func ParseGetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsResponse(rsp *http.Response) (*GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmOrganizationsIdMembersMemberIdOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrganizationRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmPartialExportResponse parses an HTTP response from a PostAdminRealmsRealmPartialExportWithResponse call
func ParsePostAdminRealmsRealmPartialExportResponse(rsp *http.Response) (*PostAdminRealmsRealmPartialExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmPartialExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmPartialImportResponse parses an HTTP response from a PostAdminRealmsRealmPartialImportWithResponse call
func ParsePostAdminRealmsRealmPartialImportResponse(rsp *http.Response) (*PostAdminRealmsRealmPartialImportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmPartialImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmPushRevocationResponse parses an HTTP response from a PostAdminRealmsRealmPushRevocationWithResponse call
func ParsePostAdminRealmsRealmPushRevocationResponse(rsp *http.Response) (*PostAdminRealmsRealmPushRevocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmPushRevocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GlobalRequestResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmRolesResponse parses an HTTP response from a GetAdminRealmsRealmRolesWithResponse call
func ParseGetAdminRealmsRealmRolesResponse(rsp *http.Response) (*GetAdminRealmsRealmRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmRolesResponse parses an HTTP response from a PostAdminRealmsRealmRolesWithResponse call
func ParsePostAdminRealmsRealmRolesResponse(rsp *http.Response) (*PostAdminRealmsRealmRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmRolesByIdRoleIdResponse parses an HTTP response from a DeleteAdminRealmsRealmRolesByIdRoleIdWithResponse call
func ParseDeleteAdminRealmsRealmRolesByIdRoleIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmRolesByIdRoleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmRolesByIdRoleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmRolesByIdRoleIdResponse parses an HTTP response from a GetAdminRealmsRealmRolesByIdRoleIdWithResponse call
func ParseGetAdminRealmsRealmRolesByIdRoleIdResponse(rsp *http.Response) (*GetAdminRealmsRealmRolesByIdRoleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmRolesByIdRoleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmRolesByIdRoleIdResponse parses an HTTP response from a PutAdminRealmsRealmRolesByIdRoleIdWithResponse call
func ParsePutAdminRealmsRealmRolesByIdRoleIdResponse(rsp *http.Response) (*PutAdminRealmsRealmRolesByIdRoleIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmRolesByIdRoleIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmRolesByIdRoleIdCompositesResponse parses an HTTP response from a DeleteAdminRealmsRealmRolesByIdRoleIdCompositesWithResponse call
func ParseDeleteAdminRealmsRealmRolesByIdRoleIdCompositesResponse(rsp *http.Response) (*DeleteAdminRealmsRealmRolesByIdRoleIdCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmRolesByIdRoleIdCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmRolesByIdRoleIdCompositesResponse parses an HTTP response from a GetAdminRealmsRealmRolesByIdRoleIdCompositesWithResponse call
func ParseGetAdminRealmsRealmRolesByIdRoleIdCompositesResponse(rsp *http.Response) (*GetAdminRealmsRealmRolesByIdRoleIdCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmRolesByIdRoleIdCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmRolesByIdRoleIdCompositesResponse parses an HTTP response from a PostAdminRealmsRealmRolesByIdRoleIdCompositesWithResponse call
func ParsePostAdminRealmsRealmRolesByIdRoleIdCompositesResponse(rsp *http.Response) (*PostAdminRealmsRealmRolesByIdRoleIdCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmRolesByIdRoleIdCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidResponse parses an HTTP response from a GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidWithResponse call
func ParseGetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidResponse(rsp *http.Response) (*GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmRolesByIdRoleIdCompositesClientsClientUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmRolesByIdRoleIdCompositesRealmResponse parses an HTTP response from a GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmWithResponse call
func ParseGetAdminRealmsRealmRolesByIdRoleIdCompositesRealmResponse(rsp *http.Response) (*GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmRolesByIdRoleIdCompositesRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse parses an HTTP response from a GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithResponse call
func ParseGetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse(rsp *http.Response) (*GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse parses an HTTP response from a PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsWithResponse call
func ParsePutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse(rsp *http.Response) (*PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmRolesByIdRoleIdManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmRolesRoleNameResponse parses an HTTP response from a DeleteAdminRealmsRealmRolesRoleNameWithResponse call
func ParseDeleteAdminRealmsRealmRolesRoleNameResponse(rsp *http.Response) (*DeleteAdminRealmsRealmRolesRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmRolesRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmRolesRoleNameResponse parses an HTTP response from a GetAdminRealmsRealmRolesRoleNameWithResponse call
func ParseGetAdminRealmsRealmRolesRoleNameResponse(rsp *http.Response) (*GetAdminRealmsRealmRolesRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmRolesRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmRolesRoleNameResponse parses an HTTP response from a PutAdminRealmsRealmRolesRoleNameWithResponse call
func ParsePutAdminRealmsRealmRolesRoleNameResponse(rsp *http.Response) (*PutAdminRealmsRealmRolesRoleNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmRolesRoleNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmRolesRoleNameCompositesResponse parses an HTTP response from a DeleteAdminRealmsRealmRolesRoleNameCompositesWithResponse call
func ParseDeleteAdminRealmsRealmRolesRoleNameCompositesResponse(rsp *http.Response) (*DeleteAdminRealmsRealmRolesRoleNameCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmRolesRoleNameCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmRolesRoleNameCompositesResponse parses an HTTP response from a GetAdminRealmsRealmRolesRoleNameCompositesWithResponse call
func ParseGetAdminRealmsRealmRolesRoleNameCompositesResponse(rsp *http.Response) (*GetAdminRealmsRealmRolesRoleNameCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmRolesRoleNameCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmRolesRoleNameCompositesResponse parses an HTTP response from a PostAdminRealmsRealmRolesRoleNameCompositesWithResponse call
func ParsePostAdminRealmsRealmRolesRoleNameCompositesResponse(rsp *http.Response) (*PostAdminRealmsRealmRolesRoleNameCompositesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmRolesRoleNameCompositesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidResponse parses an HTTP response from a GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidWithResponse call
func ParseGetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidResponse(rsp *http.Response) (*GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmRolesRoleNameCompositesClientsClientUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmRolesRoleNameCompositesRealmResponse parses an HTTP response from a GetAdminRealmsRealmRolesRoleNameCompositesRealmWithResponse call
func ParseGetAdminRealmsRealmRolesRoleNameCompositesRealmResponse(rsp *http.Response) (*GetAdminRealmsRealmRolesRoleNameCompositesRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmRolesRoleNameCompositesRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmRolesRoleNameGroupsResponse parses an HTTP response from a GetAdminRealmsRealmRolesRoleNameGroupsWithResponse call
func ParseGetAdminRealmsRealmRolesRoleNameGroupsResponse(rsp *http.Response) (*GetAdminRealmsRealmRolesRoleNameGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmRolesRoleNameGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmRolesRoleNameManagementPermissionsResponse parses an HTTP response from a GetAdminRealmsRealmRolesRoleNameManagementPermissionsWithResponse call
func ParseGetAdminRealmsRealmRolesRoleNameManagementPermissionsResponse(rsp *http.Response) (*GetAdminRealmsRealmRolesRoleNameManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmRolesRoleNameManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmRolesRoleNameManagementPermissionsResponse parses an HTTP response from a PutAdminRealmsRealmRolesRoleNameManagementPermissionsWithResponse call
func ParsePutAdminRealmsRealmRolesRoleNameManagementPermissionsResponse(rsp *http.Response) (*PutAdminRealmsRealmRolesRoleNameManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmRolesRoleNameManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmRolesRoleNameUsersResponse parses an HTTP response from a GetAdminRealmsRealmRolesRoleNameUsersWithResponse call
func ParseGetAdminRealmsRealmRolesRoleNameUsersResponse(rsp *http.Response) (*GetAdminRealmsRealmRolesRoleNameUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmRolesRoleNameUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmSessionsSessionResponse parses an HTTP response from a DeleteAdminRealmsRealmSessionsSessionWithResponse call
func ParseDeleteAdminRealmsRealmSessionsSessionResponse(rsp *http.Response) (*DeleteAdminRealmsRealmSessionsSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmSessionsSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmTestSMTPConnectionResponse parses an HTTP response from a PostAdminRealmsRealmTestSMTPConnectionWithResponse call
func ParsePostAdminRealmsRealmTestSMTPConnectionResponse(rsp *http.Response) (*PostAdminRealmsRealmTestSMTPConnectionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmTestSMTPConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersResponse parses an HTTP response from a GetAdminRealmsRealmUsersWithResponse call
func ParseGetAdminRealmsRealmUsersResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmUsersResponse parses an HTTP response from a PostAdminRealmsRealmUsersWithResponse call
func ParsePostAdminRealmsRealmUsersResponse(rsp *http.Response) (*PostAdminRealmsRealmUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersManagementPermissionsResponse parses an HTTP response from a GetAdminRealmsRealmUsersManagementPermissionsWithResponse call
func ParseGetAdminRealmsRealmUsersManagementPermissionsResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersManagementPermissionsResponse parses an HTTP response from a PutAdminRealmsRealmUsersManagementPermissionsWithResponse call
func ParsePutAdminRealmsRealmUsersManagementPermissionsResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersManagementPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersManagementPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ManagementPermissionReference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersCountResponse parses an HTTP response from a GetAdminRealmsRealmUsersCountWithResponse call
func ParseGetAdminRealmsRealmUsersCountResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersProfileResponse parses an HTTP response from a GetAdminRealmsRealmUsersProfileWithResponse call
func ParseGetAdminRealmsRealmUsersProfileResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UPConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersProfileResponse parses an HTTP response from a PutAdminRealmsRealmUsersProfileWithResponse call
func ParsePutAdminRealmsRealmUsersProfileResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UPConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersProfileMetadataResponse parses an HTTP response from a GetAdminRealmsRealmUsersProfileMetadataWithResponse call
func ParseGetAdminRealmsRealmUsersProfileMetadataResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersProfileMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersProfileMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserProfileMetadata
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmUsersUserIdResponse parses an HTTP response from a DeleteAdminRealmsRealmUsersUserIdWithResponse call
func ParseDeleteAdminRealmsRealmUsersUserIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdConfiguredUserStorageCredentialTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdConsentsResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdConsentsWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdConsentsResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdConsentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdConsentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmUsersUserIdConsentsClientResponse parses an HTTP response from a DeleteAdminRealmsRealmUsersUserIdConsentsClientWithResponse call
func ParseDeleteAdminRealmsRealmUsersUserIdConsentsClientResponse(rsp *http.Response) (*DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmUsersUserIdConsentsClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdCredentialsResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdCredentialsWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdCredentialsResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CredentialRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse parses an HTTP response from a DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdWithResponse call
func ParseDeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmUsersUserIdCredentialsCredentialIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse parses an HTTP response from a PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdWithResponse call
func ParsePostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse(rsp *http.Response) (*PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveAfterNewPreviousCredentialIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse parses an HTTP response from a PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstWithResponse call
func ParsePostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse(rsp *http.Response) (*PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmUsersUserIdCredentialsCredentialIdMoveToFirstResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdCredentialsCredentialIdUserLabelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdDisableCredentialTypesWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdDisableCredentialTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdExecuteActionsEmailWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdExecuteActionsEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdFederatedIdentityResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdFederatedIdentityWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdFederatedIdentityResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdFederatedIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FederatedIdentityRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse parses an HTTP response from a DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse call
func ParseDeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse(rsp *http.Response) (*DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse parses an HTTP response from a PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderWithResponse call
func ParsePostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse(rsp *http.Response) (*PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmUsersUserIdFederatedIdentityProviderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdGroupsResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdGroupsWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdGroupsResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GroupRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdGroupsCountResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdGroupsCountWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdGroupsCountResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdGroupsCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdGroupsCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]int64
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse parses an HTTP response from a DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse call
func ParseDeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmUsersUserIdGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdGroupsGroupIdWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdGroupsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostAdminRealmsRealmUsersUserIdImpersonationResponse parses an HTTP response from a PostAdminRealmsRealmUsersUserIdImpersonationWithResponse call
func ParsePostAdminRealmsRealmUsersUserIdImpersonationResponse(rsp *http.Response) (*PostAdminRealmsRealmUsersUserIdImpersonationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmUsersUserIdImpersonationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmUsersUserIdLogoutResponse parses an HTTP response from a PostAdminRealmsRealmUsersUserIdLogoutWithResponse call
func ParsePostAdminRealmsRealmUsersUserIdLogoutResponse(rsp *http.Response) (*PostAdminRealmsRealmUsersUserIdLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmUsersUserIdLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdOfflineSessionsClientUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserSessionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdResetPasswordResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdResetPasswordWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdResetPasswordResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdResetPasswordEmailWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdResetPasswordEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdRoleMappingsResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdRoleMappingsWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdRoleMappingsResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdRoleMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdRoleMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MappingsRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse parses an HTTP response from a DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithResponse call
func ParseDeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse(rsp *http.Response) (*DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse parses an HTTP response from a PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdWithResponse call
func ParsePostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse(rsp *http.Response) (*PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdRoleMappingsClientsClientIdCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse parses an HTTP response from a DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmWithResponse call
func ParseDeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse(rsp *http.Response) (*DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdRoleMappingsRealmWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse parses an HTTP response from a PostAdminRealmsRealmUsersUserIdRoleMappingsRealmWithResponse call
func ParsePostAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse(rsp *http.Response) (*PostAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAdminRealmsRealmUsersUserIdRoleMappingsRealmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdRoleMappingsRealmAvailableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdRoleMappingsRealmCompositeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoleRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse parses an HTTP response from a PutAdminRealmsRealmUsersUserIdSendVerifyEmailWithResponse call
func ParsePutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse(rsp *http.Response) (*PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminRealmsRealmUsersUserIdSendVerifyEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdSessionsResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdSessionsWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdSessionsResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdSessionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdSessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserSessionRepresentation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse parses an HTTP response from a GetAdminRealmsRealmUsersUserIdUnmanagedAttributesWithResponse call
func ParseGetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse(rsp *http.Response) (*GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminRealmsRealmUsersUserIdUnmanagedAttributesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string][]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
